<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>进击的程序媛，Laker&#39;s blog</title>
  <subtitle>进击的程序媛，江小湖Laker</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://laker.me/blog/"/>
  <updated>2020-03-13T13:31:13.000Z</updated>
  <id>http://laker.me/blog/</id>
  
  <author>
    <name>Laker Huang</name>
    <email>younglaker8#gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue.js Uniapp 获取屏幕、元素的高度宽度</title>
    <link href="http://laker.me/blog/2020/03/13/20_0313_uniapp_screen_width/"/>
    <id>http://laker.me/blog/2020/03/13/20_0313_uniapp_screen_width/</id>
    <published>2020-03-13T00:24:00.000Z</published>
    <updated>2020-03-13T13:31:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做弹框的时候，如果是从top、bottom出来，会自动填满宽度，但是从center出来，就只是内容大小。怎么样给父级设置宽度也没用。如果设置固定值，就不能做到自适应。尝试过用vue的方法，但是不成功，用微信小程序的方法会在编译的时候报错 ，虽然运行的时候没问题。</p>
<p>走了很多弯路，才发现其实uniapp有这个接口，隐藏得比较深。其实也有些惯性思维的原因，不应该跨过框架本身的接口去找其他方法。</p>
<a id="more"></a>
<h2 id="uni-getSystemInfo-OBJECT"><a href="#uni-getSystemInfo-OBJECT" class="headerlink" title="uni.getSystemInfo(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/system/info?id=getsysteminfo" target="_blank" rel="external">uni.getSystemInfo(OBJECT)</a></h2><p>获取系统信息：</p>
<ul>
<li>screenWidth   屏幕宽度</li>
<li>screenHeight  屏幕高度</li>
<li>windowWidth   可使用窗口宽度</li>
<li>windowHeight  可使用窗口高度</li>
<li>windowTop 可使用窗口的顶部位置  App、H5</li>
<li>windowBottom  可使用窗口的底部位置  App、H5</li>
<li>statusBarHeight   状态栏的高</li>
</ul>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">uni.getSystemInfo(&#123;</div><div class="line">    success: <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> &#123;</span></div><div class="line">        console.<span class="built_in">log</span>(res.model);</div><div class="line">        console.<span class="built_in">log</span>(res.pixelRatio);</div><div class="line">        console.<span class="built_in">log</span>(res.windowWidth);</div><div class="line">        console.<span class="built_in">log</span>(res.windowHeight);</div><div class="line">        console.<span class="built_in">log</span>(res.language);</div><div class="line">        console.<span class="built_in">log</span>(res.<span class="built_in">version</span>);</div><div class="line">        console.<span class="built_in">log</span>(res.platform);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>设置弹框宽度为屏幕的80%</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"set-plan-block"</span> :style=<span class="string">"&#123; 'width': setWidth + 'px' &#125;"</span>&gt;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">setWidth</span>: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">  mounted () &#123;</div><div class="line">    <span class="keyword">this</span>.$refs.setPlan.open()</div><div class="line"></div><div class="line">    <span class="comment">// 注意，这里要用个变量存this，不然进到getSystemInfo后this指向会变化，找不到data变量</span></div><div class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span></div><div class="line">    uni.getSystemInfo(&#123;</div><div class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        _this.setWidth = res.windowWidth * <span class="number">0.8</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：计算表达式不能用 80%（会报错），要用0.8<br>错：300 <em> 80%<br>对： 300 </em> 0.8</p>
</blockquote>
<h2 id="获取元素的宽度、高度、定位"><a href="#获取元素的宽度、高度、定位" class="headerlink" title="获取元素的宽度、高度、定位"></a>获取元素的宽度、高度、定位</h2><p>可以获得如下信息：</p>
<ul>
<li>bottom:</li>
<li>dataset，如ref</li>
<li>proto:</li>
<li>height:</li>
<li>id</li>
<li>left:</li>
<li>right:</li>
<li>top:</li>
<li>width:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// uniapp的方法</span></div><div class="line"></div><div class="line">uni.getSystemInfo(&#123;</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">// res - 各种参数</span></div><div class="line"></div><div class="line">    <span class="keyword">let</span> obj = uni.createSelectorQuery().select(<span class="string">'.类名'</span>)</div><div class="line"></div><div class="line">    obj.boundingClientRect(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// data - 各种参数</span></div><div class="line"></div><div class="line">      <span class="built_in">console</span>.log(data)</div><div class="line"></div><div class="line">    &#125;).exec()</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做弹框的时候，如果是从top、bottom出来，会自动填满宽度，但是从center出来，就只是内容大小。怎么样给父级设置宽度也没用。如果设置固定值，就不能做到自适应。尝试过用vue的方法，但是不成功，用微信小程序的方法会在编译的时候报错 ，虽然运行的时候没问题。&lt;/p&gt;
&lt;p&gt;走了很多弯路，才发现其实uniapp有这个接口，隐藏得比较深。其实也有些惯性思维的原因，不应该跨过框架本身的接口去找其他方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript reduce()</title>
    <link href="http://laker.me/blog/2020/03/10/20_0310_vuejs/"/>
    <id>http://laker.me/blog/2020/03/10/20_0310_vuejs/</id>
    <published>2020-03-10T00:24:00.000Z</published>
    <updated>2020-03-13T13:20:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>
<a id="more"></a>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span><span class="params">(prev,cur,<span class="keyword">index</span>,arr)</span><span class="comment">&#123;</span></span></div><div class="line">...</div><div class="line">&#125;, <span class="title">init</span>);</div></pre></td></tr></table></figure>
<ul>
<li>arr 表示原数组；</li>
<li>prev 表示上一次调用回调时的返回值，或者初始值 init;</li>
<li>cur 表示当前正在处理的数组元素；</li>
<li>index 表示当前正在处理的数组元素的索引，若提供 init 值，则索引为0，否则索引为1；</li>
<li>init 表示初始值。</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="数组项求和"><a href="#数组项求和" class="headerlink" title="数组项求和"></a>数组项求和</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> total = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, cur</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>, prev, cur)</div><div class="line">    <span class="keyword">return</span> prev + cur;</div><div class="line">&#125;,<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'total'</span>, total)</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/6346-b29104ae216c6f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> orders = [</div><div class="line">  &#123;num: 10&#125;,</div><div class="line">  &#123;num: 10&#125;,</div><div class="line">  &#123;num: 10&#125;,</div><div class="line">  &#123;num: 10&#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">total</span> = orders.reduce(function(<span class="keyword">sum</span>, <span class="keyword">order</span>)&#123;</div><div class="line">  console.<span class="built_in">log</span>('hi', <span class="keyword">sum</span>, <span class="keyword">order</span>)</div><div class="line">  <span class="keyword">return</span> <span class="keyword">sum</span> + <span class="keyword">order</span>.num</div><div class="line">&#125;, 0)</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>('<span class="keyword">total</span>', <span class="keyword">total</span>)</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/6346-a9c208312522c8c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="求数组项最大值"><a href="#求数组项最大值" class="headerlink" title="求数组项最大值"></a>求数组项最大值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">22</span>, <span class="number">13</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> max = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, cur</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'last max'</span>, prev)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(prev,cur);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'max'</span>, max)</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/6346-e3ae155de8d95288.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>];</div><div class="line"></div><div class="line">var newArr = arr.reduce(function (prev, cur) &#123;</div><div class="line">    prev.indexOf(cur) === <span class="number">-1</span> &amp;&amp; prev.push(cur);</div><div class="line">    return prev;</div><div class="line">&#125;,[]);</div></pre></td></tr></table></figure>
<p>① 初始化一个空数组<br>② 将需要去重处理的数组中的第1项在初始化数组中查找<code>prev.indexOf(cur)</code>，如果找不到（空数组中肯定找不到）<code>=== -1</code>，就将该项添加到初始化数组中<code>prev.push(cur)</code><br>③ 将需要去重处理的数组中的第2项在初始化数组中查找，如果找不到，就将该项继续添加到初始化数组中<br>④ ……<br>⑤ 将需要去重处理的数组中的第n项在初始化数组中查找，如果找不到，就将该项继续添加到初始化数组中<br>⑥ 将这个初始化数组返回</p>
<p>参考: <a href="https://www.jianshu.com/p/541b84c9df90" target="_blank" rel="external">https://www.jianshu.com/p/541b84c9df90</a></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://laker.me/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs 获取 input 的值的三种方法</title>
    <link href="http://laker.me/blog/2020/03/07/20_0307_vuejs_input/"/>
    <id>http://laker.me/blog/2020/03/07/20_0307_vuejs_input/</id>
    <published>2020-03-07T00:24:00.000Z</published>
    <updated>2020-03-13T13:07:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>ref</code>或<code>v-model</code>或<code>function(e)</code></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"text"</span> value=<span class="string">"调试 vuejs 2.0"</span> ref=<span class="string">"input1"</span>&gt;</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">button</span>   <span class="attr">v-on:click</span>=<span class="string">"test1"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line"></div><div class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"input2"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>  <span class="attr">v-on:click</span>=<span class="string">"test2"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// @input 实时监听输入事件</span></div><div class="line">&lt;input type=<span class="string">"text"</span> @input=<span class="string">"test3"</span> /&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">    <span class="attr">test1</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.$refs.input1.value );</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">test2</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.input2 );</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    test3(e)&#123;</div><div class="line">      <span class="comment">//e.target 指向了dom元素</span></div><div class="line">      <span class="built_in">console</span>.log( e.target.value );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;ref&lt;/code&gt;或&lt;code&gt;v-model&lt;/code&gt;或&lt;code&gt;function(e)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js Uniapp 页面跳转、提示框的使用</title>
    <link href="http://laker.me/blog/2020/03/05/20_0305_uniapp_navigator_toast/"/>
    <id>http://laker.me/blog/2020/03/05/20_0305_uniapp_navigator_toast/</id>
    <published>2020-03-05T00:24:00.000Z</published>
    <updated>2020-03-13T13:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前认为uniapp是基于vuejs的，跳转得用vue router。但是目前只开放小程序，就想着用小程序的<code>&lt;navigator&gt;</code>标签和wx.navigateTo（uniapp编译会报错，但是小程序能运行），才发现uniapp有集成这些方法。而且在组件里看到了popup组件，就自己写的toast和showModal，才发现在<a href="https://uniapp.dcloud.io/api/ui/prompt" target="_blank" rel="external">交互反馈</a> 里有弹框（因为之前搜索页面都是搜弹框，所以一直没找到）</p>
<a id="more"></a>
<h2 id="uni-navigateTo-OBJECT"><a href="#uni-navigateTo-OBJECT" class="headerlink" title="uni.navigateTo(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/router?id=navigateto" target="_blank" rel="external">uni.navigateTo(OBJECT)</a></h2><p>保留当前页面，跳转到应用内的某个页面，使用uni.navigateBack可以返回到原页面。</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">//</span>在起始页面跳转到test.vue页面并传递参数</div><div class="line">uni.navigateTo<span class="params">(&#123;</span></div><div class="line">    url: 'test?<span class="attr">id</span>=1&amp;<span class="attr">name</span>=uniapp'</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过option获取url的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在test.vue页面接受参数</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">option</span>) </span>&#123; <span class="comment">//option为object类型，会序列化上个页面传递的参数</span></div><div class="line">        <span class="built_in">console</span>.log(option.id); <span class="comment">//打印出上个页面传递的参数。</span></div><div class="line">        <span class="built_in">console</span>.log(option.name); <span class="comment">//打印出上个页面传递的参数。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>标签</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;navigator <span class="symbol">:url=<span class="string">"'/pages/test/test?item='+ id"</span>&gt;&lt;/navigator&gt;</span></div></pre></td></tr></table></figure>
<h2 id="uni-redirectTo-OBJECT"><a href="#uni-redirectTo-OBJECT" class="headerlink" title="uni.redirectTo(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/router?id=redirectto" target="_blank" rel="external">uni.redirectTo(OBJECT)</a></h2><p>关闭当前页面，跳转到应用内的某个页面。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">uni</span><span class="selector-class">.redirectTo</span>(&#123;</div><div class="line">    <span class="attribute">url</span>: <span class="string">'test?id=1'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="uni-reLaunch-OBJECT"><a href="#uni-reLaunch-OBJECT" class="headerlink" title="uni.reLaunch(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/router?id=relaunch" target="_blank" rel="external">uni.reLaunch(OBJECT)</a></h2><p>关闭所有页面，打开到应用内的某个页面。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">uni</span><span class="selector-class">.reLaunch</span>(&#123;</div><div class="line">    <span class="attribute">url</span>: <span class="string">'test?id=1'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过option获取url的参数<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> &#123;</div><div class="line">    <span class="attribute">onLoad</span>: function (option) &#123;</div><div class="line">        console.<span class="built_in">log</span>(option.id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="uni-switchTab-OBJECT"><a href="#uni-switchTab-OBJECT" class="headerlink" title="uni.switchTab(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/router?id=switchtab" target="_blank" rel="external">uni.switchTab(OBJECT)</a></h2><p>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">uni</span><span class="selector-class">.switchTab</span>(&#123;</div><div class="line">    <span class="attribute">url</span>: <span class="string">'/pages/index/index'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="uni-showToast-OBJECT"><a href="#uni-showToast-OBJECT" class="headerlink" title="uni.showToast(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/ui/prompt?id=showtoast" target="_blank" rel="external">uni.showToast(OBJECT)</a></h2><p>显示消息提示框。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">uni</span><span class="selector-class">.showToast</span>(&#123;</div><div class="line">    <span class="attribute">title</span>: <span class="string">'标题'</span>,</div><div class="line">    duration: <span class="number">2000</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="uni-hideToast"><a href="#uni-hideToast" class="headerlink" title="uni.hideToast()"></a><a href="https://uniapp.dcloud.io/api/ui/prompt?id=hidetoast" target="_blank" rel="external">uni.hideToast()</a></h3><p>隐藏消息提示框。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uni.hideToast()<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="uni-showLoading-OBJECT"><a href="#uni-showLoading-OBJECT" class="headerlink" title="uni.showLoading(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/ui/prompt?id=showloading" target="_blank" rel="external">uni.showLoading(OBJECT)</a></h2><p>显示 loading 提示框, 需主动调用 <a href="https://uniapp.dcloud.io/api/ui/prompt?id=hideloading" target="_blank" rel="external">uni.hideLoading</a> 才能关闭提示框。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">uni</span><span class="selector-class">.showLoading</span>(&#123;</div><div class="line">    <span class="attribute">title</span>: <span class="string">'加载中'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="uni-showModal-OBJECT"><a href="#uni-showModal-OBJECT" class="headerlink" title="uni.showModal(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/ui/prompt?id=showmodal" target="_blank" rel="external">uni.showModal(OBJECT)</a></h2><p>显示模态弹窗，类似于标准 html 的消息框：alert、confirm。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">uni.showModal(&#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">'提示'</span>,</div><div class="line">    <span class="attr">content</span>: <span class="string">'这是一个模态弹窗'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (res.confirm) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'用户点击确定'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'用户点击取消'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前认为uniapp是基于vuejs的，跳转得用vue router。但是目前只开放小程序，就想着用小程序的&lt;code&gt;&amp;lt;navigator&amp;gt;&lt;/code&gt;标签和wx.navigateTo（uniapp编译会报错，但是小程序能运行），才发现uniapp有集成这些方法。而且在组件里看到了popup组件，就自己写的toast和showModal，才发现在&lt;a href=&quot;https://uniapp.dcloud.io/api/ui/prompt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;交互反馈&lt;/a&gt; 里有弹框（因为之前搜索页面都是搜弹框，所以一直没找到）&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs uniapp Popup弹框使用教程</title>
    <link href="http://laker.me/blog/2020/03/03/20_0303_vuejs/"/>
    <id>http://laker.me/blog/2020/03/03/20_0303_vuejs/</id>
    <published>2020-03-03T00:24:00.000Z</published>
    <updated>2020-03-13T13:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/" target="_blank" rel="external">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台</p>
<a id="more"></a>
<p>uni-ui是DCloud提供的一个跨端ui库，它是基于vue组件的、flex布局的、无dom的跨全端ui框架。uni-ui不包括基础组件，它是基础组件的补充。</p>
<p>我在使用uni-ui的组件时，碰到了文档bug的坑，折腾了好久。以popup为例，记录来一下。</p>
<p><a href="https://uniapp.dcloud.io/component/README?id=uniui" target="_blank" rel="external">uniapp</a>的官网会把组件地址指向这里<a href="https://ext.dcloud.net.cn/plugin?id=329" target="_blank" rel="external">https://ext.dcloud.net.cn/plugin?id=329</a>。 但这个文档有问题。</p>
<p>以github为准：<a href="https://github.com/dcloudio/uni-ui" target="_blank" rel="external">https://github.com/dcloudio/uni-ui</a>。但github也会跳转回那个网站，死循环。我记录一下正确过程。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> @<span class="keyword">dcloudio</span>/<span class="keyword">uni</span>-<span class="keyword">ui</span>  --save</div></pre></td></tr></table></figure>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>文档写的<code>import uniPopup from &quot;@/components/uni-popup/uni-popup.vue&quot;</code> 是错的</p>
<p>看github有个引用的列表</p>
<p><img src="https://upload-images.jianshu.io/upload_images/6346-c6c6573d1b6730e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>在这里找到相应的路径</p>
<pre><code>import uniPopup from &apos;@dcloudio/uni-ui/lib/uni-popup/uni-popup&apos;
</code></pre><p>简便写法，但是会引入更多东西：</p>
<pre><code>import {uniPopup} from &apos;@dcloudio/uni-ui&apos;
</code></pre><p>可以配置<a href="https://en.wikipedia.org/wiki/Tree_shaking" target="_blank" rel="external">Tree shaking</a>，在打包的时候消除无用代码(dead code)的方式<br> <a href="https://www.cnblogs.com/fundebug/archive/2018/08/15/reduce_js_payload_with_tree_shaking.html" target="_blank" rel="external">配置Tree Shaking来减少JavaScript的打包体积</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>通过ref来调用弹框显示、隐藏 <code>this.$refs.popupHi.open()</code></p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">button</span> @click=<span class="string">"openHi"</span>&gt;打开弹窗&lt;/button&gt;</div><div class="line">&lt;uni-popup ref=<span class="string">"popupHi"</span> type=<span class="string">"bottom"</span>&gt;底部弹出 Popup&lt;/uni-popup&gt;</div><div class="line"></div><div class="line">   methods:&#123;</div><div class="line">      openHi()&#123;</div><div class="line">         this.<span class="variable">$refs</span><span class="selector-class">.popupHi</span><span class="selector-class">.open</span>()</div><div class="line">      &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>文档上显示的效果是弹框有白色背景，实际是没有的默认的，要自己写。</p>
<p>这个是一个居中弹框，居中显示是<code>type=&quot;center&quot;</code>，再在<uni-popup>里填充了icon和文字，在写下popup-box的样式：</uni-popup></p>
<p><img src="https://upload-images.jianshu.io/upload_images/6346-444a6802dade1e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  &lt;uni-popup class=<span class="string">"finish-popup"</span> ref=<span class="string">"finish"</span> type=<span class="string">"center"</span>&gt;</div><div class="line">    &lt;<span class="built_in">view</span> class=<span class="string">"popup-box"</span>&gt;</div><div class="line">      &lt;uni-icons type=<span class="string">"checkmarkempty"</span> size=<span class="string">"60"</span>&gt;&lt;/uni-icons&gt;</div><div class="line">      &lt;<span class="built_in">view</span> class=<span class="string">"txt"</span>&gt;恭喜完成阅读&lt;/<span class="built_in">view</span>&gt;</div><div class="line">    &lt;/<span class="built_in">view</span>&gt;</div><div class="line">  &lt;/uni-popup&gt;</div><div class="line"></div><div class="line">.popup-<span class="built_in">box</span> &#123;</div><div class="line">  text-align: <span class="built_in">center</span>;</div><div class="line">  <span class="built_in">background</span>-<span class="built_in">color</span>: #fff;</div><div class="line">  padding: 30rpx;</div><div class="line">  <span class="built_in">border</span>-<span class="built_in">radius</span>: 10rpx;</div><div class="line">  <span class="built_in">font</span>-size: 28rpx;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认是点击随意一处后关闭弹框。可以用定时器来自动关闭：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">openHi</span><span class="params">()</span></span>&#123;</div><div class="line">     setTimeout(() =&gt; &#123;</div><div class="line">       this.<span class="variable">$refs</span><span class="selector-class">.finish</span><span class="selector-class">.close</span>()</div><div class="line">     &#125;, <span class="number">2000</span>)</div><div class="line">     this.<span class="variable">$refs</span><span class="selector-class">.popupHi</span><span class="selector-class">.open</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;uni-app&lt;/code&gt; 是一个使用 &lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue.js&lt;/a&gt; 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Flex 布局下 CSS 文本超出单行宽度后显示省略号</title>
    <link href="http://laker.me/blog/2020/03/01/20_0301_flex/"/>
    <id>http://laker.me/blog/2020/03/01/20_0301_flex/</id>
    <published>2020-03-01T00:24:00.000Z</published>
    <updated>2020-03-13T11:47:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>两栏布局，左边定宽，右边 flex-grow: 1，自动填满剩余空间。</p>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/6346-922dacb8d2757228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
 <figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"book-box"</span>&gt;</div><div class="line">  &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"book-img"</span>&gt;</div><div class="line">    &lt;image :src=<span class="string">"book.image"</span>  /&gt;</div><div class="line">  &lt;/<span class="keyword">view</span>&gt;</div><div class="line">  &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"book-info"</span>&gt;</div><div class="line">    &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"name"</span>&gt;&#123;&#123;book.name&#125;&#125;&lt;/<span class="keyword">view</span>&gt;</div><div class="line">    &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"author"</span>&gt;&#123;&#123;book.author&#125;&#125;&lt;/<span class="keyword">view</span>&gt;</div><div class="line">    &lt;/<span class="keyword">view</span>&gt;</div><div class="line">  &lt;/<span class="keyword">view</span>&gt;</div><div class="line">&lt;/<span class="keyword">view</span>&gt;</div></pre></td></tr></table></figure>
<p>给 <code>book-info</code> 设置<code>width： 0</code><br>如果不设置宽度， <code>.book-info</code>  可以被子节点无限撑开；因此 <code>.name</code> 总有足够的宽度在一行内显示所有文本，也就不能触发截断省略的效果。</p>
<p>SCSS<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.book-box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line"></div><div class="line">  <span class="selector-class">.book-img</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">160</span>rpx;</div><div class="line">    <span class="attribute">height</span>: <span class="number">220</span>rpx;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">40</span>rpx;</div><div class="line"></div><div class="line">    image &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">160</span>rpx;</div><div class="line">      <span class="attribute">height</span>: <span class="number">220</span>rpx;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.book-info</span> &#123;</div><div class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">    view &#123;</div><div class="line">      <span class="attribute">margin-bottom</span>: <span class="number">8</span>rpx;</div><div class="line">      <span class="attribute">white-space</span>: nowrap; <span class="comment">/* 规定文本是否折行 */</span></div><div class="line">      <span class="attribute">overflow</span>: hidden; <span class="comment">/* 规定超出内容宽度的元素隐藏 */</span></div><div class="line">      <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考 <a href="https://www.cnblogs.com/BlackStorm/p/6793170.html" target="_blank" rel="external">https://www.cnblogs.com/BlackStorm/p/6793170.html</a></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h2&gt;&lt;p&gt;两栏布局，左边定宽，右边 flex-grow: 1，自动填满剩余空间。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://laker.me/blog/categories/CSS/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="CSS" scheme="http://laker.me/blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>用CSS Flex 布局绘制柱状图 Bar chart</title>
    <link href="http://laker.me/blog/2020/02/29/20_0229_flex_bar/"/>
    <id>http://laker.me/blog/2020/02/29/20_0229_flex_bar/</id>
    <published>2020-02-29T00:24:00.000Z</published>
    <updated>2020-03-13T11:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于的框架：微信小程序、uniapp（Vue.js）、SCSS。<br>原理是一样的，我就不转换成原生的Vue.js和css了。</p>
<a id="more"></a>
<p>关于flex布局，可以看我这篇 <a href="http://laker.me/blog/2020/02/18/20_0218_flex/">图解Flex布局</a></p>
<h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/20022901.png" alt=""></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/20022902.jpeg" alt=""></p>
<h2 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h2><p><code>v-for=&quot;i in 5&quot;</code> 循环显示5个bar</p>
<p><code>:style=&quot;{ &#39;height&#39;: readingHoursHeight[i] + &#39;px&#39;</code> 根据readingHoursHeight的数据动态设置bar的高度</p>
<p><code>{{ readingHours[i] }}</code> 显示数字标签</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">    <span class="comment">&lt;!-- 循环显示5个bar --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">"i in 5"</span> <span class="attr">:key</span>=<span class="string">"i"</span> <span class="attr">class</span>=<span class="string">"bar-item-box"</span>&gt;</span></div><div class="line">    <span class="template-variable">&#123;&#123; readingHours[i] &#125;</span><span class="xml">&#125;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"bar-item"</span> <span class="attr">:style</span>=<span class="string">"</span></span><span class="template-variable">&#123; 'height': readingHoursHeight[i] + 'px' &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="JS："><a href="#JS：" class="headerlink" title="JS："></a>JS：</h2><p>模拟数据</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">data</span> () &#123;</div><div class="line">  <span class="selector-tag">return</span> &#123;</div><div class="line">    <span class="attribute">bookId</span>: <span class="string">''</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 模拟每日读书时长</span></div><div class="line">    <span class="attribute">readingHours</span>: [<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">49</span>],</div><div class="line"></div><div class="line">    <span class="comment">// 计算时长的高度</span></div><div class="line">    <span class="attribute">readingHoursHeight</span>: []</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>计算每个时长对应的bar高度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 计算bar的高度</span></div><div class="line">computeBarHeight: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 先备份this，待会在uni的方法里会被覆盖</span></div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="comment">// box的高度</span></div><div class="line">  <span class="keyword">var</span> boxHeight = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="comment">// 获取最长的时长，作为最大的高度</span></div><div class="line">  <span class="keyword">var</span> max = <span class="keyword">this</span>.maxHours(<span class="keyword">this</span>.readingHours)</div><div class="line"></div><div class="line">  <span class="comment">// uniapp的方法，可以改为vuejs的方法</span></div><div class="line">  uni.getSystemInfo(&#123;</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">// res - 各种参数</span></div><div class="line">      <span class="keyword">let</span> info = uni.createSelectorQuery().select(<span class="string">'.bar-chart-box'</span>)</div><div class="line"></div><div class="line">      info.boundingClientRect(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// data - 各种参数</span></div><div class="line">        <span class="comment">// 获取box元素高度</span></div><div class="line">        boxHeight = data.height - <span class="number">20</span></div><div class="line"></div><div class="line">        <span class="comment">// 计算每个时长占最大高度的比例来设置高度</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.readingHours.length; i++) &#123;</div><div class="line">          <span class="keyword">let</span> h = _this.readingHours[i] / _this.readingHours[max] * boxHeight</div><div class="line"></div><div class="line">          <span class="comment">// 把计算好的高度push到readingHoursHeight数组里</span></div><div class="line">          _this.readingHoursHeight.push(h)</div><div class="line">        &#125;</div><div class="line">      &#125;).exec()</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 获取最大时长</span></div><div class="line">maxHours: <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> max = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[max]) &#123;</div><div class="line">      max = i</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> max</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SCSS："><a href="#SCSS：" class="headerlink" title="SCSS："></a>SCSS：</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bars</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">justify-content</span>: space-around;</div><div class="line">  <span class="attribute">align-items</span>: flex-end;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">#efefef</span> <span class="number">2</span>rpx solid;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20</span>rpx;</div><div class="line"></div><div class="line">  <span class="selector-class">.bar-item-box</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">0.1</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#9b9b9b</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文基于的框架：微信小程序、uniapp（Vue.js）、SCSS。&lt;br&gt;原理是一样的，我就不转换成原生的Vue.js和css了。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>uniapp 构建小程序报错 initAutoImportComponents is not a function</title>
    <link href="http://laker.me/blog/2020/02/24/20_0222_uniapp_error/"/>
    <id>http://laker.me/blog/2020/02/24/20_0222_uniapp_error/</id>
    <published>2020-02-24T00:24:00.000Z</published>
    <updated>2020-03-11T03:20:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用uniapp开发小程序的时候，经常会遇到 initAutoImportComponents is not a function，这个问题很奇怪，团队里不是每个人都会遇到。看网上蛮多开发者遇到了，但是还没有很好的解决方案。</p>
<a id="more"></a>
<p>记录一下我尝试过的方案：</p>
<ul>
<li>删除node_module重新npm i，按照提示执行了 npm audit fix</li>
</ul>
<p>删了很多次，重装未果。害怕是墙的问题，还开了全局也不行。</p>
<ul>
<li>按照网友的建议在所有版本号2.0.0后面加了 -alpha</li>
</ul>
<p><a href="https://ask.dcloud.net.cn/question/87346" target="_blank" rel="external">网友讨论</a><br><a href="https://copyfuture.com/blogs-details/20200303164053977ra97r2nlsa52e4h" target="_blank" rel="external">另一个方案</a><br>都未成功</p>
<ul>
<li>换了个目录重新安装</li>
</ul>
<p>可以运行、编译，但是到了第二天又编译不成功。</p>
<ul>
<li>又换了个目录，重新安装</li>
</ul>
<p>安装的时候发现pakage.json在audit后的版本号里加了个alpha，考虑是不是audit出的问题。然后就不audit，虽然有很多warn，但是总算能执行了</p>
<p>initAutoImportComponents 这个关键词只在uniapp的论坛里出现，应该就是uniapp本身的问题，还不太稳定。而且有时候安装步骤是一样的，但是就不成功，得多删除几次node_module来npm重装。</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用uniapp开发小程序的时候，经常会遇到 initAutoImportComponents is not a function，这个问题很奇怪，团队里不是每个人都会遇到。看网上蛮多开发者遇到了，但是还没有很好的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>图解 Vuejs 父子组件通信</title>
    <link href="http://laker.me/blog/2020/02/22/20_0224_vue_component/"/>
    <id>http://laker.me/blog/2020/02/22/20_0224_vue_component/</id>
    <published>2020-02-22T00:24:00.000Z</published>
    <updated>2020-03-11T03:11:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过实例图解Vuejs父子组件通信过程</p>
<a id="more"></a>
<p>背景：父组件index.vue 调用 子组件 /components/popup-confirm.vue</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/20022401.jpg" alt=""></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过实例图解Vuejs父子组件通信过程&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>图解 Flex layout</title>
    <link href="http://laker.me/blog/2020/02/18/20_0218_flex/"/>
    <id>http://laker.me/blog/2020/02/18/20_0218_flex/</id>
    <published>2020-02-18T00:24:00.000Z</published>
    <updated>2020-03-12T08:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://flexboxfroggy.com/" target="_blank" rel="external">一个练习flex的小游戏</a></p>
<h2 id="父级元素属性"><a href="#父级元素属性" class="headerlink" title="父级元素属性"></a>父级元素属性</h2><ul>
<li>flex-direction 属性决定主轴的方向（即项目的排列方向）</li>
<li>flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</li>
<li>flex-flow 属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li>
<li>justify-content属性定义了项目在主轴上的对齐方式。</li>
<li>align-items属性定义项目在交叉轴上如何对齐。</li>
<li>align-content定义了多根轴线的对齐方式</li>
</ul>
<a id="more"></a>
<h2 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h2><ul>
<li>order 定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li>
<li>flex-grow定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li>
<li>flex-shrink定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li>
<li>flex-basis定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</li>
<li>flex是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</li>
<li>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2020/20021801.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2020/20021802.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2020/20021803.jpg" alt=""></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://flexboxfroggy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个练习flex的小游戏&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;父级元素属性&quot;&gt;&lt;a href=&quot;#父级元素属性&quot; class=&quot;headerlink&quot; title=&quot;父级元素属性&quot;&gt;&lt;/a&gt;父级元素属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;flex-direction 属性决定主轴的方向（即项目的排列方向）&lt;/li&gt;
&lt;li&gt;flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。&lt;/li&gt;
&lt;li&gt;flex-flow 属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。&lt;/li&gt;
&lt;li&gt;justify-content属性定义了项目在主轴上的对齐方式。&lt;/li&gt;
&lt;li&gt;align-items属性定义项目在交叉轴上如何对齐。&lt;/li&gt;
&lt;li&gt;align-content定义了多根轴线的对齐方式&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS3" scheme="http://laker.me/blog/categories/CSS3/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 349 Intersection of Two Arrays</title>
    <link href="http://laker.me/blog/2020/02/15/20_0215_leetcode349/"/>
    <id>http://laker.me/blog/2020/02/15/20_0215_leetcode349/</id>
    <published>2020-02-15T00:24:00.000Z</published>
    <updated>2020-03-09T12:28:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://leetcode.com/problems/intersection-of-two-arrays/" target="_blank" rel="external">https://leetcode.com/problems/intersection-of-two-arrays/</a></p>
<p>Given two arrays, write a function to compute their intersection.</p>
<a id="more"></a>
<p>Example 1:</p>
<pre><code>Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
</code></pre><p>Example 2:</p>
<pre><code>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
</code></pre><p>Note:</p>
<ul>
<li>Each element in the result must be unique.</li>
<li>The result can be in any order.</li>
</ul>
<h2 id="Solution-1-Hash-Dictionary"><a href="#Solution-1-Hash-Dictionary" class="headerlink" title="Solution 1: Hash(Dictionary)"></a>Solution 1: Hash(Dictionary)</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">self</span>, nums1, nums2)</span></span>:</div><div class="line">        dict1 = &#123;&#125;</div><div class="line">        dict2 = &#123;&#125;</div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="symbol">nums1:</span></div><div class="line">            dict1[i] = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="symbol">nums2:</span></div><div class="line">            dict2[i] = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</div><div class="line"></div><div class="line">            <span class="comment"># has_key has been deprecated in Python 3.0</span></div><div class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> <span class="symbol">dict2:</span></div><div class="line">                result.append(key)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Time: O(n)</li>
<li>Space: O(n+m)</li>
</ul>
<h2 id="Solution-2-Set"><a href="#Solution-2-Set" class="headerlink" title="Solution 2: Set"></a>Solution 2: Set</h2><p>A little tricky in python, we can use <code>set</code>, but the idea is the same as hash table.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Solution:</div><div class="line">    def singleNumber2(self, nums1, nums2):</div><div class="line">        <span class="built_in">set</span>1 = <span class="built_in">set</span>(nums1)</div><div class="line">        <span class="built_in">set</span>2 = <span class="built_in">set</span>(nums2)</div><div class="line">        <span class="built_in">return</span> list(<span class="built_in">set</span>2 &amp; <span class="built_in">set</span>1)</div></pre></td></tr></table></figure>
<ul>
<li>Time complexity : O(n+m) in the average case and O(n×m) in the worst case when load factor is high enough.</li>
<li>Space complexity : O(n+m) in the worst case when all elements in the arrays are different.</li>
</ul>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/intersection-of-two-arrays/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/intersection-of-two-arrays/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="Python" scheme="http://laker.me/blog/tags/Python/"/>
    
      <category term="LeetCode" scheme="http://laker.me/blog/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs style 计算属性 样式绑定 动态属性</title>
    <link href="http://laker.me/blog/2020/02/12/20_0212_vuejs_style/"/>
    <id>http://laker.me/blog/2020/02/12/20_0212_vuejs_style/</id>
    <published>2020-02-12T00:24:00.000Z</published>
    <updated>2020-03-11T07:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>动态设置进度条宽度</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/20021201.png" alt="进度条"></p>
<p>文档<br> <a href="https://cn.vuejs.org/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F" target="_blank" rel="external"><a href="https://cn.vuejs.org/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/class-and-style.html#绑定内联样式</a>
</a><br><a href="https://cn.vuejs.org/v2/guide/computed.html" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/computed.html</a></p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>绑定样式<code>:style</code></p>
<p>read_page、total_page是两个参数<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;view class=<span class="string">"filled"</span> <span class="symbol">:style=<span class="string">"&#123; width: read_page / total_page * 100 + '%'&#125;"</span>&gt;&lt;/view&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>注意</p>
<ul>
<li>:style= 的方法countWidth后不能加()</li>
<li>使用 computed ，不是methods</li>
<li>return ‘width: 20%; height: 30px’，不是return {width: 20%; height: 30px  }</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"filled"</span> :style=<span class="string">"countWidth"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div><div class="line"></div><div class="line">  computed: &#123;</div><div class="line">    <span class="attr">countWidth</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'width: 20%; height: 30px'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：计算表达式不能用 80%（会报错），要用0.8<br>错：300 <em> 80%<br>对： 300 </em> 0.8</p>
</blockquote>
<p>参考<br><a href="https://juejin.im/post/5d5b87bc6fb9a06b1417e651" target="_blank" rel="external">https://juejin.im/post/5d5b87bc6fb9a06b1417e651</a><br><a href="https://blog.csdn.net/freedomVenly/article/details/80752215" target="_blank" rel="external">https://blog.csdn.net/freedomVenly/article/details/80752215</a><br><a href="https://segmentfault.com/q/1010000008835283" target="_blank" rel="external">https://segmentfault.com/q/1010000008835283</a></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;动态设置进度条宽度&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>简单理解 Restful API</title>
    <link href="http://laker.me/blog/2020/02/02/20_0202_restful/"/>
    <id>http://laker.me/blog/2020/02/02/20_0202_restful/</id>
    <published>2020-02-02T00:24:00.000Z</published>
    <updated>2020-03-08T08:29:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要包含内容"><a href="#主要包含内容" class="headerlink" title="主要包含内容"></a>主要包含内容</h2><a id="more"></a>
<ul>
<li>协议，一般使用HTTPS</li>
<li>域名，<code>https://api.example.com</code></li>
<li>版本（Versioning），<code>https://api.example.com/v1/</code></li>
<li>终点（Endpoint），表示API的具体网址。<code>https://api.example.com/v1/zoos</code></li>
<li>HTTP动词</li>
<li>过滤信息（Filtering）</li>
<li>状态码（Status Codes）</li>
<li>错误处理（Error handling）</li>
<li>返回结果，应该尽量使用JSON</li>
<li>Hypermedia API</li>
</ul>
<h2 id="1-基本要求：面向资源，使用HTTP动词"><a href="#1-基本要求：面向资源，使用HTTP动词" class="headerlink" title="1. 基本要求：面向资源，使用HTTP动词"></a>1. 基本要求：面向资源，使用HTTP动词</h2><p>HTTP动词有下面五个（括号里是对应的SQL命令）</p>
<ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
</ul>
<p>还有两个不常用的HTTP动词。</p>
<ul>
<li>HEAD：获取资源的元数据。</li>
<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET <span class="string">/zoos</span>：列出所有动物园</div><div class="line">POST <span class="string">/zoos</span>：新建一个动物园</div><div class="line">GET <span class="string">/zoos/ID</span>：获取某个指定动物园的信息</div><div class="line">PUT <span class="string">/zoos/ID</span>：更新某个指定动物园的信息（提供该动物园的全部信息）</div><div class="line">PATCH <span class="string">/zoos/ID</span>：更新某个指定动物园的信息（提供该动物园的部分信息）</div><div class="line">DELETE <span class="string">/zoos/ID</span>：删除某个动物园</div><div class="line">GET <span class="string">/zoos/ID/animals</span>：列出某个指定动物园的所有动物</div><div class="line">DELETE <span class="string">/zoos/ID/animals/ID</span>：删除某个指定动物园的指定动物</div></pre></td></tr></table></figure>
<h3 id="过滤信息"><a href="#过滤信息" class="headerlink" title="过滤信息"></a>过滤信息</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">?limit=<span class="number">10</span>：指定返回记录的数量</div><div class="line">?offset=<span class="number">10</span>：指定返回记录的开始位置。</div><div class="line">?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数。</div><div class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</div><div class="line">?animal_type_id=<span class="number">1</span>：指定筛选条件</div></pre></td></tr></table></figure>
<h2 id="2-进阶：Hypermedia-API"><a href="#2-进阶：Hypermedia-API" class="headerlink" title="2.进阶：Hypermedia API"></a>2.进阶：Hypermedia API</h2><p>即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>
<p>例子<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PUST <span class="string">/zoos</span></div></pre></td></tr></table></figure></p>
<p>普通返回<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"zoos"</span>: <span class="string">"abc"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Hypermedia API 返回查找信息的接口：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"zoos"</span>: <span class="string">"abc"</span>,</div><div class="line">  <span class="string">"link"</span>: &#123;</div><div class="line">    <span class="string">"rel"</span>: <span class="string">"infomation"</span>, //rel是relationship的意思</div><div class="line">    <span class="string">"url"</span>: <span class="string">"/zoos/info"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即返回结果中提供链接，连向其他API方法</p>
<p>参考<br><a href="https://zhuanlan.zhihu.com/p/30396391" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/30396391</a><br><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主要包含内容&quot;&gt;&lt;a href=&quot;#主要包含内容&quot; class=&quot;headerlink&quot; title=&quot;主要包含内容&quot;&gt;&lt;/a&gt;主要包含内容&lt;/h2&gt;
    
    </summary>
    
      <category term="Server" scheme="http://laker.me/blog/categories/Server/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="Server" scheme="http://laker.me/blog/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式总结</title>
    <link href="http://laker.me/blog/2020/01/24/20_0124_reg/"/>
    <id>http://laker.me/blog/2020/01/24/20_0124_reg/</id>
    <published>2020-01-24T00:24:00.000Z</published>
    <updated>2020-03-04T03:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p>
<a id="more"></a>
<h2 id="字符含义"><a href="#字符含义" class="headerlink" title="字符含义"></a>字符含义</h2><h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
</tbody>
</table>
<p>#字符类</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>[…]</td>
<td>在括号内的任意字符。要匹配 [，使用 <code>\[</code></td>
</tr>
<tr>
<td>[^…]</td>
<td>不在括号内的任意字符</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，使用 <code>\.</code></td>
</tr>
<tr>
<td>\d</td>
<td>任意一个数字，0~9 中的任意一个，[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字，[^0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>任意一个字母、数字、下划线 ，[a-zA-Z0-9_]</td>
</tr>
<tr>
<td>\W</td>
<td>非字母、数字、下划线 ，[^a-zA-Z0-9_]</td>
</tr>
</tbody>
</table>
<h3 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a>重复字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do”   。等价于 {0,1}</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。等价于 {1,}</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。等价于{0,}</td>
</tr>
</tbody>
</table>
<h3 id="选择、分组、引用"><a href="#选择、分组、引用" class="headerlink" title="选择、分组、引用"></a>选择、分组、引用</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>竖线（因转义问题无法显示）</td>
<td>指明两项之间的一个选择。</td>
</tr>
<tr>
<td>(…)</td>
<td>组合。将几个项目组合为一个单元，并记忆这个组合匹配的字符以供引用</td>
</tr>
<tr>
<td>(?…)</td>
<td>只组合。将几个项目组合为一个单元，但不记忆这个组合匹配的字符</td>
</tr>
<tr>
<td>\数字</td>
<td>和第几个分组第一次匹配的字符相匹配</td>
</tr>
</tbody>
</table>
<h3 id="锚点字符"><a href="#锚点字符" class="headerlink" title="锚点字符"></a>锚点字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>在方括号外匹配输入字符串的开始位置 ^[…]，在方括号内表示不接受该方括号表达式中的字符集合[^…]。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结尾位置。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界，即位于\w和\W之间，或\w与字符串开头或结尾处。<code>注意[\b]是匹配退格符backspace</code></td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界，即左右两边都是 “\w” 范围或者左右两边都不是 “\w” 范围时的字符缝隙</td>
</tr>
<tr>
<td>(?=p)</td>
<td>正前向声明，要求接下来的字符都与模式p匹配，但是不包括匹配的那些字符</td>
</tr>
<tr>
<td>(?!p)</td>
<td>反前向声明，要求接下来的字符不与模式p匹配</td>
</tr>
</tbody>
</table>
<h3 id="锚点字符-1"><a href="#锚点字符-1" class="headerlink" title="锚点字符"></a>锚点字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>不区分大小写</td>
</tr>
<tr>
<td>g</td>
<td>全局匹配，找到所有匹配结果，而不是找到第一个就停止</td>
</tr>
<tr>
<td>m</td>
<td>多行匹配</td>
</tr>
</tbody>
</table>
<h2 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h2><p>在修饰匹配次数的特殊符号后再加上一个 “?” 号，则可以使匹配次数不定的表达式尽可能少的匹配，使可匹配可不匹配的表达式，尽可能的 “不匹配”。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul>
<li>/[0-9]{1,2}/  0~99 的两位数</li>
<li>表达式 “bcd”，在匹配字符串 “abcde” 时，匹配结果是：成功；匹配到的内容是：”bcd”；匹配到的位置是：开始于1，结束于4</li>
<li>表达式 “go{2,8}gle” 在匹配 “Ads by goooooogle” 时，匹配的结果是：成功；匹配到的内容是：”goooooogle”；匹配到的位置是：开始于7，结束于17。</li>
<li>表达式 “(go\s*)+” 在匹配 “Let’s go go go!” 时，匹配结果是：成功；匹配到内容是：”go go go”；匹配到的位置是：开始于6，结束于14。</li>
<li>表达式 “^aaa” 在匹配 “xxx aaa xxx” 时，匹配结果是：失败。因为 “^” 要求与字符串开始的地方匹配，因此，只有当 “aaa” 位于字符串的开头的时候，”^aaa” 才能匹配，点击测试 比如：”aaa xxx xxx”。</li>
<li>表达式 “.\b.” 在匹配 “@@@abc” 时，匹配结果是：成功；匹配到的内容是：”@a”；匹配到的位置是：开始于2，结束于4。</li>
</ul>
<h2 id="JavaScript-方法"><a href="#JavaScript-方法" class="headerlink" title="JavaScript 方法"></a>JavaScript 方法</h2><h3 id="str-search-reg"><a href="#str-search-reg" class="headerlink" title="str.search (reg)"></a>str.search (reg)</h3><p>返回第一个匹配的子串的开始字符的位置，没匹配的就返回-1</p>
<h3 id="str-replace-reg-str2"><a href="#str-replace-reg-str2" class="headerlink" title="str.replace (reg, str2)"></a>str.replace (reg, str2)</h3><p>把匹配reg的子串替换成str2</p>
<h3 id="str-match-reg"><a href="#str-match-reg" class="headerlink" title="str.match (reg)"></a>str.match (reg)</h3><p>返回匹配的结果的数组</p>
<h3 id="str-split-reg"><a href="#str-split-reg" class="headerlink" title="str.split(reg)"></a>str.split(reg)</h3><p>返回按正则要求切分字符串的数组</p>
<h3 id="reg-exec-str"><a href="#reg-exec-str" class="headerlink" title="reg.exec(str)"></a>reg.exec(str)</h3><p>与 str.match (reg) 相似，只不过调用的对象和参数相反</p>
<h2 id="reg-test-str"><a href="#reg-test-str" class="headerlink" title="reg.test (str)"></a>reg.test (str)</h2><p>字符串包含正则匹配则返回true</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://laker.me/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Find the divisors</title>
    <link href="http://laker.me/blog/2020/01/20/20_0120_codewars_find_the_divisors/"/>
    <id>http://laker.me/blog/2020/01/20/20_0120_codewars_find_the_divisors/</id>
    <published>2020-01-20T00:24:00.000Z</published>
    <updated>2020-03-09T12:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/544aed4c4a30184e960010f4/train/javascript" target="_blank" rel="external">https://www.codewars.com/kata/544aed4c4a30184e960010f4/train/javascript</a></p>
<p>Create a function named divisors/Divisors that takes an integer n &gt; 1 and returns an array with all of the integer’s divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string ‘(integer) is prime’</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">divisors<span class="comment">(12)</span>; <span class="comment">// should return [2,3,4,6]</span></div><div class="line">divisors<span class="comment">(25)</span>; <span class="comment">// should return [5]</span></div><div class="line">divisors<span class="comment">(13)</span>; <span class="comment">// should return "13 is prime"</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><h3 id="i-lt-integer-2"><a href="#i-lt-integer-2" class="headerlink" title="i &lt;= integer / 2"></a>i &lt;= integer / 2</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">divisors</span>(<span class="built_in">integer</span>) &#123;</div><div class="line">  <span class="built_in">let</span> arr = []</div><div class="line">  <span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">integer</span> / <span class="number">2</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">integer</span> / i <span class="symbol">%</span> <span class="number">1</span> === <span class="number">0</span>)</div><div class="line">      arr.<span class="built_in">push</span>(i)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">return</span> arr.<span class="built_in">length</span> ? arr : <span class="built_in">integer</span> +<span class="string">" is prime"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="i-lt-Math-sqrt-integer"><a href="#i-lt-Math-sqrt-integer" class="headerlink" title="i &lt; Math.sqrt(integer)"></a>i &lt; Math.sqrt(integer)</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">divisors</span>(<span class="built_in">integer</span>) &#123;</div><div class="line">  <span class="built_in">let</span> arr = []</div><div class="line">  <span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">2</span>; i &lt; Math.<span class="built_in">sqrt</span>(<span class="built_in">integer</span>); i++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">integer</span> / i <span class="symbol">%</span> <span class="number">1</span> === <span class="number">0</span>)</div><div class="line">      arr.<span class="built_in">push</span>(i, <span class="built_in">integer</span> / i)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">return</span> arr.<span class="built_in">length</span> ? arr.<span class="built_in">sort</span>(sortNumber) : <span class="built_in">integer</span> +<span class="string">" is prime"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">function sortNumber(a, b)&#123; // Ascending order</div><div class="line">    <span class="built_in">return</span> a - b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>sort() will change the number into string to sort</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">12</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>,<span class="number">1</span>,<span class="number">110</span>].sort()</div></pre></td></tr></table></figure>
<p>get:</p>
<figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[1, 110, 12, 2, 3, 4, 6, 8]</div><div class="line"></div><div class="line"><span class="attribute">0</span>: 1</div><div class="line"><span class="attribute">1</span>: 110</div><div class="line"><span class="attribute">2</span>: 12</div><div class="line"><span class="attribute">3</span>: 2</div><div class="line"><span class="attribute">4</span>: 3</div><div class="line"><span class="attribute">5</span>: 4</div><div class="line"><span class="attribute">6</span>: 6</div><div class="line"><span class="attribute">7</span>: 8</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/544aed4c4a30184e960010f4/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/544aed4c4a30184e960010f4/train/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a function named divisors/Divisors that takes an integer n &amp;gt; 1 and returns an array with all of the integer’s divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string ‘(integer) is prime’&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Build a pile of Cubes</title>
    <link href="http://laker.me/blog/2020/01/18/20_0118_codewars_build_a_pile_of_cubes/"/>
    <id>http://laker.me/blog/2020/01/18/20_0118_codewars_build_a_pile_of_cubes/</id>
    <published>2020-01-18T00:24:00.000Z</published>
    <updated>2020-03-02T15:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/javascript" target="_blank" rel="external">https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/javascript</a></p>
<p>The parameter of the function findNb (find_nb, find-nb, findNb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">findNb<span class="function"><span class="params">(<span class="number">1071225</span>)</span> --&gt;</span> <span class="number">45</span></div><div class="line">findNb<span class="function"><span class="params">(<span class="number">91716553919377</span>)</span> --&gt;</span> -<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><h3 id="Approach-one"><a href="#Approach-one" class="headerlink" title="Approach one"></a>Approach one</h3><p>To find whether there is a sum equals to m.</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNb</span><span class="params">(m)</span> &#123;</span></div><div class="line">    let <span class="built_in">sum</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> (var i = <span class="number">1</span>; <span class="built_in">sum</span> &lt; m; i++) &#123;</div><div class="line">    	<span class="built_in">sum</span> += i ** <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sum</span> === m ? i - <span class="number">1</span> : <span class="number">-1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Shorten the code, count the sum in for():</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNb</span><span class="params">(m)</span> &#123;</span></div><div class="line">    <span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">1</span>, sum = <span class="number">0</span>; sum &lt; m; sum +=<span class="built_in">i</span> ** <span class="number">3</span>, <span class="built_in">i</span>++);</div><div class="line">    <span class="keyword">return</span> sum == m ? (<span class="built_in">i</span><span class="number">-1</span>) : <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Approach-two"><a href="#Approach-two" class="headerlink" title="Approach two"></a>Approach two</h3><p><code>return m ? -1 : n</code>:</p>
<ul>
<li>m &lt; 0 =&gt; true =&gt; -1</li>
<li>m &gt; 0  =&gt; false =&gt; n</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNb</span><span class="params">(m)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> n = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> (m &gt; <span class="number">0</span>) m -= ++n ** <span class="number">3</span></div><div class="line">  <span class="keyword">return</span> m ? <span class="number">-1</span> : n</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The parameter of the function findNb (find_nb, find-nb, findNb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Find the next perfect square</title>
    <link href="http://laker.me/blog/2020/01/15/20_0115_codewars_Find_the_next_perfect_square/"/>
    <id>http://laker.me/blog/2020/01/15/20_0115_codewars_Find_the_next_perfect_square/</id>
    <published>2020-01-15T00:24:00.000Z</published>
    <updated>2020-03-02T15:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/56269eb78ad2e4ced1000013/javascript" target="_blank" rel="external">https://www.codewars.com/kata/56269eb78ad2e4ced1000013/javascript</a></p>
<p>Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.</p>
<p>If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">indNextSquare(<span class="number">121</span>) --&gt; sqrt(<span class="number">121</span>)=<span class="number">11</span> is <span class="type">integer</span>, (<span class="number">11</span>+<span class="number">1</span>)*(<span class="number">11</span>+<span class="number">1</span>)=<span class="number">144</span> returns <span class="number">144</span></div><div class="line">findNextSquare(<span class="number">625</span>) --&gt; returns <span class="number">676</span></div><div class="line">findNextSquare(<span class="number">114</span>) --&gt; returns <span class="number">-1</span> since <span class="number">114</span> is not a perfect</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h3 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h3><p>The main part is to check whether the Math.sqrt(sq) is integer.</p>
<h3 id="Using-regular-expression"><a href="#Using-regular-expression" class="headerlink" title="Using regular expression:"></a>Using regular expression:</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNextSquare</span>(<span class="params">sq</span>) </span>&#123;</div><div class="line">  <span class="comment">// Return the next square if sq if a perfect square, -1 otherwise</span></div><div class="line">  <span class="keyword">let</span> <span class="built_in">number</span> = <span class="built_in">Math</span>.sqrt(sq)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="regexp">/^[\d]+$/</span>.test(<span class="built_in">number</span>.toString()) ? (<span class="built_in">number</span> + <span class="number">1</span>) ** <span class="number">2</span> : <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="remainder"><a href="#remainder" class="headerlink" title="remainder"></a>remainder</h3><p>Math.sqrt(121)%1 = 0 = false<br>Math.sqrt(122)%1 = 0.045361017187261155 = true</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNextSquare</span>(<span class="params">sq</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(sq)%<span class="number">1</span>? <span class="number">-1</span> : <span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sqrt(sq)+<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Math-round-Math-ceil-Math-floor"><a href="#Math-round-Math-ceil-Math-floor" class="headerlink" title="Math.round, Math.ceil, Math.floor"></a>Math.round, Math.ceil, Math.floor</h3><p>Math.round(1) === 1<br>Math.round(1.1) = 1 != 1.1</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Math.<span class="built_in">round</span>(<span class="built_in">number</span>) === <span class="built_in">number</span>)</div></pre></td></tr></table></figure>
<h3 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger"></a>Number.isInteger</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.isInteger(<span class="built_in">sqrt</span>)</div></pre></td></tr></table></figure>
<h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(<span class="name">parseInt</span>(<span class="name">number</span>) === number)</div></pre></td></tr></table></figure>
<h3 id="Bit-operation"><a href="#Bit-operation" class="headerlink" title="Bit operation"></a>Bit operation</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(<span class="name">parseInt</span>(<span class="name">number</span> | <span class="number">0</span>) === number)</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/56269eb78ad2e4ced1000013/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/56269eb78ad2e4ced1000013/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.&lt;/p&gt;
&lt;p&gt;If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - The Office VI Sabbatical</title>
    <link href="http://laker.me/blog/2020/01/10/20_0110_codewars_The_Office_VI_Sabbatical/"/>
    <id>http://laker.me/blog/2020/01/10/20_0110_codewars_The_Office_VI_Sabbatical/</id>
    <published>2020-01-10T00:24:00.000Z</published>
    <updated>2020-03-02T15:25:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/57fe50d000d05166720000b1/train/javascript" target="_blank" rel="external">https://www.codewars.com/kata/57fe50d000d05166720000b1/train/javascript</a></p>
<p>val=your value to the organisation<br>happ=her happiness level at the time of asking and finally<br>The numbers of letters from ‘sabbatical’ that are present in string ‘x’.</p>
<p>If the sum of the three parameters (as described above) is &gt; 22, return ‘Sabbatical! Boom!’, else return ‘Back to your desk, boy.’. memory?</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Test.assertEquals<span class="comment">(sabb('Can I have a sabbatical?', 5, 5)</span>, <span class="string">'Sabbatical! Boom!'</span>);</div><div class="line">Test.assertEquals<span class="comment">(sabb('Why are you shouting?', 7, 2)</span>, <span class="string">'Back to your desk, boy.'</span>);</div><div class="line">Test.assertEquals<span class="comment">(sabb('What do you mean I cant learn to code??', 8, 9)</span>, <span class="string">'Sabbatical! Boom!'</span>);</div><div class="line">Test.assertEquals<span class="comment">(sabb('Please calm down', 9, 1)</span>, <span class="string">'Back to your desk, boy.'</span>);</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sabb</span><span class="params">(x, val, happ)</span>&#123;</span></div><div class="line">  let <span class="built_in">sum</span> = (x.match(/[sabticl]/ig )|| []).<span class="built_in">length</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(<span class="built_in">sum</span> + val + happ &gt; <span class="number">22</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Sabbatical! Boom!'</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Back to your desk, boy.'</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>x.match(/[sabticl]/ig</code> to select all matched letters into a array. <code>|| []</code> is order to avoid error when there is no matched letter for <code>.length</code>.</p>
<p>Shorten the code to below:</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">sabb</span>(x, val, happ)&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="type">(x.match(/[sabticl]/ig</span> )|| []).length + val + happ &gt; <span class="number">22</span> ? <span class="symbol">'Sabbatical</span>! Boom!' : '<span class="type">Back</span> to your desk, boy.'</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/57fe50d000d05166720000b1/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/57fe50d000d05166720000b1/train/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;val=your value to the organisation&lt;br&gt;happ=her happiness level at the time of asking and finally&lt;br&gt;The numbers of letters from ‘sabbatical’ that are present in string ‘x’.&lt;/p&gt;
&lt;p&gt;If the sum of the three parameters (as described above) is &amp;gt; 22, return ‘Sabbatical! Boom!’, else return ‘Back to your desk, boy.’. memory?&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Vowel Count</title>
    <link href="http://laker.me/blog/2020/01/08/20_0108_codewars_Vowel_Count/"/>
    <id>http://laker.me/blog/2020/01/08/20_0108_codewars_Vowel_Count/</id>
    <published>2020-01-08T00:24:00.000Z</published>
    <updated>2020-03-02T15:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/54ff3102c1bad923760001f3/javascript" target="_blank" rel="external">https://www.codewars.com/kata/54ff3102c1bad923760001f3/javascript</a></p>
<p>Return the number (count) of vowels in the given string.</p>
<p>We will consider a, e, i, o, and u as vowels for this Kata.</p>
<p>The input string will only consist of lower case letters and/or spaces.</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Test</span>.assertEquals(getCount(<span class="string">"abracadabra"</span>), <span class="number">5</span>)</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach 1"></a>Approach 1</h3><p>Split the sting into a array, the check each letter:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> vowelsCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> arr = str.split(<span class="string">''</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="keyword">if</span> (arr[i] === <span class="string">'a'</span> || arr[i] === <span class="string">'e'</span> || arr[i] === <span class="string">'i'</span> || arr[i] === <span class="string">'o'</span> || arr[i] === <span class="string">'u'</span>) &#123;</div><div class="line">      vowelsCount+=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> vowelsCount;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach 2"></a>Approach 2</h3><p><code>x.match(/[sabticl]/ig</code> to select all matched letters into a array. <code>|| []</code> is order to avoid error when there is no matched letter for <code>.length</code>.</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">getCount</span>(str) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">(str.match(/[aeiou]/ig)</span> || []).length</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Approach-3"><a href="#Approach-3" class="headerlink" title="Approach 3"></a>Approach 3</h3><p>Delete the letter dosen’t match, then count the length:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[^aeiou]/gi</span>, <span class="string">''</span>).length;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/54ff3102c1bad923760001f3/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/54ff3102c1bad923760001f3/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Return the number (count) of vowels in the given string.&lt;/p&gt;
&lt;p&gt;We will consider a, e, i, o, and u as vowels for this Kata.&lt;/p&gt;
&lt;p&gt;The input string will only consist of lower case letters and/or spaces.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 在字符串前面的加号+</title>
    <link href="http://laker.me/blog/2019/12/24/19_1224_js/"/>
    <id>http://laker.me/blog/2019/12/24/19_1224_js/</id>
    <published>2019-12-24T00:24:00.000Z</published>
    <updated>2020-03-13T12:01:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>加法运算符会触发三种类型转换：</p>
<ul>
<li>转换为原始值</li>
<li>转换为数字</li>
<li>转换为字符串</li>
</ul>
<p>基本数据类型转换：</p>
<p>1、将数值转换成字符串toString()</p>
<p>　　　　格式：数值变量名.toString()</p>
<p>2、将字符串转换成整型parseInt()</p>
<p>　　　　注意点：字符串第一个字符只能为数字  如果不是数字 会报NaN  (Not a Number);</p>
<p>　　　　格式：parseInt(字符串变量名)</p>
<p>3、将字符串转换成浮点型 pareFloat()</p>
<p>　　　　格式：parseFloat(数值变量名)</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 16进制转换:</span></div><div class="line">+<span class="string">'0xFF'</span>;              <span class="comment">// -&gt; 255</span></div><div class="line"><span class="comment">// 获取当前的时间戳,相当于`new Date().getTime()`:</span></div><div class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"></div><div class="line"><span class="comment">// 比 parseFloat()/parseInt()更加安全的解析字符串</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'1,000'</span>);    <span class="comment">// -&gt; 1, not 1000</span></div><div class="line">+<span class="string">'1,000'</span>;             <span class="comment">// -&gt; NaN, much better for testing user input</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'010'</span>);      <span class="comment">// -&gt; 8, because of the octal literal prefix</span></div><div class="line">+<span class="string">'010'</span>;               <span class="comment">// -&gt; 10, `Number()` doesn't parse octal literals</span></div><div class="line"><span class="comment">//一些简单的缩写比如： if (someVar === null) &#123;someVar = 0&#125;;</span></div><div class="line">+<span class="literal">null</span>;                <span class="comment">// -&gt; 0;</span></div><div class="line"></div><div class="line"><span class="comment">// 布尔型转换为整型</span></div><div class="line">+<span class="literal">true</span>;                <span class="comment">// -&gt; 1;</span></div><div class="line">+<span class="literal">false</span>;               <span class="comment">// -&gt; 0;</span></div><div class="line"></div><div class="line"><span class="comment">//其他:</span></div><div class="line">+<span class="string">'1e10'</span>;              <span class="comment">// -&gt; 10000000000</span></div><div class="line">+<span class="string">'1e-4'</span>;              <span class="comment">// -&gt; 0.0001</span></div><div class="line">+<span class="string">'-12'</span>;               <span class="comment">// -&gt; -12：</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;加法运算符会触发三种类型转换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转换为原始值&lt;/li&gt;
&lt;li&gt;转换为数字&lt;/li&gt;
&lt;li&gt;转换为字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本数据类型转换：&lt;/p&gt;
&lt;p&gt;1、将数值转换成字符串toString()&lt;/p&gt;
&lt;p&gt;　　　　格式：数值变量名.toString()&lt;/p&gt;
&lt;p&gt;2、将字符串转换成整型parseInt()&lt;/p&gt;
&lt;p&gt;　　　　注意点：字符串第一个字符只能为数字  如果不是数字 会报NaN  (Not a Number);&lt;/p&gt;
&lt;p&gt;　　　　格式：parseInt(字符串变量名)&lt;/p&gt;
&lt;p&gt;3、将字符串转换成浮点型 pareFloat()&lt;/p&gt;
&lt;p&gt;　　　　格式：parseFloat(数值变量名)&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://laker.me/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
  </entry>
  
</feed>
