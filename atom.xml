<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>进击的程序媛，Laker&#39;s blog</title>
  <subtitle>进击的程序媛，江小湖Laker</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://laker.me/blog/"/>
  <updated>2018-11-01T14:04:39.000Z</updated>
  <id>http://laker.me/blog/</id>
  
  <author>
    <name>Laker Huang</name>
    <email>younglaker8#gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AI learning 2：SVM Algorithm</title>
    <link href="http://laker.me/blog/2018/11/01/18_1101_ai_svm/"/>
    <id>http://laker.me/blog/2018/11/01/18_1101_ai_svm/</id>
    <published>2018-11-01T00:24:00.000Z</published>
    <updated>2018-11-01T14:04:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/large/6d184cefly1fwylhut942j20p00463yw.jpg" alt="AI learning 2：SVM Algorithm"></p>
<a id="more"></a>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">laker.me</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Environment: </p>
<ul>
<li>Anacoda Navigator</li>
<li>python 3.6</li>
</ul>
<p>Python packages(all in Anacoda, don’t have to install extractly):</p>
<ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy</a>: for scientific computing</li>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas</a>: for data analysis</li>
<li><a href="http://scikit-learn.org/stable/" target="_blank" rel="external">sklearn</a>: Simple and efficient tools for data mining and data analysis</li>
</ul>
<h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>Import packages and set alias.</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"># <span class="keyword">import</span> SVC <span class="keyword">in</span> svm <span class="keyword">module</span></div><div class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC </div><div class="line">#<span class="keyword">import</span> train_test_split <span class="keyword">in</span> model_selection <span class="keyword">module</span></div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div></pre></td></tr></table></figure>
<p>Import training file, it’s a matrix of a picture. The first column is type of then row.<br>The number means grayscale value of the picture pixel.<br>And we only use the last 5000 rows to train.</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># inputData <span class="keyword">is</span> <span class="keyword">object</span> <span class="keyword">of</span> pandas, <span class="keyword">and</span> use pandas <span class="function"><span class="keyword">function</span>  <span class="title">iloc</span> <span class="title">to</span> <span class="title">select</span> <span class="title">the</span> <span class="title">last</span> 5000 <span class="title">rows</span>.</span></div><div class="line"></div><div class="line"><span class="title">inputData</span> = <span class="title">pd</span>.<span class="title">read_csv</span><span class="params">(<span class="string">'./16.MNIST.train.csv'</span>)</span></div><div class="line"><span class="title">inputData</span> = <span class="title">inputData</span>.<span class="title">iloc</span>[-5000:, :]</div></pre></td></tr></table></figure>
<p>============== Usage of pandas function iloc ==============<br><a href="https://www.shanelynn.ie/select-pandas-dataframe-rows-and-columns-using-iloc-loc-and-ix/" target="_blank" rel="external">https://www.shanelynn.ie/select-pandas-dataframe-rows-and-columns-using-iloc-loc-and-ix/</a><br>There are two “arguments” to iloc – a row selector, and a column selector. </p>
<p><code>data.iloc[rows, columns]</code></p>
<p><code>data.iloc[a:b, c:d]</code> means from row a to row b, column c to column d.</p>
<p><code>data.iloc[a:, :d]</code> means from row a to column end, column one to column d.</p>
<p>Single selections using iloc and DataFrame</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Rows:</span></div><div class="line"><span class="class"><span class="keyword">data</span>.iloc[0] # first row of <span class="keyword">data</span> frame - <span class="type">Note</span> a <span class="type">Series</span> <span class="keyword">data</span> <span class="keyword">type</span> output.</span></div><div class="line"><span class="class"><span class="keyword">data</span>.iloc[1] # second row of <span class="keyword">data</span> frame </span></div><div class="line"><span class="class"><span class="keyword">data</span>.iloc[-1] # last row of <span class="keyword">data</span> frame </span></div><div class="line"></div><div class="line"><span class="meta"># Columns:</span></div><div class="line"><span class="class"><span class="keyword">data</span>.iloc[:,0] # first column of <span class="keyword">data</span> frame </span></div><div class="line"><span class="class"><span class="keyword">data</span>.iloc[:,1] # second column of <span class="keyword">data</span> frame </span></div><div class="line"><span class="class"><span class="keyword">data</span>.iloc[:,-1] # last column of <span class="keyword">data</span> frame</span></div></pre></td></tr></table></figure>
<p>Multiple columns and rows can be selected together using the .iloc indexer.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data.iloc[<span class="number">0</span>:<span class="number">5</span>] # <span class="keyword">first</span> five rows of dataframe</div><div class="line">data.iloc[:, <span class="number">0</span>:<span class="number">2</span>] # <span class="keyword">first</span> two columns of data frame with <span class="keyword">all</span> rows</div><div class="line">data.iloc[[<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">24</span>], [<span class="number">0</span>,<span class="number">5</span>,<span class="number">6</span>]] # <span class="number">1</span><span class="keyword">st</span>, <span class="number">4</span><span class="keyword">th</span>, <span class="number">7</span><span class="keyword">th</span>, <span class="number">25</span><span class="keyword">th</span> row + <span class="number">1</span><span class="keyword">st</span> <span class="number">6</span><span class="keyword">th</span> <span class="number">7</span><span class="keyword">th</span> columns.</div><div class="line">data.iloc[<span class="number">0</span>:<span class="number">5</span>, <span class="number">5</span>:<span class="number">8</span>] # <span class="keyword">first</span> <span class="number">5</span> rows <span class="built_in">and</span> <span class="number">5</span><span class="keyword">th</span>, <span class="number">6</span><span class="keyword">th</span>, <span class="number">7</span><span class="keyword">th</span> columns of data frame</div></pre></td></tr></table></figure>
<blockquote>
<p>Python list <a href="https://www.w3schools.com/python/python_lists.asp" target="_blank" rel="external">https://www.w3schools.com/python/python_lists.asp</a></p>
</blockquote>
<p>============== / End Usage of pandas function iloc ==============</p>
<p>In the taining data, the first colums is lable, so we drop label column using <code>drop([&#39;label&#39;], 1)</code>, extract it to parameter ‘label’ using <code>inputData[&#39;label&#39;]</code>, and convert it to array using <code>np.array()</code>.<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = <span class="built_in">np</span>.<span class="built_in">array</span>(inputData.drop(['<span class="built_in">label</span>'], <span class="number">1</span>))</div><div class="line"><span class="built_in">label</span> = <span class="built_in">np</span>.<span class="built_in">array</span>(inputData['<span class="built_in">label</span>'])</div></pre></td></tr></table></figure></p>
<p>============== Usage of pandas function drop ==============<br><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html" target="_blank" rel="external">https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html</a><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>),</div><div class="line">...                   columns=['A', 'B', 'C', 'D'])</div><div class="line">&gt;&gt;&gt; df</div><div class="line">   A  B   C   D</div><div class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></div><div class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></div><div class="line"><span class="number">2</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></div></pre></td></tr></table></figure></p>
<p>Drop columns</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> axis : &#123;0 or ‘index’, 1 or ‘columns’&#125;, default 0</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; df.drop([<span class="string">'B'</span>, <span class="string">'C'</span>], axis=1)</span></div><div class="line">   A   D</div><div class="line">0  0   3</div><div class="line">1  4   7</div><div class="line">2  8  11</div></pre></td></tr></table></figure>
<p>or:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; df.drop(columns=['B', 'C'])</div><div class="line">   A   D</div><div class="line"><span class="number">0</span>  <span class="number">0</span>   <span class="number">3</span></div><div class="line"><span class="number">1</span>  <span class="number">4</span>   <span class="number">7</span></div><div class="line"><span class="number">2</span>  <span class="number">8</span>  <span class="number">11</span></div></pre></td></tr></table></figure>
<p>Drop a row by index<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; df.drop([<span class="number">0</span>, <span class="number">1</span>])</div><div class="line">   A  B   C   D</div><div class="line"><span class="number">2</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></div></pre></td></tr></table></figure></p>
<p>============== / End Usage of pandas function drop ==============</p>
<p>============== Usage of numpy function array ==============<br><a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.array.html" target="_blank" rel="external">https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.array.html</a></p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; np.array(<span class="string">[[1, 2], [3, 4]]</span>)</div><div class="line">array(<span class="string">[[1, 2],</span></div><div class="line">       [3, 4]])</div></pre></td></tr></table></figure>
<p>============== / End Usage of numpy function array ==============</p>
<p>Then deal with the data, it’s a little tricky. Set data which is smaller than 100 to 0, and which is bigger than 100 to 1.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Improve accuracy from 0.1 to 0.9</span></div><div class="line"><span class="class"><span class="keyword">data</span>[<span class="keyword">data</span>&lt;=100] = 0</span></div><div class="line"><span class="class"><span class="keyword">data</span>[<span class="keyword">data</span>&gt;100] = 1</span></div></pre></td></tr></table></figure>
<p>Extract the first 5 rows.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">inputData</span><span class="selector-class">.head</span>()</div></pre></td></tr></table></figure>
<p>============== Usage of pandas function iloc ==============<br><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.head.html" target="_blank" rel="external">https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.head.html</a></p>
<blockquote>
<p>DataFrame.head(n)</p>
</blockquote>
<p>Return the first n rows, default n=5.</p>
<p>This function returns the first n rows for the object based on position. It is useful for quickly testing if your object has the right type of data in it.</p>
<p>See also</p>
<blockquote>
<p>DataFrame.tail(n)</p>
</blockquote>
<p>Returns the last n rows.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; df = pd.DataFrame(&#123;<span class="string">'animal'</span><span class="symbol">:</span>[<span class="string">'alligator'</span>, <span class="string">'bee'</span>, <span class="string">'falcon'</span>, <span class="string">'lion'</span>,</div><div class="line">...                    <span class="string">'monkey'</span>, <span class="string">'parrot'</span>, <span class="string">'shark'</span>, <span class="string">'whale'</span>, <span class="string">'zebra'</span>]&#125;)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; df</div><div class="line">      animal</div><div class="line"><span class="number">0</span>  alligator</div><div class="line"><span class="number">1</span>        bee</div><div class="line"><span class="number">2</span>     falcon</div><div class="line"><span class="number">3</span>       lion</div><div class="line"><span class="number">4</span>     monkey</div><div class="line"><span class="number">5</span>     parrot</div><div class="line"><span class="number">6</span>      shark</div><div class="line"><span class="number">7</span>      whale</div><div class="line"><span class="number">8</span>      zebra</div></pre></td></tr></table></figure>
<p>Viewing the first n lines (three in this case)<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; df.head(<span class="number">3</span>)</div><div class="line">      animal</div><div class="line"><span class="number">0</span>  alligator</div><div class="line"><span class="number">1</span>        bee</div><div class="line"><span class="number">2</span>     falcon</div></pre></td></tr></table></figure></p>
<p>============== /End Usage of pandas function iloc ==============</p>
<p>Use 70% data to train and 30% to test the taining result using <code>test_size=0.3</code>. Here we don’t specify the train_size, and it will automatically set to the complement of the test size, which is 1-0.3=0.7.</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data_train, data_test, label_train, <span class="attr">label_test</span> = train_test_split(data, label, <span class="attr">test_size=0.3,</span> <span class="attr">random_state=87)</span></div></pre></td></tr></table></figure>
<p>======= Usage of sklearn.model_selection.train_test_split =======<br><a href="http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html" target="_blank" rel="external">http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html</a></p>
<p><code>train_test_split(*arrays, **options)</code> </p>
<p>Split arrays or matrices into random train and test subsets</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div></pre></td></tr></table></figure>
<p><strong>Parameters:</strong></p>
<ul>
<li><p>*arrays : sequence of indexables with same length / shape[0]<br>Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.</p>
</li>
<li><p>test_size : float, int or None, optional (default=0.25)<br>If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. By default, the value is set to 0.25. </p>
</li>
<li><p>train_size : float, int, or None, (default=None)<br>If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.</p>
</li>
<li><p>random_state : int, RandomState instance or None, optional (default=None)<br>If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random.</p>
</li>
<li><p>shuffle : boolean, optional (default=True)<br>Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.</p>
</li>
<li><p>stratify : array-like or None (default=None)<br>If not None, data is split in a stratified fashion, using this as the class labels.</p>
</li>
</ul>
<p><strong>Returns:</strong>  </p>
<ul>
<li>splitting : list, length=2 * len(arrays)<br>List containing train-test split of inputs.</li>
</ul>
<p>======= /End Usage of sklearn.model_selection.train_test_split =======</p>
<p>Use SVC model and <code>fit()</code> to train, set more parameters in SVC() improve accuracy:</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SVM_model = SVC()</div><div class="line">SVM_model.fit(data_train, label_train)</div></pre></td></tr></table></figure>
<p>======= Usage of sklearn.model_selection.train_test_split =======</p>
<p><a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html" target="_blank" rel="external">http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html</a></p>
<blockquote>
<p>SVC(C=1.0, kernel=’rbf’, degree=3, gamma=’auto_deprecated’, coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape=’ovr’, random_state=None)</p>
</blockquote>
<p><a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC.fit" target="_blank" rel="external">http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC.fit</a></p>
<blockquote>
<p>fit(X, y, sample_weight=None)</p>
</blockquote>
<p>Fit the SVM model according to the given training data.</p>
<p>======= /End Usage of sklearn.model_selection.train_test_split =======</p>
<p>Use the first 10 rows to test and get the predict result. Then compare the predict result and label to score a point.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">SVM_model</span><span class="selector-class">.predict</span>(<span class="selector-tag">data_test</span><span class="selector-attr">[:10]</span>)</div><div class="line"></div><div class="line"><span class="selector-tag">label_test</span><span class="selector-attr">[:10]</span></div><div class="line"></div><div class="line"><span class="selector-tag">SVM_model</span><span class="selector-class">.score</span>(<span class="selector-tag">data_test</span>, <span class="selector-tag">label_test</span>)</div></pre></td></tr></table></figure>
<p>We can write a <code>score()</code> fuction like this instead of using <code>score()</code>.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">correct = 0</div><div class="line">prediction = SVM_model.<span class="keyword">predict</span>(data_test)</div><div class="line"><span class="keyword">for</span> i, <span class="keyword">lab</span> <span class="keyword">in</span> enumerate(label_test):</div><div class="line">    # <span class="keyword">if</span> prediction == <span class="keyword">label</span>, correct+1</div><div class="line">    <span class="keyword">if</span> prediction[i] == <span class="keyword">lab</span>:  </div><div class="line">        correct += 1</div><div class="line"></div><div class="line"># accuracy = correct numbers / all <span class="keyword">test</span> numbers</div><div class="line">accuracy = correct / len(label_test)</div><div class="line"><span class="keyword">print</span>(<span class="string">"Accuracy is:"</span>, accuracy)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/large/6d184cefly1fwylhut942j20p00463yw.jpg&quot; alt=&quot;AI learning 2：SVM Algorithm&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://laker.me/blog/categories/AI/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="人工智能" scheme="http://laker.me/blog/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="AI" scheme="http://laker.me/blog/tags/AI/"/>
    
      <category term="ML" scheme="http://laker.me/blog/tags/ML/"/>
    
      <category term="DL" scheme="http://laker.me/blog/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>AI 学习1	：Anaconda 配置</title>
    <link href="http://laker.me/blog/2018/10/04/18_1004_anaconda/"/>
    <id>http://laker.me/blog/2018/10/04/18_1004_anaconda/</id>
    <published>2018-10-04T00:24:00.000Z</published>
    <updated>2018-10-31T11:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/large/6d184cefly1fvzxnkjnwij20p0046t97.jpg" alt="AI 学习：Anaconda 配置"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>本文环境是 Mac OS。</p>
<p>目前Anaconda 出了 Python3.7 版本，但 TensorFlow 只支持3.5、3.6、2.7。有两种解决方案。</p>
<ul>
<li>方案一：</li>
</ul>
<p>安装3.7版，再根据官方推荐的方法安装3.5、3.6。</p>
<p><a href="http://docs.anaconda.com/anaconda/faq/#how-do-i-get-anaconda-with-python-3-5-or-3-6" target="_blank" rel="external">http://docs.anaconda.com/anaconda/faq/#how-do-i-get-anaconda-with-python-3-5-or-3-6</a></p>
<blockquote>
<p>We recommend that you download the latest version of Anaconda and then <a href="https://conda.io/docs/py2or3.html" target="_blank" rel="external">make a Python 3.5 (or 3.6) environment</a>.<br>Or download the latest version of Anaconda and run the following command to install Python 3.5 (or 3.6) in the root environment: conda install python=3.5<br>or</p>
<p><code>conda install python=3.6</code></p>
<p>Or download the most recent Anaconda installer that included Python 3.5 (Anaconda 4.2.0) or Python 3.6 (Anaconda 5.2.0). You can download either of these from our <a href="https://repo.anaconda.com/archive/" target="_blank" rel="external">archive</a>. Scroll down the page until you find the version you need for your platform.</p>
</blockquote>
<p>命令行执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> conda install python=3.6</span></div></pre></td></tr></table></figure>
<p>命令：</p>
<blockquote>
<p>开启环境<br>$ source activate py36</p>
<p>关闭环境<br>$ source deactivate</p>
</blockquote>
<p>开启环境</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> activate py36</span></div><div class="line">(py36)</div><div class="line"><span class="meta"></span></div><div class="line">$<span class="bash"> conda info --envs</span></div><div class="line"><span class="meta">#</span><span class="bash"> conda environments:</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line">base                     /Users/laker/anaconda3</div><div class="line">Laker                    /Users/laker/anaconda3/envs/Laker</div><div class="line">py36                  *  /Users/laker/anaconda3/envs/py36</div><div class="line"></div><div class="line">(py36)</div></pre></td></tr></table></figure>
<p>我尝试了这个方法，最后3.6是安装成功了，但是客户端打不开了，尝试了网上解决闪退的办法未果，貌似这是个通病。折腾了一上午也没搞好，折腾到崩溃，之后卸载采取第二种方案</p>
<ul>
<li>方案二：</li>
</ul>
<p>到清华镜像下载以往版本，官网也有，但是慢。</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p>
<p>安装好后，Anaconda 自带 Python 环境，与 Mac 自身的不相干。</p>
<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>安装后尝试如下命令</p>
<pre><code>conda --version
</code></pre><p>如果出现</p>
<pre><code>$ conda --version
conda 4.3.30
</code></pre><p>表示安装成功，如果没有，则需配置环境变量<br>修改<code>.bash_profile</code> 或 <code>zsh_profile</code>，我用的 zsh</p>
<pre><code>vi ~/.zsh_profile
</code></pre><p>添加以下命令</p>
<pre><code>export PATH=&quot;/Users/nick(你自己的安装路径)/anaconda3/bin:$PATH&quot;
</code></pre><p>vim使用<code>:wq</code>命令保存退出<br>保存文件后如要立即生效，输入以下命令，</p>
<pre><code>source $HOME/.zsh_profile
</code></pre><blockquote>
<p>注意：重启机子后也可能要执行这个</p>
</blockquote>
<p>再次测试<code>conda --version</code>命令是否安装成功.</p>
<p>如果成功，我们继续用以下命令修改conda的镜像源，这里用清华的源。输入以下两条命令来添加源：</p>
<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --set show_channel_urls yes
</code></pre><p>此时~/下会生成.condarc文件。</p>
<p>用<code>vi ~/.condarc</code>命令进入vim编辑器，删除其中的第三、第四行，即删除了默认的源，然后<code>:wq</code>保存：</p>
<pre><code>channels:
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
  - defaults #删除
ssl_verify: true #删除
show_channel_urls: true
</code></pre><p><code>conda info</code> 查看当前配置信息，channel URLs只剩下清华的源</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">channel URLs : https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>pkgs<span class="regexp">/free/</span>osx-<span class="number">64</span></div><div class="line">    https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>pkgs<span class="regexp">/free/</span>noarch</div></pre></td></tr></table></figure>
<h2 id="安装-TensorFlow"><a href="#安装-TensorFlow" class="headerlink" title="安装 TensorFlow"></a>安装 TensorFlow</h2><p>注意，这里是用 Anaconda 的 pip，不是本机的 pip，所以 pip 前加上路径</p>
<p>更新 pip<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>~<span class="regexp">/anaconda3/bin</span><span class="regexp">/pip install --upgrade pip</span></div></pre></td></tr></table></figure></p>
<p>更新 TensorFlow</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ~<span class="string">/anaconda3/bin/pip</span> install <span class="params">--upgrade</span> <span class="params">--ignore-installed</span> tensorflow</div></pre></td></tr></table></figure>
<p>可能会有一段黄色警告，再多等会，或者开代理</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># laker @ Laker in ~ [13:11:43]</span></div><div class="line">$ ~/anaconda3/bin/pip install <span class="comment">--upgrade --ignore-installed tensorflow</span></div><div class="line">Collecting tensorflow</div><div class="line">  Retrying (Retry(total=<span class="number">4</span>, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) <span class="keyword">after</span> connection broken <span class="keyword">by</span> <span class="string">'NewConnectionError('</span>&lt;pip.<span class="title">_vendor</span>.urllib3.connection.VerifiedHTTPSConnection object <span class="keyword">at</span> <span class="number">0x11021c828</span>&gt;: Failed <span class="built_in">to</span> establish <span class="keyword">a</span> <span class="built_in">new</span> connection: [Errno <span class="number">8</span>] nodename nor servname provided, <span class="keyword">or</span> <span class="keyword">not</span> known<span class="string">',)'</span>: /simple/tensorflow/</div><div class="line">  Retrying (Retry(total=<span class="number">3</span>, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) <span class="keyword">after</span> connection broken <span class="keyword">by</span> <span class="string">'NewConnectionError('</span>&lt;pip.<span class="title">_vendor</span>.urllib3.connection.VerifiedHTTPSConnection object <span class="keyword">at</span> <span class="number">0x110067a58</span>&gt;: Failed <span class="built_in">to</span> establish <span class="keyword">a</span> <span class="built_in">new</span> connection: [Errno <span class="number">8</span>] nodename nor servname provided, <span class="keyword">or</span> <span class="keyword">not</span> known<span class="string">',)'</span>: /simple/tensorflow/</div><div class="line">  Retrying (Retry(total=<span class="number">2</span>, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) <span class="keyword">after</span> connection broken <span class="keyword">by</span> <span class="string">'NewConnectionError('</span>&lt;pip.<span class="title">_vendor</span>.urllib3.connection.VerifiedHTTPSConnection object <span class="keyword">at</span> <span class="number">0x110067ac8</span>&gt;: Failed <span class="built_in">to</span> establish <span class="keyword">a</span> <span class="built_in">new</span> connection: [Errno <span class="number">65</span>] No route <span class="built_in">to</span> host<span class="string">',)'</span>: /simple/tensorflow/</div><div class="line">  Downloading <span class="keyword">https</span>://<span class="built_in">files</span>.pythonhosted.org/packages/<span class="number">70</span>/<span class="number">78</span>/cd74769027b6249e45807637c1aa3ef212b9492349cca4b87e5de1a10548/tensorflow<span class="number">-1.11</span><span class="number">.0</span>-cp36-cp36m-macosx_10_11_x86_64.whl (<span class="number">59.3</span>MB)</div><div class="line">    <span class="number">9</span>% |███                             | <span class="number">5.4</span>MB <span class="number">96</span>kB/s eta <span class="number">0</span>:<span class="number">09</span>:<span class="number">20</span></div></pre></td></tr></table></figure>
<h2 id="安装Jupyter-Spyder"><a href="#安装Jupyter-Spyder" class="headerlink" title="安装Jupyter, Spyder"></a>安装Jupyter, Spyder</h2><p><img src="http://wx1.sinaimg.cn/mw690/6d184cefly1fvzuazc915j21jc0okgq7.jpg" alt="Jupyter,spyder"></p>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>下载测试文件<br>链接:<a href="https://pan.baidu.com/s/1U_P1VsJyJ3Zn8SAprz9Sxw" target="_blank" rel="external">https://pan.baidu.com/s/1U_P1VsJyJ3Zn8SAprz9Sxw</a> 提取码: vtaf</p>
<p>安装测试文件的依赖库 pygame</p>
<pre><code>$ ~/anaconda3/bin/pip install pygame
</code></pre><p>运行Jupyter，点击面板的 Launch，</p>
<p><img src="http://wx2.sinaimg.cn/mw690/6d184cefly1fvzub9u6vrj20ck0ew754.jpg" alt="Jupyter"></p>
<p>或者输入命令</p>
<pre><code>ipython notebook
</code></pre><p>找到文件所在位置</p>
<p><img src="http://wx3.sinaimg.cn/mw690/6d184cefly1fvzublo0fuj20hy0fgdgu.jpg" alt="Jupyter界面"></p>
<p>进入<code>homework0.ipynb</code>，运行</p>
<p><img src="http://wx3.sinaimg.cn/mw690/6d184cefly1fvzuc8mo3lj214a0q8q6t.jpg" alt="homework0.ipynb"></p>
<p>效果是两个特效的窗口</p>
<p><img src="http://wx4.sinaimg.cn/mw690/6d184cefly1fvzudre5z8j21bs0fmhdt.jpg" alt="效果"></p>
<p>参考：<br><a href="https://www.jianshu.com/p/b9eac8419c8d" target="_blank" rel="external">Anaconda之Python环境配置</a><br><a href="http://docs.anaconda.com/anaconda/faq/#should-i-add-anaconda-to-the-macos-or-linux-path" target="_blank" rel="external">Add PATH</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/large/6d184cefly1fvzxnkjnwij20p0046t97.jpg&quot; alt=&quot;AI 学习：Anaconda 配置&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://laker.me/blog/categories/AI/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="人工智能" scheme="http://laker.me/blog/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="AI" scheme="http://laker.me/blog/tags/AI/"/>
    
      <category term="ML" scheme="http://laker.me/blog/tags/ML/"/>
    
      <category term="DL" scheme="http://laker.me/blog/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>算法学习1：重新排序链表</title>
    <link href="http://laker.me/blog/2018/09/29/18_0929_%20algorithm/"/>
    <id>http://laker.me/blog/2018/09/29/18_0929_ algorithm/</id>
    <published>2018-09-29T00:24:00.000Z</published>
    <updated>2018-10-07T14:56:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx2.sinaimg.cn/large/6d184cefly1fvwi0uvwsmj20p0046gm8.jpg" alt="算法学习：重新排序链表"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个单链表，将链表按头节点、尾节点、第二个节点、 倒数第二个节点…的规律重建。要求：原地操作，不改变节点的值。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>暴力法：先找头节点，再找尾节点，然后顺次第二个节点，倒数第二个节点，由于是单链表，不停的从表头遍历到表尾，时间复杂度O(n^2)</p>
<p>看下有没有其他便捷方法。</p>
<p>假设给一组数字<code>1,2,3,4,5,6</code>，重新排序后是<code>1,6,2,5,3,4</code>，会发现一个规律，<code>1, 2, 3</code>是顺序的，<code>6, 5, 4</code>是倒序插入的。</p>
<p>所以可这样考虑：<br>先把链表一分为二，把后半部分数据倒序插入前半部分。<br>头插法制作倒序链表，时间复杂度 O(n)，将左右两链表合并，时间复杂度 O(n)。总时间复杂度为O(n)。</p>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">void Revert (Link L1) &#123;</div><div class="line">	new Link L2; <span class="comment">//用于存放倒序的后半部链表</span></div><div class="line">	int half_len = L1.lenght() / <span class="number">2</span>; <span class="comment">//记录链表的一半</span></div><div class="line">	<span class="function"><span class="title">int</span> *p = L1-&gt;</span>head; <span class="comment">//p 指向 L1 头节点</span></div><div class="line">	<span class="function"><span class="title">int</span> *q = L2-&gt;</span>head; <span class="comment">//q 指向 L2 头指针</span></div><div class="line">	int *s, *t;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; half_len; i++) &#123;</div><div class="line">		<span class="function"><span class="title">s</span> = s-&gt;</span>next; <span class="comment">// 找到链表中部</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="title">q</span> = s-&gt;</span>next; <span class="comment">//把后半段链表赋值给 L2</span></div><div class="line">	<span class="function"><span class="title">s</span>-&gt;</span>next = null; <span class="comment">// 此时 s 为 L1尾指针</span></div><div class="line"></div><div class="line">	<span class="function"><span class="title">t</span> = q-&gt;</span>next;</div><div class="line">	<span class="comment">// 这里我直接在表内操作，看起来有点乱，新建个 L3来存放会看得舒服点</span></div><div class="line">	<span class="function"><span class="title">while</span> ( t-&gt;</span>next != null ) &#123; <span class="comment">//倒置 L2</span></div><div class="line">		<span class="function"><span class="title">q</span>-&gt;</span><span class="function"><span class="title">next</span> = t-&gt;</span>next;</div><div class="line">		<span class="function"><span class="title">t</span>-&gt;</span>next = q;</div><div class="line">		L2-&gt;<span class="function"><span class="title">head</span>-&gt;</span>next = t;</div><div class="line">		<span class="function"><span class="title">t</span> = q-&gt;</span>next;</div><div class="line">		<span class="function"><span class="title">q</span> = L2-&gt;</span><span class="function"><span class="title">head</span>-&gt;</span>next;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> ( p != s ) &#123; <span class="comment">// p 没有走到表尾时插入L2节点</span></div><div class="line">		<span class="function"><span class="title">t</span> = L2-&gt;</span><span class="function"><span class="title">head</span>-&gt;</span>next; <span class="comment">//一开始，t 指向 L2第一个节点</span></div><div class="line">		L2-&gt;<span class="function"><span class="title">head</span>-&gt;</span><span class="function"><span class="title">next</span> = L2-&gt;</span><span class="function"><span class="title">head</span>-&gt;</span><span class="function"><span class="title">next</span>-&gt;</span>next; <span class="comment">//取出第一个节点，第二个节点变成第一个节点</span></div><div class="line">		<span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">next</span> = p-&gt;</span>next; <span class="comment">//t 插入 p</span></div><div class="line">		<span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = t-&gt;</span>next;</div><div class="line">		<span class="function"><span class="title">p</span> = p-&gt;</span><span class="function"><span class="title">next</span>-&gt;</span>next; <span class="comment">//移动 p 到下一个待插入的节点</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单的图示：</p>
<p><img src="http://wx4.sinaimg.cn/mw690/6d184cefly1fvwju0nqrvj20u0141ta3.jpg" alt="图示"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/large/6d184cefly1fvwi0uvwsmj20p0046gm8.jpg&quot; alt=&quot;算法学习：重新排序链表&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://laker.me/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://laker.me/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于博客图片失效的公告</title>
    <link href="http://laker.me/blog/2018/09/20/18_0920_notice/"/>
    <id>http://laker.me/blog/2018/09/20/18_0920_notice/</id>
    <published>2018-09-20T00:24:00.000Z</published>
    <updated>2018-09-20T13:42:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/large/6d184cefly1fvzxnqr4qpj20p00463z2.jpg" alt="关于博客图片失效的公告"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p><img src="http://wx4.sinaimg.cn/large/6d184cefly1fvzxnqr4qpj20p00463z2.jpg" alt="公告"><br>本站图片原本存于七牛云存储。近期七牛收回了免费的域名，导致所有图片链接失效。</p>
<p>自定义域名需要备案，本站域名是在狗爹买的，感觉会很麻烦。图片迁移的话工作量很大。我再想办法。</p>
<p>虽然博文质量一般，但对我而言是很好的学习记录，还是希望能重新弄好。</p>
<p>感谢这些年，通过博客认识的朋友们，大家一起努力鸭~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/large/6d184cefly1fvzxnqr4qpj20p00463z2.jpg&quot; alt=&quot;关于博客图片失效的公告&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次移动硬盘无法读取的处理过程</title>
    <link href="http://laker.me/blog/2018/06/02/18_0602_disk/"/>
    <id>http://laker.me/blog/2018/06/02/18_0602_disk/</id>
    <published>2018-06-02T00:24:00.000Z</published>
    <updated>2018-08-03T05:15:46.000Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20180602.jpg?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="移动硬盘无法读取"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<h2 id="状况"><a href="#状况" class="headerlink" title="状况"></a>状况</h2><p>新电脑硬盘插到硬盘盒上，Windows笔记本电脑不识别，没有任何反应，也不报错，换了接口也不行。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>考虑到硬盘盒硬盘盒都比较新，坏的可能性不大，就尝试换设备试下。</p>
<h3 id="1-查看磁盘管理是否有读取而无盘符"><a href="#1-查看磁盘管理是否有读取而无盘符" class="headerlink" title="1.查看磁盘管理是否有读取而无盘符"></a>1.查看磁盘管理是否有读取而无盘符</h3><p>右键<code>计算机</code> —— <code>磁盘管理</code>，如果有读取出新磁盘，加个盘符即可。但此时无新磁盘。</p>
<h3 id="2-换了一台-Windows电脑尝试"><a href="#2-换了一台-Windows电脑尝试" class="headerlink" title="2.换了一台 Windows电脑尝试"></a>2.换了一台 Windows电脑尝试</h3><p>换了台式电脑，仍无反应。</p>
<h3 id="3-换-Mac-电脑尝试"><a href="#3-换-Mac-电脑尝试" class="headerlink" title="3.换 Mac 电脑尝试"></a>3.换 Mac 电脑尝试</h3><p>有弹框反应，表明不是硬盘和硬盘盒的问题。<br>报错显示无法读写硬盘。此时考虑可以格式化。</p>
<p><code>Launchpad</code> —— <code>Other 其他</code> —— <code>Disk Utility 磁盘管理</code> —— <code>选中硬盘，Erase 抹除</code></p>
<p>考虑到 Mac 和 Windows 都能用的格式，选择exFAT，其他默认。<br>格式化好，Mac 可以正常读写，再插到Windows笔记本，也能正常读写了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20180602.jpg?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;移动硬盘无法读取&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://laker.me/blog/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>自开发的EasyCanvas绘图库实践、Pixeler项目开发小结</title>
    <link href="http://laker.me/blog/2018/05/04/18_0504_easycanvas_pixeler/"/>
    <id>http://laker.me/blog/2018/05/04/18_0504_easycanvas_pixeler/</id>
    <published>2018-05-04T00:24:00.000Z</published>
    <updated>2018-05-22T14:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20180503.jpg?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="EasyCanvas绘图库实践"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<h2 id="涉及的两个项目"><a href="#涉及的两个项目" class="headerlink" title="涉及的两个项目"></a>涉及的两个项目</h2><p><a href="https://github.com/younglaker/pixeler" target="_blank" rel="external">Pixler</a>：一个用于设计像素图片（拼豆）的应用。</p>
<p><a href="https://github.com/younglaker/EasyCanvas" target="_blank" rel="external">Easycanvas.js</a>： Canvas 绘图库</p>
<p><img src="https://camo.githubusercontent.com/1d13f30b16d7e66731cab36a3433bf27d4f10e9e/687474703a2f2f3737673534662e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f626c6f6732303135313232393131333032322e706e67" alt="Pixler"></p>
<h2 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h2><p>我对拼豆感兴趣，在做拼豆前要设计图纸，类似画像素图。我试用了网上能搜到的几个拼豆图纸设计的应用，但是没有适合我的，我就想着自己开发一个。</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ2018050301.jpg" alt="拼豆"></p>
<h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>拼豆图纸就类似于像素图，我刚开始构思如何开发的时候，想着它有点像下棋。所以我参考了五子棋的下棋原理。我在五子棋的算法上优化了鼠标点击时落脚的位置的计算方法，即鼠标点击时，获取点击位置，计算出它处于哪个方格中，在那个方格中画上一个像素点，用一个二维数组记录方格中已绘制的位置。这就完成了初步的拼豆像素图的算法设计。</p>
<p>在以往的开发中，我都要求每一步都精益求精，导致整体进度缓慢，常常停留在初步阶段，就把自己绕晕。所以在此次开发中，尝试了小步快跑、快速迭代的方法。</p>
<h2 id="第一版：快速开发"><a href="#第一版：快速开发" class="headerlink" title="第一版：快速开发"></a>第一版：快速开发</h2><p>第一版本开发的时候，我尽量减少对性能、代码优化的思考，在最快的速度完成基本功能，也就是如何绘制像素点和删除像素图。</p>
<p>这样没有束缚的情况下，只需要集中精力完成功能的算法，很快就实现基本功能。</p>
<p>当然，代码也是很简单粗暴的，就需要第二版的完善。</p>
<h2 id="第二版：性能和代码优化"><a href="#第二版：性能和代码优化" class="headerlink" title="第二版：性能和代码优化"></a>第二版：性能和代码优化</h2><p>首先，把画布分为两层，一层是参考线画布，一层是绘图画布。参考线画布在初始化后就不需要修改，所有操作只需要在绘图画布上进行，减少了绘图时候的工作量。</p>
<p>然后，把通用功能的代码封装成公共函数，减少冗余。</p>
<h2 id="第三版：封装绘图库，并在应用中不断完善"><a href="#第三版：封装绘图库，并在应用中不断完善" class="headerlink" title="第三版：封装绘图库，并在应用中不断完善"></a>第三版：封装绘图库，并在应用中不断完善</h2><p>Pixler 主要代码是 Canvas 绘图，所以可以把 Canvas 主要绘图功能封装一下，单独成一个绘图库，减少主代码冗余，也方便在其他项目中引用。</p>
<p>在大学期间，我研究 jQuery 的时候就仿着写了一个链式结构的 JavaScript 框架 <a href="https://github.com/younglaker/octjs" target="_blank" rel="external">Oct.js</a>，加上第一、第二版本对 Canvas 接口的熟悉，所以开发起来并不困难。但在接口设计上重复弄了几次，这部分的经验我也写了一篇文章 <a href="http://laker.me/blog/2017/06/15/17_0615_easy_canvas/">《EasyCanvas：连续画图的一些总结》</a> 记录了一下。</p>
<p>开发 Easycanvas.js，不仅是在 JavaScript 开发、Canvas 运用上的提升，还是一个开源项目的完整实践。期间有一个小伙伴加入参与了合作，可惜没参与太多功能就退出了，但还是一次很好的开源项目的体验。</p>
<p>在开发代码的过程中，还编写了相关的文档。接口不断优化修改，文档也不断的调整，就连文档格式也做了多次调整，工作量是不小，但也不厌其烦。</p>
<p>由于时间原因，在开发完 Easycanvas.js 基础版本后就去做别的项目。间隔一段时间回来再看，基本没有有最初开发时候的熟悉感，这就得靠我之前写的文档了。所以，好的文档是项目的开门钥匙。</p>
<p>就这样，我像一个刚接触这个绘图库的用户一样，参照文档，把 Easycanvas.js 重构了 Pixler 的绘图代码。同时，在应用的过程中发现了 Easycanvas.js 的不足，又反过来进行完善。两个项目相辅相成。</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/blog20151229112337.png" alt="Easycanvas"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>相比之前开发的 <a href="https://github.com/younglaker/octjs" target="_blank" rel="external">Oct.js</a>，只有开发和单元测试，并没有大规模地应用到实际项目中（我也尝试过，但一旦项目做大，就涉及到 jQuery 插件 ，就不得不引入 jQuery，就和 Oct.js 重复了，就只好把 Oct.js 删掉）。</p>
<p>所以，这次 Pixler 和 Easycanvas.js 的开发，从0到1再到100，是一个很好的经历。不仅是编程技能上的提升，还是项目管理上积累了经验。</p>
<p>至此 Pixler 和 Easycanvas.js 完成了一个较为稳定的版本，但还有很大的提升空间，我都一一记录在 Todolist 上了，等我一一突破。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20180503.jpg?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;EasyCanvas绘图库实践&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://laker.me/blog/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Canvas" scheme="http://laker.me/blog/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Canvas 清除圆形、不规则区域</title>
    <link href="http://laker.me/blog/2018/04/18/18_0418_canvas_cleararc/"/>
    <id>http://laker.me/blog/2018/04/18/18_0418_canvas_cleararc/</id>
    <published>2018-04-18T00:24:00.000Z</published>
    <updated>2018-05-22T14:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20180411.jpg?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Canvas 清除不规则区域"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p> 默认 Canvas Api 只提供了清除矩形区域的接口 <code>clearRect()</code>，但有时候需要清除圆形或其他特殊形状的区域。比如我在开发 <a href="https://github.com/younglaker/pixeler" target="_blank" rel="external">pixeler</a> 擦除绘制的圆形，刚开始是用 <code>clearRect()</code>， 设置大于圆形直径的正方形来擦除，后来想，能不能直接擦除圆形区域。</p>
<p> 根据 <a href="https://stackoverflow.com/questions/3564717/how-can-i-clear-an-arc-or-circle-in-html5-canvas" target="_blank" rel="external">Stack Overflow</a> 的回答和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation" target="_blank" rel="external">Mozilla 的文档</a>，<code>ctx.globalCompositeOperation</code> 提供了多种色彩合成模式，其中 <code>destination-out</code> 能够完成清除效果：</p>
<p> <img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20180522-180816@2x.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="destination-out"></p>
<p> 可以拓展 Canvas 接口：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CanvasRenderingContext2D.prototype.clearArc = function(x, y, radius, startAngle, endAngle, anticlockwise) &#123;</div><div class="line">    <span class="keyword">this</span>.beginPath();</div><div class="line">    <span class="keyword">this</span>.globalCompositeOperation = <span class="string">'destination-out'</span>;</div><div class="line">    <span class="keyword">this</span>.fillStyle = <span class="string">'black'</span>;</div><div class="line">    <span class="keyword">this</span>.arc(x, y, radius, startAngle, endAngle, anticlockwise);</div><div class="line">    <span class="comment">// 参数分别是：圆心横坐标、纵坐标、半径、开始的角度、结束的角度、是否逆时针</span></div><div class="line">    <span class="keyword">this</span>.fill();</div><div class="line">    <span class="keyword">this</span>.closePath();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p> 进一步，可以自定义各种路径：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">CanvasRenderingContext2D.prototype.clear = function() &#123;</div><div class="line">    <span class="keyword">this</span>.save();</div><div class="line">    <span class="keyword">this</span>.globalCompositeOperation = <span class="string">'destination-out'</span>;</div><div class="line">    <span class="keyword">this</span>.fillStyle = <span class="string">'black'</span>;</div><div class="line">    <span class="keyword">this</span>.fill();</div><div class="line">    <span class="keyword">this</span>.restore();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">CanvasRenderingContext2D.prototype.clearArc = function(x, y, radius, startAngle, endAngle, anticlockwise) &#123;</div><div class="line">    <span class="keyword">this</span>.beginPath();</div><div class="line">    <span class="keyword">this</span>.arc(x, y, radius, startAngle, endAngle, anticlockwise);</div><div class="line">    <span class="keyword">this</span>.clear();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">CanvasRenderingContext2D.prototype.clearShape = function(x, y, radius, startAngle, endAngle, anticlockwise) &#123;</div><div class="line">    <span class="keyword">this</span>.beginPath();</div><div class="line">    <span class="comment">// 定义各种不规则图形，如三角形、五角星...</span></div><div class="line">    <span class="keyword">this</span>.clear();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>调用：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var canvas = document.getElementById('canvas');</div><div class="line">var context = canvas.getContext('<span class="number">2</span>d');</div><div class="line"></div><div class="line">context.clearArc(<span class="number">50</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">0</span>, Math.<span class="literal">PI</span> * <span class="number">2</span>, false);</div><div class="line">context.clearArc(<span class="number">80</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">0</span>, Math.<span class="literal">PI</span>, false);</div></pre></td></tr></table></figure></p>
<p><a href="http://jsdo.it/akm2/e8CK" target="_blank" rel="external">效果参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20180411.jpg?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Canvas 清除不规则区域&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://laker.me/blog/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Canvas" scheme="http://laker.me/blog/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>利用 Github 分支管理一写无关痛痒的项目</title>
    <link href="http://laker.me/blog/2018/02/11/18_0211_use_github/"/>
    <id>http://laker.me/blog/2018/02/11/18_0211_use_github/</id>
    <published>2018-02-11T00:24:00.000Z</published>
    <updated>2018-02-17T16:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20180211.jpg?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="利用 Github 分支管理小项目"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为经常会写一些小程序，需要备份到 Github 方便管理和分享。随项目增多，Repo 的数目越来越多，但是很多是无关痛痒的，不必要这么多仓库存放。处女座情结表示这样特别乱，而且一眼看上去都是很辣鸡的代码，得想办法整理一下。</p>
<h2 id="整理方法"><a href="#整理方法" class="headerlink" title="整理方法"></a>整理方法</h2><p>1.建立一个仓库 （例如我的 <a href="https://github.com/younglaker/CometLab" target="_blank" rel="external">CometLab</a>），master分支用来做展示入口，只存放一个 README.md 来作为介绍。起名 Lab，就是意味着这里就是一个实验室。里面都是些实验性的项目。<br>2.每个小项目用其他分支存放，各分支之间没什么关系。例如现在有的<code>vue-todo</code> <code>vue-eleme</code> <code>ng-ionic</code>。</p>
<p>问题来了，在分支上的提交不计入 contribution，但是我会在这个仓库的分支进行很多开发，导致calendar是空的，不是所有的发布信息都展示出来，管理代码不太方便。</p>
<h2 id="Contributions未被Github计入的几个常见原因"><a href="#Contributions未被Github计入的几个常见原因" class="headerlink" title="Contributions未被Github计入的几个常见原因"></a>Contributions未被Github计入的几个常见原因</h2><ul>
<li>进行Commits的用户没有关联到Github帐号</li>
<li>未合并到默认分支或gh-pages的Commit</li>
<li>Fork的仓库</li>
</ul>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>既然要求合并到 master 才能计入 contribution，那么就 merge 一下就可以解决。</p>
<p>分支的小项目在日常进行正常的开发、提交，待基本完成后一次性merge 到 master，以前的 commit 会一次性计入 contribution，展示在 calendar上。</p>
<h2 id="merge-操作"><a href="#merge-操作" class="headerlink" title="merge 操作"></a>merge 操作</h2><p>先切换到默认分支</p>
<pre><code>git checkout master 
</code></pre><p>合并到 master </p>
<pre><code>git merge origin/分支名
</code></pre><p>删除除了mater readme.md 以外的所以文件，并修改readme的冲突，保持 master 为空。提交更改到本地：</p>
<pre><code>git add -A
git commit -m&apos;merge&apos;
</code></pre><p>再提交到 master</p>
<pre><code>git push origin master
</code></pre><p>在分支里曾经提交过的 commit 就会一次性计入 contribution，展示在 calendar上。</p>
<h2 id="升级用法"><a href="#升级用法" class="headerlink" title="升级用法"></a>升级用法</h2><p>为了方便开发，每个分支在本地用一个文件夹。</p>
<p>下载指定分支的代码：</p>
<pre><code>git clone -b 分支 git@github.com:younglaker/CometLab.git
</code></pre><p>修改本地文件夹名字成分支名字，方便管理。</p>
<p>再 clone 一个完整的仓库，需要 merge 的时候再 pull、merge、push。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>提交代码找不到远端分支。很可能是本地所在分支不是AAA，很可能目前是在master，误以为在AAA分支。</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git push origin AAA</div><div class="line"><span class="keyword">error: </span>src refspec AAA does not match any.</div><div class="line"><span class="keyword">error: </span>failed to push some refs to 'git@github.com:younglaker/BBB.git'</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20180211.jpg?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;利用 Github 分支管理小项目&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="GitHub" scheme="http://laker.me/blog/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://laker.me/blog/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 2 高仿饿了么开发及解注六：goods 商品件组</title>
    <link href="http://laker.me/blog/2017/11/20/17_1120_vuejs_eleme_6/"/>
    <id>http://laker.me/blog/2017/11/20/17_1120_vuejs_eleme_6/</id>
    <published>2017-11-20T00:24:00.000Z</published>
    <updated>2018-02-11T15:05:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Vue.js 2 高仿饿了么开发及解注六"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p>慕课网早期出了《Vue.js 1 高仿饿了么APP》的课程，本系列文章根据课程，使用 Vue.js 2 版本进行开发，并进行了一步步开发流程记录和详细的代码注解。</p>
<p><a href="https://github.com/ustbhuangyi/vue-sell" target="_blank" rel="external">原作者的代码</a></p>
<p><a href="https://github.com/younglaker/CometLab/tree/vue-eleme" target="_blank" rel="external">我做的含有详细代码注解的版本</a></p>
<hr>
<h1 id="购物车组件"><a href="#购物车组件" class="headerlink" title="购物车组件"></a>购物车组件</h1><p>功能： 点击购物车组件（不只是购物车logo，是整个底部的购物车栏），弹出购物车详情列表，可以删减数量、清空购物车。付款功能</p>
<p><code>shopcart.vue</code> 引入并注册 cartcontrol 组件</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// “添减食品” 组件</span></div><div class="line"><span class="keyword">import</span> cartcontrol <span class="keyword">from</span> <span class="string">'components/cartcontrol/cartcontrol'</span></div><div class="line"></div><div class="line">  ...</div><div class="line">  components: &#123;</div><div class="line">    cartcontrol</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>购物车清单HTML：</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 点击购物车logo出来的购物列表 --&gt;</span></span></div><div class="line"><span class="comment">&lt;!-- 折叠动画 fold --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fold"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 根据 listShow 的值来显示列表 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shopcart-list"</span> <span class="attr">v-show</span>=<span class="string">"listShow"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"empty"</span> @<span class="attr">click</span>=<span class="string">"empty"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 购物清单 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 定义了 ref="listContent"，可以传入BS插件，滑动购物清单 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-content"</span> <span class="attr">ref</span>=<span class="string">"listContent"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      </div><div class="line">        <span class="comment">&lt;!-- 展示加进购物车的食品、数量、价钱 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- goods组件传进来的selectFoods --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"food"</span> <span class="attr">v-for</span>=<span class="string">"food in selectFoods"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span><span class="template-variable">&#123;&#123;food.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>￥<span class="template-variable">&#123;&#123;food.price*food.count&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span></span></div><div class="line">          </div><div class="line">          &lt;<span class="attr">div</span> <span class="attr">class</span>=<span class="string">"cartcontrol-wrapper"</span>&gt;</div><div class="line">            <span class="comment">&lt;!-- “添减食品” 组件 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 传入当前 food --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">cartcontrol</span> @<span class="attr">add</span>=<span class="string">"addFood"</span> <span class="attr">:food</span>=<span class="string">"food"</span>&gt;</span><span class="tag">&lt;/<span class="name">cartcontrol</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure>
<p>购物车清单JavaScript部分<br>先定义一个购物车清单的折叠的标记</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span> () &#123;</span></div><div class="line">  <span class="title">return</span> &#123;</div><div class="line">    ...</div><div class="line">    <span class="title">fold</span>: <span class="title">true</span> </div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>通过fold来触发计算listShow()，HTML根据listShow()的返回值来展开、折叠</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 根据 listShow 的值来显示列表 --&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span>="<span class="title">shopcart</span>-<span class="title">list</span>" <span class="title">v</span>-<span class="title">show</span>="<span class="title">listShow</span>"&gt;</span></div><div class="line"></div><div class="line">computed: &#123;</div><div class="line">  <span class="comment">/* 判断购物车详情列表折叠、打开状态 */</span></div><div class="line">  listShow () &#123;</div><div class="line">    <span class="comment">// 若购物车里没有东西，则折叠标记fold = true，跳出整个函数</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.totalCount) &#123;</div><div class="line">      <span class="keyword">this</span>.fold = <span class="literal">true</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 能运行到这里，说明购物车里有东西，fold=false，所以show=true</span></div><div class="line">    let show = !<span class="keyword">this</span>.fold</div><div class="line">    <span class="keyword">if</span> (show) &#123;</div><div class="line">      <span class="comment">// 购物清单超过高度，添加 BScroll 插件，可以滑动清单</span></div><div class="line">      <span class="keyword">this</span>.$nextTick(() =&gt; &#123;</div><div class="line">        <span class="comment">// 如果this.scroll不存在，则创建</span></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.scroll) &#123;</div><div class="line">          <span class="comment">// 传入DOM &lt;div class="list-content" ref="listContent"&gt;，定义了 ref="listContent"</span></div><div class="line">          <span class="keyword">this</span>.scroll = new BScroll(<span class="keyword">this</span>.$refs.listContent, &#123;</div><div class="line">            click: <span class="literal">true</span></div><div class="line">          &#125;)</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果this.scroll存在，则更新（插件重新计算内容是否超出固定高度来使用滑动）</span></div><div class="line">          <span class="keyword">this</span>.scroll.refresh()</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> show</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>点击触发的展开、折叠：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 底部购物车 --&gt;</span></span></div><div class="line"><span class="comment">&lt;!-- 点击触发折叠/展开购物车清单 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> @<span class="attr">click</span>=<span class="string">"toggleList"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- @click="hideList"：点击阴影遮罩，收起购物车清单 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-mask"</span> @<span class="attr">click</span>=<span class="string">"hideList"</span> <span class="attr">v-show</span>=<span class="string">"listShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">methods: <span class="template-variable">&#123;</span></div><div class="line">  /* 折叠/展开购物车清单 */</div><div class="line">  toggleList () &#123;</div><div class="line">    // 如果购物车为空，则退出</div><div class="line">    <span class="keyword">if</span> (!this.totalCount) &#123;</div><div class="line">      return</div><div class="line">    &#125;<span class="xml"></span></div><div class="line"></div><div class="line">    // 此时购物车不为空，点击购物车组件，设置fold为之前的相反值</div><div class="line">    this.fold = !this.fold</div><div class="line">  &#125;,</div><div class="line">  /* 收起购物车清单 */</div><div class="line">  hideList () <span class="template-variable">&#123;</span></div><div class="line">    // fold值的变化，会触发listShow()重新计算</div><div class="line">    this.fold = true</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>清空购物车：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">span</span> class=<span class="string">"empty"</span> @click=<span class="string">"empty"</span>&gt;清空&lt;/span&gt;</div><div class="line"></div><div class="line"><span class="comment">/* 清空购物车 */</span></div><div class="line">empty () &#123;</div><div class="line">  this<span class="selector-class">.selectFoods</span><span class="selector-class">.forEach</span>((food) =&gt; &#123;</div><div class="line">    food<span class="selector-class">.count</span> = <span class="number">0</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>付款：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 结算按钮 --&gt;</div><div class="line">&lt;!-- .stop.prevent 阻止事件冒泡，避免点击付款时，触发整个购物条的点击事件（显示购物清单） --&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span>="<span class="title">content</span>-<span class="title">right</span>" <span class="meta">@click</span>.<span class="title">stop</span>.<span class="title">prevent</span>="<span class="title">pay</span>"&gt;</span></div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">pay</span>" :<span class="type">class="payClass"&gt;</span></span></div><div class="line">    &#123;&#123;payDesc&#125;&#125;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line"></div><div class="line">computed: &#123;</div><div class="line"></div><div class="line">  <span class="comment">/* 付款按钮的字样 */</span></div><div class="line">  payDesc () &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.totalPrice === <span class="number">0</span>) &#123;</div><div class="line">      <span class="comment">// ES6字符串拼接： `字符串$&#123;变量&#125;字符串` 等同于'字符串'+变量+'字符串'</span></div><div class="line">      <span class="comment">// 注意是反引号 ` ，而不是单引号 '</span></div><div class="line">      <span class="keyword">return</span> `￥$&#123;<span class="keyword">this</span>.minPrice&#125;元起送`</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.totalPrice &lt; <span class="keyword">this</span>.minPrice) &#123;</div><div class="line">      <span class="comment">// totalPrice是上面的totalPrice()，minPrice是从goods.vue传进来的</span></div><div class="line">      let diff = <span class="keyword">this</span>.minPrice - <span class="keyword">this</span>.totalPrice</div><div class="line">      <span class="keyword">return</span> `还差￥$&#123;diff&#125;元起送`</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'去结算'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">/* 付款按钮的CSS类 */</span></div><div class="line">  payClass () &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.totalPrice &lt; <span class="keyword">this</span>.minPrice) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'not-enough'</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'enough'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line"></div><div class="line">  <span class="comment">/* 付款 */</span></div><div class="line">  pay () &#123;</div><div class="line">    <span class="comment">// 如果购买金额不足最低消费要求，则退出函数</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.totalPrice &lt; <span class="keyword">this</span>.minPrice) &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    window.alert(`支付$&#123;<span class="keyword">this</span>.totalPrice&#125;元`)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Vue.js 2 高仿饿了么开发及解注六&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 2 高仿饿了么开发及解注五：购物车组件（上）</title>
    <link href="http://laker.me/blog/2017/11/05/17_1105_vuejs_eleme_5/"/>
    <id>http://laker.me/blog/2017/11/05/17_1105_vuejs_eleme_5/</id>
    <published>2017-11-05T00:24:00.000Z</published>
    <updated>2018-02-08T15:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Vue.js 2 高仿饿了么开发及解注五"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p>慕课网早期出了《Vue.js 1 高仿饿了么APP》的课程，本系列文章根据课程，使用 Vue.js 2 版本进行开发，并进行了一步步开发流程记录和详细的代码注解。</p>
<p><a href="https://github.com/ustbhuangyi/vue-sell" target="_blank" rel="external">原作者的代码</a></p>
<p><a href="https://github.com/younglaker/CometLab/tree/vue-eleme" target="_blank" rel="external">我做的含有详细代码注解的版本</a></p>
<hr>
<h1 id="购物车组件"><a href="#购物车组件" class="headerlink" title="购物车组件"></a>购物车组件</h1><p>新建组件 shopcart/shopcart.vue</p>
<p><code>goods.vue</code> 里引用，并注册<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 购物车组件</span></div><div class="line"><span class="keyword">import</span> shopcart <span class="keyword">from</span> <span class="string">'components/shopcart/shopcart'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> default &#123;</div><div class="line">  ...</div><div class="line">  components: &#123;</div><div class="line">    shopcart</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解注：-选择食物"><a href="#解注：-选择食物" class="headerlink" title="解注： 选择食物"></a>解注： 选择食物</h2><p><code>goods.vue</code> </p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">data.json里goods的结构</div><div class="line"><span class="string">"goods"</span>: [</div><div class="line">  &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"热销榜"</span>,</div><div class="line">    <span class="string">"type"</span>: -<span class="number">1</span>,</div><div class="line">    <span class="string">"foods"</span>: [&#123;&#125;, &#123;&#125;...]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"单人精彩套餐"</span>,</div><div class="line">    <span class="string">"type"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"foods"</span>: [&#123;&#125;, &#123;&#125;...]</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>放在 computed 里，实时更新<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  selectFoods () &#123;</div><div class="line">    let foods = []</div><div class="line">    <span class="keyword">this</span>.goods.forEach(<span class="function"><span class="params">(good)</span> =&gt;</span> &#123;</div><div class="line">      good.foods.forEach(<span class="function"><span class="params">(food)</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (food.count) &#123;</div><div class="line">          foods.push(food)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> foods</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解注1，接收参数"><a href="#解注1，接收参数" class="headerlink" title="解注1，接收参数"></a>解注1，接收参数</h2><p><code>goods.vue</code> 给组件传值selectFoods（选择的食物，最终传的是selectFoods()的返回值foods）、deliveryPrice（配送费）、minPrice（起送价）<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;shopcart  <span class="symbol">:selectFoods=<span class="string">"selectFoods"</span></span> <span class="symbol">:deliveryPrice=<span class="string">"seller.deliveryPrice"</span></span> <span class="symbol">:minPrice=<span class="string">"seller.minPrice"</span>&gt;&lt;/shopcart&gt;</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>shopcart.vue</code>接收goods组件传进来的deliveryPrice、minPrice，default表示如果没有接收到时的默认值<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> &#123;</div><div class="line">  <span class="attribute">props</span>: &#123;</div><div class="line">    selectFoods: &#123;</div><div class="line">      type: Array,</div><div class="line">      <span class="built_in">default</span>() &#123;</div><div class="line">        return [</div><div class="line">          &#123;</div><div class="line">            price: <span class="number">10</span>,</div><div class="line">            count: <span class="number">1</span></div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="selector-tag">deliveryPrice</span>: &#123;</div><div class="line">      <span class="attribute">type</span>: Number,</div><div class="line">      default: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    <span class="selector-tag">minPrice</span>: &#123;</div><div class="line">      <span class="attribute">type</span>: Number,</div><div class="line">      default: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>配送费直接显示：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"desc"</span>&gt;另需配送费￥&#123;&#123;deliveryPrice&#125;&#125;元&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<h2 id="解注2：-显示商品总价和总数"><a href="#解注2：-显示商品总价和总数" class="headerlink" title="解注2： 显示商品总价和总数"></a>解注2： 显示商品总价和总数</h2><p>计算：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  <span class="comment">/* 计算商品总价 */</span></div><div class="line">  totalPrice() &#123;</div><div class="line">    let <span class="keyword">total</span> = 0</div><div class="line">    <span class="comment">// 循环累加总价</span></div><div class="line">    this.selectFoods.<span class="keyword">forEach</span>((food) =&gt; &#123;</div><div class="line">      <span class="keyword">total</span> += food.price * food.<span class="keyword">count</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">total</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* 计算商品总数 */</span></div><div class="line">  totalCount() &#123;</div><div class="line">    let <span class="keyword">count</span> = 0</div><div class="line">    this.selectFoods.<span class="keyword">forEach</span>((food) =&gt; &#123;</div><div class="line">      <span class="keyword">count</span> += food.<span class="keyword">count</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">count</span></div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<p>显示：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo-wrapper"</span>&gt;</span></span></div><div class="line">  <span class="comment">&lt;!-- 当 totalCount&gt;0 时，就添加 .highlight 高亮样式 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- totalCount 是一个方法，可以省略‘()’来用 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span> <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;'highlight':totalCount&gt;0&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-shopping_cart"</span> <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;'highlight':totalCount&gt;0&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 当 totalCount&gt;0 时，才显示这个标签 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"num"</span> <span class="attr">v-show</span>=<span class="string">"totalCount&gt;0"</span>&gt;</span><span class="template-variable">&#123;&#123;totalCount&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 当 totalPrice&gt;0 时，就添加 .highlight 高亮样式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span> <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;'highlight':totalPrice&gt;0&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>￥</span><span class="template-variable">&#123;&#123;totalPrice&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>另需配送费￥<span class="template-variable">&#123;&#123;deliveryPrice&#125;</span><span class="xml">&#125;元<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="解注3：付款按钮"><a href="#解注3：付款按钮" class="headerlink" title="解注3：付款按钮"></a>解注3：付款按钮</h2><p>付款按钮有三种状态</p>
<ul>
<li>未选择食品时，显示起送价</li>
<li>选择食品但未达到起送价，显示差价</li>
<li>选择食品但且达到起送价，显示’去结算’</li>
</ul>
<blockquote>
<p>  ES6字符串拼接： <code>字符串${变量}字符串</code> 等同于’字符串’+变量+’字符串’。 注意是反引号 ` ，而不是单引号 ‘</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 付款按钮的字样 */</span></div><div class="line">payDesc() &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.totalPrice === <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> `￥$&#123;<span class="keyword">this</span>.minPrice&#125;元起送`</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.totalPrice &lt; <span class="keyword">this</span>.minPrice) &#123;</div><div class="line">    let diff = <span class="keyword">this</span>.minPrice - <span class="keyword">this</span>.totalPrice</div><div class="line">    <span class="keyword">return</span> `还差￥$&#123;diff&#125;元起送`</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'去结算'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"pay"</span> :<span class="built_in">class</span>=<span class="string">"payClass"</span>&gt;</div><div class="line">  &#123;&#123;payDesc&#125;&#125;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<h1 id="“添加食物”组件"><a href="#“添加食物”组件" class="headerlink" title="“添加食物”组件"></a>“添加食物”组件</h1><p>新建 <code>components/cartcontrol/cartcontrol.vue</code><br>在<code>shopcart.vue</code>引入并注册</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cartcontrol <span class="keyword">from</span> <span class="string">'components/cartcontrol/cartcontrol'</span></div><div class="line"></div><div class="line">components: &#123;</div><div class="line">  cartcontrol</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"food"</span> v-<span class="keyword">for</span>=<span class="string">"food in selectFoods"</span>&gt;</div><div class="line">  ...</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"cartcontrol-wrapper"</span>&gt;</div><div class="line">    <span class="xml"><span class="comment">&lt;!-- 传入 food --&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">cartcontrol</span> <span class="attr">:food</span>=<span class="string">"food"</span>&gt;</span><span class="tag">&lt;/<span class="name">cartcontrol</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">&lt;<span class="regexp">/li&gt;</span></div></pre></td></tr></table></figure>
<h2 id="解注1：减号滚动出现、数字渐变的动画"><a href="#解注1：减号滚动出现、数字渐变的动画" class="headerlink" title="解注1：减号滚动出现、数字渐变的动画"></a>解注1：减号滚动出现、数字渐变的动画</h2><p>vue.js 的 transition 的使用可以参考 header.vue 里的注释</p>
<p>添加 transition 标签，name 里写上动画名 move</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"move"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 当food.count&gt;0时显示删除按钮 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cart-decrease"</span> <span class="attr">v-show</span>=<span class="string">"food.count&gt;0"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inner icon-remove_circle_outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure>
<p>name=”xx”,这里就是 xxe-enter-active，xxe-leave-active</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cart-decrease</span></div><div class="line">  ...</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span></div><div class="line">  <span class="attribute">transform</span>: translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">  &amp;<span class="selector-class">.move-enter-active</span>, &amp;<span class="selector-class">.move-leave-active</span></div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.4s</span> linear</div><div class="line">  &amp;<span class="selector-class">.move-enter</span>, &amp;<span class="selector-class">.move-leave-active</span></div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span></div><div class="line">    <span class="attribute">transform</span>: translate3d(<span class="number">24px</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    <span class="selector-class">.inner</span></div><div class="line">      <span class="attribute">transform</span>: rotate(<span class="number">180deg</span>)</div></pre></td></tr></table></figure>
<h2 id="解注：添加食物，小球跳进购物车的动画"><a href="#解注：添加食物，小球跳进购物车的动画" class="headerlink" title="解注：添加食物，小球跳进购物车的动画"></a>解注：添加食物，小球跳进购物车的动画</h2><p><code>cartcontrll.vue</code> 里获取点击的食物加号的DOM</p>
<p><a href="https://cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="external">https://cn.vuejs.org/v2/api/#vm-emit</a></p>
<p><code>vm.$emit()</code>：触发当前实例上的事件。附加参数都会传给监听器回调。</p>
<p>侦听事件使用 <code>$on(eventName)</code><br>定义和触发事件使用 <code>$emit(eventName)</code></p>
<p>（vue.js 1.0 中的 <code>$dispatch</code> 和 <code>$broadcast</code> 已经被移除）</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  <span class="comment">/* 添加食物到购物车 */</span></div><div class="line">  addCart (<span class="keyword">event</span>) &#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="comment">// 定义并触发 add 事件，event.target（点击的目标，即食品对应的加号） 作为参数</span></div><div class="line">    <span class="keyword">this</span>.$emit(<span class="string">'add'</span>, <span class="keyword">event</span>.target)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>goods.vue</code> 里添加食物的组件里使用<br>触发在cartcontroll.vue里定义的add事件，事件发生时触发addFood()<br>@add 等同于 v-on:add<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">cartcontrol</span> @<span class="attr">add</span>=<span class="string">"addFood"</span>&gt;</span><span class="tag">&lt;/<span class="name">cartcontrol</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>goods.vue</code>  addFood()调用_drop(), 调用_drop()再调用shopcart组件的drop方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;shopcart ref=<span class="string">"shopcart"</span> ...&gt;<span class="xml"><span class="tag">&lt;/<span class="name">shopcart</span>&gt;</span></span></div><div class="line"></div><div class="line">addFood (target) &#123;</div><div class="line">  <span class="keyword">this</span>._drop(target)</div><div class="line">&#125;,</div><div class="line">_drop (target) &#123;</div><div class="line">  <span class="comment">// 体验优化,异步执行下落动画</span></div><div class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 先在 &lt;shopcart&gt; 标签里添加 ref="shopcart" 属性，goods组件就能访问子组件shopcart里的方法</span></div><div class="line">    <span class="keyword">this</span>.$refs.shopcart.drop(target)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>shopcart.vue</code><br>这里的transition用 <a href="https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90" target="_blank" rel="external">JavaScript 钩子</a>的用法。</p>
<ul>
<li>@before-enter=”方法”</li>
<li>@enter=”方法”</li>
<li>@after-enter=”方法”</li>
<li>@enter-cancelled=”方法”</li>
<li>@before-leave=”方法”</li>
<li>@leave=”方法”</li>
<li>@after-leave=”方法”</li>
<li>@leave-cancelled=”方法”</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;transition name=<span class="string">"drop"</span> @before-enter=<span class="string">"beforeDrop"</span> @enter=<span class="string">"dropping"</span> @after-enter=<span class="string">"afterDrop"</span>&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">ball</span>" <span class="title">v</span>-<span class="title">show</span>="<span class="title">ball</span>.<span class="title">show</span>"&gt;</span></div><div class="line">  &lt;/<span class="title">div</span>&gt;</div><div class="line">&lt;/<span class="title">transition</span>&gt;</div><div class="line"></div><div class="line"><span class="title">methods</span>: &#123;</div><div class="line">  <span class="comment">// --------</span></div><div class="line">  <span class="comment">// 进入中</span></div><div class="line">  <span class="comment">// --------</span></div><div class="line">  beforeDrop: <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;&#125;,</div><div class="line">  <span class="comment">// 此回调函数是可选项的设置</span></div><div class="line">  <span class="comment">// 与 CSS 结合时使用</span></div><div class="line">  dropping: <span class="function"><span class="keyword">function</span> <span class="params">(el, done)</span> </span>&#123;&#125;,</div><div class="line">  afterDrop: <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>shopcart.vue</code> 里的动画的具体实现。HTML部分：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 点击添加食物时，跳到购物车的动画小球 --&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-container"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 循环显示小球 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"ball in balls"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 小球下落的动画 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-钩子 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 这里使用了Vue transition 的 avaScript-钩子。@before-enter、@enter、@after-enter、@enter-cancelled、@before-leave、@leave、@after-leave、@leave-cancelled --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- methods: </span><span class="template-variable">&#123;</span></div><div class="line">      beforeDrop: function (el) &#123;&#125;<span class="xml"><span class="comment">,</span></span></div><div class="line">      // 此回调函数是可选项的设置</div><div class="line">      // 与 CSS 结合时使用</div><div class="line">      dropping: function (el, done) <span class="template-variable">&#123;&#125;</span><span class="xml"><span class="comment">,</span></span></div><div class="line">      afterDrop: function (el) <span class="template-variable">&#123;&#125;</span><span class="xml"><span class="comment"></span></span></div><div class="line">    &#125; --&gt;</div><div class="line">    <span class="comment">&lt;!-- 推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css="false"，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"drop"</span> @<span class="attr">before-enter</span>=<span class="string">"beforeDrop"</span> @<span class="attr">enter</span>=<span class="string">"dropping"</span> @<span class="attr">after-enter</span>=<span class="string">"afterDrop"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 通过 ball.show 来判断是否显示 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball"</span> <span class="attr">v-show</span>=<span class="string">"ball.show"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner inner-hook"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>JavaScript 里写动画的方法</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 找到可用的小球，将其push到dropBalls[] */</span></div><div class="line">drop (el) &#123;</div><div class="line">  <span class="comment">// 传入的 el 是点击的加号的DOM</span></div><div class="line">  <span class="comment">// balls，自定义的变量</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.balls.length; i++) &#123;</div><div class="line">    <span class="keyword">let</span> ball = <span class="keyword">this</span>.balls[i]</div><div class="line">    <span class="keyword">if</span> (!ball.show) &#123;</div><div class="line">      ball.show = <span class="literal">true</span></div><div class="line">      ball.el = el</div><div class="line">      <span class="comment">// dropBalls[]，自定义的变量，下落的小球</span></div><div class="line">      <span class="keyword">this</span>.dropBalls.push(ball)</div><div class="line">      <span class="comment">// 找到一个可用的ball，push到dropBalls[]后就可以退出了</span></div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="comment">/* ‘下落动画’前 */</span></div><div class="line">beforeDrop (el) &#123;</div><div class="line">  <span class="keyword">let</span> count = <span class="keyword">this</span>.balls.length</div><div class="line">  <span class="keyword">while</span> (count--) &#123;</div><div class="line">    <span class="keyword">let</span> ball = <span class="keyword">this</span>.balls[count]</div><div class="line">    <span class="keyword">if</span> (ball.show) &#123;</div><div class="line">      <span class="comment">// drop() 里 给 ball添加的el属性（存放点击的加号的DOM）</span></div><div class="line">      <span class="comment">// getBoundingClientRect() 浏览器接口，获取【加号】相对于视窗的距离</span></div><div class="line">      <span class="keyword">let</span> <span class="built_in">rect</span> = ball.el.getBoundingClientRect()</div><div class="line">      <span class="comment">// 购物车与加号的水平距离 = 购物车横坐标 - 小球.ball的left大小</span></div><div class="line">      <span class="keyword">let</span> x = <span class="built_in">rect</span>.left - <span class="number">32</span></div><div class="line">      <span class="comment">// y 是负数</span></div><div class="line">      <span class="comment">// 购物车与加号的垂直距离 = -(窗口高度 - 购物纵坐标 - 小球.ball的bottom大小)</span></div><div class="line">      <span class="keyword">let</span> y = -(<span class="built_in">window</span>.innerHeight - <span class="built_in">rect</span>.top - <span class="number">22</span>)</div><div class="line">      <span class="comment">// 先不显示</span></div><div class="line">      el.style.display = <span class="string">''</span></div><div class="line">      <span class="comment">// 外面纵向偏移，内部横向偏移，最终达到整体抛物线的动画</span></div><div class="line">      <span class="comment">// 外面的DOM做纵向动画</span></div><div class="line">      <span class="comment">// 注意：字符串拼接，有变量的时候不用单引号，用`</span></div><div class="line">      el.style.webkitTransform = <span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span></div><div class="line">      el.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span></div><div class="line">      <span class="comment">// 内部的DOM做横向动画</span></div><div class="line">      <span class="keyword">let</span> inner = el.getElementsByClassName(<span class="string">'inner-hook'</span>)[<span class="number">0</span>]</div><div class="line">      inner.style.webkitTransform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span></div><div class="line">      inner.style.transform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="comment">/* ‘下落动画’时 */</span></div><div class="line">dropping (el, done) &#123;</div><div class="line">  <span class="comment">// el.offsetHeight 触发浏览器重绘(当获取一些属性时，浏览器为取得 正确的值会触发重绘重排，如offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、 clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE))</span></div><div class="line">  <span class="comment">// 触发重绘，下面</span></div><div class="line">  <span class="comment">// 但是变量rf不用，所以加个eslint的注释不做变量是否使用的检查</span></div><div class="line">  <span class="comment">/* eslint-disable no-unused-vars */</span></div><div class="line">  <span class="keyword">let</span> rf = el.offsetHeight</div><div class="line">  <span class="comment">// 重置属性</span></div><div class="line">  <span class="keyword">this</span>.$nextTick(() =&gt; &#123;</div><div class="line">    el.style.webkitTransform = <span class="string">'translate3d(0,0,0)'</span></div><div class="line">    el.style.transform = <span class="string">'translate3d(0,0,0)'</span></div><div class="line">    <span class="keyword">let</span> inner = el.getElementsByClassName(<span class="string">'inner-hook'</span>)[<span class="number">0</span>]</div><div class="line">    inner.style.webkitTransform = <span class="string">'translate3d(0,0,0)'</span></div><div class="line">    inner.style.transform = <span class="string">'translate3d(0,0,0)'</span></div><div class="line">    el.addEventListener(<span class="string">'transitionend'</span>, done)</div><div class="line">  &#125;)</div><div class="line">&#125;,</div><div class="line"><span class="comment">/* ‘下落动画’后 */</span></div><div class="line">afterDrop (el) &#123;</div><div class="line">  <span class="comment">// 把dropBalls的这个元素删除</span></div><div class="line">  <span class="keyword">let</span> ball = <span class="keyword">this</span>.dropBalls.shift()</div><div class="line">  <span class="comment">// 重置小球属性</span></div><div class="line">  <span class="keyword">if</span> (ball) &#123;</div><div class="line">    ball.show = <span class="literal">false</span></div><div class="line">    el.style.display = <span class="string">'none'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还要在 CSS 里定义 transition 的属性</p>
<ul>
<li>transition: 过渡效果的属性 耗时 速度 延迟开始</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ball-container</span></div><div class="line">  <span class="selector-class">.ball</span></div><div class="line">    <span class="comment">// 配合js写的小球下落的transition，这里定义了完成时间、弧度用贝塞尔曲线速度，来使效果出现抛物线效果</span></div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.4s</span> cubic-bezier(<span class="number">0.49</span>, -<span class="number">0.29</span>, <span class="number">0.75</span>, <span class="number">0.41</span>)</div><div class="line">    <span class="selector-class">.inner</span></div><div class="line">      <span class="comment">// 配合js写的小球下落的transition</span></div><div class="line">      <span class="attribute">transition</span>: all <span class="number">0.4s</span> linear</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Vue.js 2 高仿饿了么开发及解注五&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>用迅雷下载百度云，突破大文件和速度限制</title>
    <link href="http://laker.me/blog/2017/10/19/17_1019_baiduyun_download/"/>
    <id>http://laker.me/blog/2017/10/19/17_1019_baiduyun_download/</id>
    <published>2017-10-19T00:24:00.000Z</published>
    <updated>2018-02-08T15:34:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20171019.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="用迅雷下载百度云"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p>百度云网页版有限制下载大文件，必须使用客户端，而客户端又有速度限制。要么使用破解版的客户端，安全性不敢保证。迅雷大家都有，可以考虑用迅雷下载百度云的资料。根据<a href="https://www.zhihu.com/question/22085759" target="_blank" rel="external">知乎上的讨论</a>，尝试了大家的方法，最后选择了其中一种，并在原答主的基础上有所改进。</p>
<h2 id="1、下载浏览器脚本管理器插件"><a href="#1、下载浏览器脚本管理器插件" class="headerlink" title="1、下载浏览器脚本管理器插件"></a>1、下载浏览器脚本管理器插件</h2><p>这里选用<a href="http://tampermonkey.net/index.php?version=4.0.69&amp;ext=dhdg&amp;show=gcal" target="_blank" rel="external">tampermonkey</a>，也可以选用其他的</p>
<p>官网下载：<a href="http://tampermonkey.net/index.php?version=4.0.69&amp;ext=dhdg&amp;show=gcal" target="_blank" rel="external">http://tampermonkey.net/index.php?version=4.0.69&amp;ext=dhdg&amp;show=gcal</a><br>备用下载：<a href="https://pan.baidu.com/s/1c2CdKFu" target="_blank" rel="external">https://pan.baidu.com/s/1c2CdKFu</a></p>
<h2 id="2、安装脚本"><a href="#2、安装脚本" class="headerlink" title="2、安装脚本"></a>2、安装脚本</h2><p>到 <a href="https://greasyfork.org/zh-CN/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6" target="_blank" rel="external">greasyfork</a> 下载解决百度云大文件下载限制的脚本</p>
<h2 id="３、到百度云网页版下载东西"><a href="#３、到百度云网页版下载东西" class="headerlink" title="３、到百度云网页版下载东西"></a>３、到百度云网页版下载东西</h2><p>打开百度云网页版，脚本就开始运行</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170604164848.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="tampermonkey"></p>
<h3 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h3><p>选择文件下载</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170604165104.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="step"></p>
<p>可以选择在chrome里下载，但是比较慢。<br>所以暂停下载，获取下载地址：</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170604165126.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="step"></p>
<p>到迅雷新建下载任务，可以一次性下载多个任务</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170604165231.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="step"></p>
<p>刚开始是0B，没事</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170604165252.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="step"></p>
<p>解析、链接之后就正常了</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170604165326.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="step"></p>
<h3 id="360-极速浏览器"><a href="#360-极速浏览器" class="headerlink" title="360 极速浏览器"></a>360 极速浏览器</h3><p>如果文件比较多，这样获取下载地址比较麻烦。国内的浏览器有些有直接点击迅雷下载。如果没有的可以重新安装迅雷以便重新安装迅雷插件。不想下载的也可以手动复制下载链接。</p>
<p>我刚下载的360极速可以直接显示下载地址，也比较方便。</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170604165648.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="step"></p>
<p>批量下载，速度比较可观。不过不支持断点续传能力较弱，并且会出现下载到一半自动停掉，显示地址错误的提醒，大概是百度云的地址会有更换的机制。</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170604181619.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="step"></p>
<p>如果长时间没下载完成，可能是百度云的某种机制使下载地址会失效，需要重新获取地址。我就是下了一晚上，没有限制下载个数，所有东西只下载了一半然后全部失效，以后都吸取教训限制下载个数，减少损失。建议文件不要太大，多分几个压缩包下载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20171019.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;用迅雷下载百度云&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://laker.me/blog/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://laker.me/blog/tags/Tools/"/>
    
      <category term="效率" scheme="http://laker.me/blog/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="小工具" scheme="http://laker.me/blog/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 2 高仿饿了么开发及解注四：goods 商品件组</title>
    <link href="http://laker.me/blog/2017/10/09/17_1009_vuejs_eleme_4/"/>
    <id>http://laker.me/blog/2017/10/09/17_1009_vuejs_eleme_4/</id>
    <published>2017-10-09T00:24:00.000Z</published>
    <updated>2017-10-27T07:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Vue.js 2 高仿饿了么开发及解注四"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">laker.me–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p>慕课网早期出了《Vue.js 1 高仿饿了么APP》的课程，本系列文章根据课程，使用 Vue.js 2 版本进行开发，并进行了一步步开发流程记录和详细的代码注解。</p>
<p><a href="https://github.com/ustbhuangyi/vue-sell" target="_blank" rel="external">原作者的代码</a></p>
<p><a href="https://github.com/younglaker/CometLab/tree/vue-eleme" target="_blank" rel="external">我做的含有详细代码注解的版本</a></p>
<h2 id="评分组件"><a href="#评分组件" class="headerlink" title="评分组件"></a>评分组件</h2><p>新建 componet / star / star.vue， 评分星级的图片放入。</p>
<p>评分星级的星星的切图分为无星、半星、全星三种图案，各有2x、3x两种尺寸，通过三种图案组合拼凑成多种评分星数。一个星星用一个 <code>&lt;span&gt;</code> 装载，以背景的形式展现。</p>
<p><strong>star.vue</strong> CSS</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">"../../common/stylus/mixin.styl"</span></div><div class="line"></div><div class="line"><span class="selector-class">.star</span></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0</span></div><div class="line">  <span class="selector-class">.star-item</span></div><div class="line">    <span class="attribute">display</span>: inline-block</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat</div><div class="line">  <span class="comment">// star-xx 不同尺寸的星星</span></div><div class="line">  &amp;<span class="selector-class">.star-48</span></div><div class="line">    <span class="selector-class">.star-item</span></div><div class="line">      <span class="attribute">width</span>: <span class="number">20px</span></div><div class="line">      <span class="attribute">height</span>: <span class="number">20px</span></div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">22px</span></div><div class="line">      <span class="attribute">background-size</span>: <span class="number">20px</span> <span class="number">20px</span></div><div class="line">      &amp;:last-child</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">0</span> // 最后 一个星星没有margin-right</div><div class="line">      &amp;<span class="selector-class">.on</span></div><div class="line">        <span class="comment">// mixin.styl 里定义的 bg-image() </span></div><div class="line">        bg-image(<span class="string">'star48_on'</span>) <span class="comment">// 全星</span></div><div class="line">      &amp;<span class="selector-class">.half</span></div><div class="line">        bg-image(<span class="string">'star48_half'</span>)  <span class="comment">// 半星</span></div><div class="line">      &amp;<span class="selector-class">.off</span></div><div class="line">        bg-image(<span class="string">'star48_off'</span>)  <span class="comment">// 无星</span></div><div class="line">  &amp;<span class="selector-class">.star-36</span></div><div class="line">    <span class="selector-class">.star-item</span></div><div class="line">      <span class="attribute">width</span>: <span class="number">15px</span></div><div class="line">      <span class="attribute">height</span>: <span class="number">15px</span></div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">6px</span></div><div class="line">      <span class="attribute">background-size</span>: <span class="number">15px</span> <span class="number">15px</span></div><div class="line">      &amp;:last-child</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">0</span></div><div class="line">      &amp;<span class="selector-class">.on</span></div><div class="line">        bg-image(<span class="string">'star36_on'</span>)</div><div class="line">      &amp;<span class="selector-class">.half</span></div><div class="line">        bg-image(<span class="string">'star36_half'</span>)</div><div class="line">      &amp;<span class="selector-class">.off</span></div><div class="line">        bg-image(<span class="string">'star36_off'</span>)</div><div class="line">  &amp;<span class="selector-class">.star-24</span></div><div class="line">    <span class="selector-class">.star-item</span></div><div class="line">      <span class="attribute">width</span>: <span class="number">10px</span></div><div class="line">      <span class="attribute">height</span>: <span class="number">10px</span></div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">3px</span></div><div class="line">      <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span></div><div class="line">      &amp;:last-child</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">0</span></div><div class="line">      &amp;<span class="selector-class">.on</span></div><div class="line">        bg-image(<span class="string">'star24_on'</span>)</div><div class="line">      &amp;<span class="selector-class">.half</span></div><div class="line">        bg-image(<span class="string">'star24_half'</span>)</div><div class="line">      &amp;<span class="selector-class">.off</span></div><div class="line">        bg-image(<span class="string">'star24_off'</span>)</div></pre></td></tr></table></figure>
<p><strong>star.vue</strong> HTML<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 循环填充星星状态的class --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"star"</span> <span class="attr">:class</span>=<span class="string">"starType"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- v-for：循环获取 itemClasses() 返回的数组 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- :class="itemClass" 把获取的class加给span --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(itemClass,index) in itemClasses"</span> <span class="attr">:class</span>=<span class="string">"itemClass"</span> <span class="attr">class</span>=<span class="string">"star-item"</span> <span class="attr">key</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>star.vue</strong> JavaScript<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// const 定义常量</span></div><div class="line"><span class="keyword">const</span> LENGTH = <span class="number">5</span>   <span class="comment">// 星星个数</span></div><div class="line"><span class="keyword">const</span> CLS_ON = <span class="string">'on'</span>   <span class="comment">// 星星的三种状态</span></div><div class="line"><span class="keyword">const</span> CLS_HALF = <span class="string">'half'</span></div><div class="line"><span class="keyword">const</span> CLS_OFF = <span class="string">'off'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// 使用组件时传入的参数</span></div><div class="line">  props: &#123;</div><div class="line">    size: &#123;</div><div class="line">      <span class="keyword">type</span>: <span class="built_in">Number</span></div><div class="line">    &#125;,</div><div class="line">    score: &#123;</div><div class="line">      <span class="keyword">type</span>: <span class="built_in">Number</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 计算</span></div><div class="line">  computed: &#123;</div><div class="line">    starType () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'star-'</span> + <span class="keyword">this</span>.size</div><div class="line">    &#125;,</div><div class="line">    itemClasses () &#123;</div><div class="line">      <span class="keyword">let</span> result = []  <span class="comment">// 存放最终结果的数组</span></div><div class="line">      <span class="keyword">let</span> score = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.score * <span class="number">2</span>) / <span class="number">2</span> <span class="comment">// 通过分数算星星个数</span></div><div class="line">      <span class="comment">// 向下取0.5的公式。floor() 执行向下取整</span></div><div class="line">      <span class="comment">// floor(3.3 * 2) / 2 = 3 即 3颗全星+2颗无星</span></div><div class="line">      <span class="comment">// floor(3.6 * 2) / 2 = 3.5 即 3颗全星+1颗半星+1颗无星</span></div><div class="line">      <span class="keyword">let</span> hasDecimal = score % <span class="number">1</span> !== <span class="number">0</span> <span class="comment">// 取余不为0则有半星</span></div><div class="line">      <span class="keyword">let</span> integer = <span class="built_in">Math</span>.floor(score) <span class="comment">// 整数部分</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; integer; i++) &#123; <span class="comment">// 设置全星</span></div><div class="line">        result.push(CLS_ON)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (hasDecimal) &#123;</div><div class="line">        result.push(CLS_HALF)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">while</span> (result.length &lt; LENGTH) &#123; <span class="comment">// 循环，补充无星</span></div><div class="line">        result.push(CLS_OFF)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>header.vue</strong> 引用并注册 star 组件<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Star <span class="keyword">from</span> <span class="string">'components/star/star'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> default &#123;</div><div class="line">  ...</div><div class="line">  components: &#123;</div><div class="line">    Star   <span class="comment">// 注册评分组件</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>header.vue</strong> 使用评分组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"star-wrapper"</span>&gt;</div><div class="line">  <span class="xml"><span class="comment">&lt;!-- 使用 star 组件时，需传入 size、score --&gt;</span></span></div><div class="line">  <span class="comment">&lt;!-- :size 星星大小，组件定义了48、36、24 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- :score 评分，从data.json里来 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">star</span> <span class="attr">:size</span>=<span class="string">"48"</span> <span class="attr">:score</span>=<span class="string">"seller.score"</span>&gt;</span><span class="tag">&lt;/<span class="name">star</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Vue.js 2 高仿饿了么开发及解注四&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Semantic UI 及在 React.js 下开发的一些坑</title>
    <link href="http://laker.me/blog/2017/09/20/17_0920_sematic/"/>
    <id>http://laker.me/blog/2017/09/20/17_0920_sematic/</id>
    <published>2017-09-20T00:24:00.000Z</published>
    <updated>2017-09-28T04:02:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170928.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Semantic"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">进击的程序媛 http://laker.me/blog/</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p>最近做了一个 React + Semantic 的电商网站，记录一些坑。之前都是用 Bootstrap，第一次用 Semantic，有些不习惯。</p>
<h2 id="React-版"><a href="#React-版" class="headerlink" title="React 版"></a>React 版</h2><p><a href="https://react.semantic-ui.com/" target="_blank" rel="external">https://react.semantic-ui.com/</a></p>
<h2 id="避免弹框表单自动聚焦"><a href="#避免弹框表单自动聚焦" class="headerlink" title="避免弹框表单自动聚焦"></a>避免弹框表单自动聚焦</h2><p>弹框表单自动聚焦第一个 input 本来是好事情，但是如果第一个 input 设置了 selection，自动聚焦就会弹出下拉框，会很奇怪，如果是带实时搜索功能就会触发一次无用的搜索造成资源浪费</p>
<p>dropdown 插件有禁止自动聚焦的属性，<a href="https://semantic-ui.com/modules/dropdown.html#/settings" target="_blank" rel="external">参考1</a>，<a href="https://github.com/Semantic-Org/Semantic-UI/issues/2041" target="_blank" rel="external">参考2</a>:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span>selector).modal(&#123;</div><div class="line">    <span class="symbol">autofocus:</span> <span class="keyword">false</span>,</div><div class="line">&#125;).modal(<span class="string">'show'</span>);</div></pre></td></tr></table></figure></p>
<p>但是我设置了无效。</p>
<p>又根据 <a href="https://stackoverflow.com/questions/7827004/how-to-avoid-automatic-focus-on-first-input-field-when-popping-a-html-form-as-a" target="_blank" rel="external">Stack Overflow 的方法</a> 给 input 设置了 tabindex、autofocus，也未果<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tabindex</span>=<span class="string">"-1"</span> autofocus=<span class="string">"false"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>在 react 里 tabindex、autofocus 要写成 tabIndex、autoFocus</p>
</blockquote>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>实在没有办法，只能伪造一个 input，隐藏在界面最前面，但是不能用display:none</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.hidden-input</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background</span>: none;</div><div class="line">  <span class="attribute">z-index</span>: -<span class="number">99</span>;</div><div class="line">  <span class="attribute">top</span>: -<span class="number">1000px</span>;  <span class="comment">// 让input离开窗口视觉范围，不然还是会有聚焦的高亮框</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>聚焦时不显示下拉列表：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">'.ui.dropdown'</span>).dropdown(</div><div class="line">    <span class="symbol">showOnFocus:</span> <span class="keyword">false</span>, <span class="regexp">//</span> 聚焦时不展开下拉列表</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>新增全局 css class，给父级添加就好：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.align-item-c</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CheckBox-让-label-在左边"><a href="#CheckBox-让-label-在左边" class="headerlink" title="CheckBox 让 label 在左边"></a>CheckBox 让 label 在左边</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>让 label 左浮动<br><a href="http://jsbin.com/tewowa/1/edit?css,output" target="_blank" rel="external">http://jsbin.com/tewowa/1/edit?css,output</a><br><a href="https://stackoverflow.com/questions/25355614/semantic-ui-positioning-labels" target="_blank" rel="external">https://stackoverflow.com/questions/25355614/semantic-ui-positioning-labels</a></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"ui toggle checkbox custom"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">input</span> id=<span class="string">"privacy"</span> type=<span class="string">"checkbox"</span> checked=<span class="string">"checked"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"privacy"</span>&gt;Public&lt;/label&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.custom</span> <span class="selector-tag">label</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二：</p>
<p>让 checkbox 右浮动<br><a href="https://github.com/Semantic-Org/Semantic-UI/issues/1986" target="_blank" rel="external">https://github.com/Semantic-Org/Semantic-UI/issues/1986</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ui</span><span class="selector-class">.toggle</span><span class="selector-class">.checkbox</span><span class="selector-attr">[class*="right floated"]</span> &#123;</div><div class="line">    <span class="attribute">float</span>: right <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">0em</span> <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">1em</span> <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>把 label 置空（不能删除，否则 CheckBox 也不见），在 div 前面加个 span 或 lable</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"privacy"</span>&gt;Public&lt;/<span class="keyword">label</span>&gt;</div><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"ui toggle checkbox custom"</span>&gt;</div><div class="line">    &lt;<span class="keyword">input</span> id=<span class="string">"privacy"</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> checked=<span class="string">"checked"</span>&gt;</div><div class="line">    &lt;<span class="keyword">label</span>&gt;&lt;/<span class="keyword">label</span>&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="允许多层弹框"><a href="#允许多层弹框" class="headerlink" title="允许多层弹框"></a>允许多层弹框</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">(<span class="string">".modal"</span>).modal(&#123;<span class="string">'allowMultiple'</span>: <span class="literal">true</span>&#125;)</span></div></pre></td></tr></table></figure>
<h2 id="dropdown-里含-checkbox、searchbox"><a href="#dropdown-里含-checkbox、searchbox" class="headerlink" title="dropdown 里含 checkbox、searchbox"></a>dropdown 里含 checkbox、searchbox</h2><p><a href="https://jsfiddle.net/jp8xj0wk/2/" target="_blank" rel="external">https://jsfiddle.net/jp8xj0wk/2/</a><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$('.ui.dropdown').dropdown(&#123;</div><div class="line">  action: 'nothing'</div><div class="line">&#125;);</div><div class="line">$('.ui.checkbox').checkbox();</div><div class="line"></div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"ui basic right labeled dropdown icon button"</span>&gt;</div><div class="line">  &lt;i <span class="built_in">class</span>=<span class="string">"dropdown icon"</span>&gt;&lt;/i&gt;</div><div class="line">  &lt;span <span class="built_in">class</span>=<span class="string">"ui tiny header"</span>&gt;Filter&lt;/span&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"menu"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"ui icon search input"</span>&gt;</div><div class="line">      &lt;i <span class="built_in">class</span>=<span class="string">"search icon"</span>&gt;&lt;/i&gt;</div><div class="line">      &lt;input type=<span class="string">"text"</span> <span class="built_in">name</span>=<span class="string">"Search"</span> placeholder=<span class="string">"Search&amp;hellip;"</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"scrolling menu"</span>&gt;</div><div class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"ui item checkbox"</span> data-value=<span class="string">"item1"</span>&gt;</div><div class="line">        &lt;input type=<span class="string">"checkbox"</span> <span class="built_in">name</span>=<span class="string">"item1"</span>&gt;</div><div class="line">        &lt;label&gt;First <span class="built_in">item</span>&lt;/label&gt;</div><div class="line">      &lt;/<span class="keyword">div</span>&gt;</div><div class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"ui item checkbox"</span> data-value=<span class="string">"item2"</span>&gt;</div><div class="line">        &lt;input type=<span class="string">"checkbox"</span> <span class="built_in">name</span>=<span class="string">"item2"</span>&gt;</div><div class="line">        &lt;label&gt;Second <span class="built_in">item</span>&lt;/label&gt;</div><div class="line">      &lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<h2 id="设置下拉选择框已选内容，下拉框全选"><a href="#设置下拉选择框已选内容，下拉框全选" class="headerlink" title="设置下拉选择框已选内容，下拉框全选"></a>设置下拉选择框已选内容，下拉框全选</h2><p>在编辑内容页面，需要从后台获取数据，把数据展示在input 里</p>
<p><a href="https://jsfiddle.net/dbr26njq/48/" target="_blank" rel="external">https://jsfiddle.net/dbr26njq/48/</a><br><a href="https://codepen.io/monty5811/pen/xVgrzB" target="_blank" rel="external">https://codepen.io/monty5811/pen/xVgrzB</a></p>
<p>HTML<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"button"</span> <span class="built_in">id</span>=<span class="string">"setValues"</span> value=<span class="string">"Set Values"</span> /&gt;</div><div class="line">&lt;input type=<span class="string">"button"</span> <span class="built_in">id</span>=<span class="string">"clearValues"</span> value=<span class="string">"Clear Values"</span> /&gt;</div><div class="line"></div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"ui fluid selection search dropdown multiple"</span>&gt;</div><div class="line">  &lt;input <span class="built_in">name</span>=<span class="string">"tags"</span> type=<span class="string">"hidden"</span>&gt;</div><div class="line">  </div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"default text"</span>&gt;Select&lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;i <span class="built_in">class</span>=<span class="string">"dropdown icon"</span>&gt;&lt;/i&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"menu"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span> data-value=<span class="string">"1"</span>&gt;Angular&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span> data-value=<span class="string">"2"</span>&gt;CSS&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span> data-value=<span class="string">"3"</span>&gt;JS&lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.ui.dropdown'</span>).dropdown(&#123;</div><div class="line">    <span class="attr">onChange</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value, text, $selectedItem</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(value);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">forceSelection</span>: <span class="literal">false</span>, </div><div class="line">    <span class="attr">selectOnKeydown</span>: <span class="literal">false</span>, </div><div class="line">    <span class="attr">showOnFocus</span>: <span class="literal">false</span>, <span class="comment">// 聚焦时不展开下拉列表</span></div><div class="line">    on: <span class="string">"hover"</span> </div><div class="line">&#125;);</div><div class="line"> </div><div class="line"></div><div class="line"><span class="comment">// 清空</span></div><div class="line">$(<span class="string">'#clearValues'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'.ui.dropdown'</span>).dropdown(<span class="string">"clear"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 全选</span></div><div class="line">$(<span class="string">'#setValues'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'.ui.dropdown'</span>).dropdown(<span class="string">"set selected"</span>, [</div><div class="line">        <span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span></div><div class="line">    ]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>单选下拉框的赋值方法一样：<br><a href="http://jsfiddle.net/0qobkc2x/" target="_blank" rel="external">http://jsfiddle.net/0qobkc2x/</a><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;select id=<span class="string">"test"</span> class=<span class="string">"ui dropdown"</span>&gt;</div><div class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">""</span>&gt;Select an <span class="keyword">option</span>...&lt;/<span class="keyword">option</span>&gt;</div><div class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"A"</span>&gt;AAA&lt;/<span class="keyword">option</span>&gt;</div><div class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"B"</span>&gt;BBB&lt;/<span class="keyword">option</span>&gt;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">$(<span class="string">'#test'</span>).dropdown(<span class="string">'set selected'</span>,<span class="string">'B'</span>);</div></pre></td></tr></table></figure></p>
<h2 id="侧边菜单栏铺满窗口"><a href="#侧边菜单栏铺满窗口" class="headerlink" title="侧边菜单栏铺满窗口"></a>侧边菜单栏铺满窗口</h2><p><a href="https://stackoverflow.com/questions/1575141/make-div-100-height-of-browser-window" target="_blank" rel="external">https://stackoverflow.com/questions/1575141/make-div-100-height-of-browser-window</a><br><code>height:100%</code>无效。除了一些老方法，这里采用用视图单位。</p>
<p>单位：</p>
<ul>
<li>vh：viewport height</li>
<li>vw: viewport width</li>
<li>vmin: viewport minimum length</li>
<li>vmax: viewport maximum length</li>
</ul>
<p>例如 1vh = 1% of the viewport的高度</p>
<p>所以可以这样写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100vh</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以减去头部高度：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">height</span>: calc(<span class="number">100vh</span> - <span class="number">50px</span>);</div></pre></td></tr></table></figure>
<h2 id="与父级同高，等高"><a href="#与父级同高，等高" class="headerlink" title="与父级同高，等高"></a>与父级同高，等高</h2><p>方法一:<br><a href="http://jsfiddle.net/emn13/7FFp3/" target="_blank" rel="external">http://jsfiddle.net/emn13/7FFp3/</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="attribute">display</span>: table; &#125;</div><div class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-tag">div</span> &#123;<span class="attribute">display</span>: table-cell; &#125;</div></pre></td></tr></table></figure></p>
<p>方法二<br><a href="http://jsbin.com/hetunujuma/1/edit?html,css,output" target="_blank" rel="external">http://jsbin.com/hetunujuma/1/edit?html,css,output</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="attribute">display</span>: flex; &#125;</div><div class="line"><span class="selector-class">.parent</span>&gt;<span class="selector-tag">div</span> &#123; <span class="attribute">flex</span>:<span class="number">1</span>; &#125;</div></pre></td></tr></table></figure></p>
<h2 id="checkbox-监听"><a href="#checkbox-监听" class="headerlink" title="checkbox 监听"></a>checkbox 监听</h2><p><a href="https://stackoverflow.com/questions/27702613/semantic-ui-checkbox-onchange-event-not-triggered" target="_blank" rel="external">https://stackoverflow.com/questions/27702613/semantic-ui-checkbox-onchange-event-not-triggered</a><br><a href="http://jsfiddle.net/mktm/xwp1L695/" target="_blank" rel="external">http://jsfiddle.net/mktm/xwp1L695/</a><br><a href="https://github.com/Semantic-Org/Semantic-UI/issues/375" target="_blank" rel="external">https://github.com/Semantic-Org/Semantic-UI/issues/375</a></p>
<p>checkbox 是用 label 的 before 伪装的，，input 是隐藏的，只能根据父级 div 的 checked 属性来判断</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyCheckBox = React.createClass(&#123;</div><div class="line">    <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">checked</span>:<span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">checked</span>: !<span class="keyword">this</span>.state.checked&#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"ui toggle checkbox"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">&#123;this.state.checked&#125;</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="时间、日期控件-date-range-picker"><a href="#时间、日期控件-date-range-picker" class="headerlink" title="时间、日期控件 date range picker"></a>时间、日期控件 date range picker</h2><p>日期范围选择器jQuery：<a href="https://github.com/longbill/jquery-date-range-picker" target="_blank" rel="external">https://github.com/longbill/jquery-date-range-picker</a><br>日期范围选择器jQuery：<a href="https://codecanyon.net/item/calentim-date-time-range-picker/20099228" target="_blank" rel="external">https://codecanyon.net/item/calentim-date-time-range-picker/20099228</a><br>很多功能的选择器React：<a href="https://github.com/react-component/calendar" target="_blank" rel="external">https://github.com/react-component/calendar</a><br>小时范围选择器 <a href="https://codepen.io/fikrimarhan/pen/Pmaooq" target="_blank" rel="external">https://codepen.io/fikrimarhan/pen/Pmaooq</a><br>日期、小时范围选择 <a href="http://jonthornton.github.io/jquery-timepicker/" target="_blank" rel="external">http://jonthornton.github.io/jquery-timepicker/</a><br>小时范围滑块：<a href="https://codepen.io/caseymhunt/pen/kertA" target="_blank" rel="external">https://codepen.io/caseymhunt/pen/kertA</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170928.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Semantic&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React.js" scheme="http://laker.me/blog/categories/React-js/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="React.js" scheme="http://laker.me/blog/tags/React-js/"/>
    
      <category term="Semantic" scheme="http://laker.me/blog/tags/Semantic/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 2 高仿饿了么开发及解注三：star 评分件组</title>
    <link href="http://laker.me/blog/2017/09/08/17_0908_vuejs_eleme_3/"/>
    <id>http://laker.me/blog/2017/09/08/17_0908_vuejs_eleme_3/</id>
    <published>2017-09-08T00:24:00.000Z</published>
    <updated>2017-09-08T03:34:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Vue.js 2 高仿饿了么开发及解注三"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">Laker’s Blog–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p>慕课网早期出了《Vue.js 1 高仿饿了么APP》的课程，本系列文章根据课程，使用 Vue.js 2 版本进行开发，并进行了一步步开发流程记录和详细的代码注解。</p>
<p><a href="https://github.com/ustbhuangyi/vue-sell" target="_blank" rel="external">原作者的代码</a></p>
<p><a href="https://github.com/younglaker/CometLab/tree/vue-eleme" target="_blank" rel="external">我做的含有详细代码注解的版本</a></p>
<h2 id="评分组件"><a href="#评分组件" class="headerlink" title="评分组件"></a>评分组件</h2><p>新建 componet / star / star.vue， 评分星级的图片放入。</p>
<p>评分星级的星星的切图分为无星、半星、全星三种图案，各有2x、3x两种尺寸，通过三种图案组合拼凑成多种评分星数。一个星星用一个 <code>&lt;span&gt;</code> 装载，以背景的形式展现。</p>
<p><strong>star.vue</strong> CSS</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">"../../common/stylus/mixin.styl"</span></div><div class="line"></div><div class="line"><span class="selector-class">.star</span></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0</span></div><div class="line">  <span class="selector-class">.star-item</span></div><div class="line">    <span class="attribute">display</span>: inline-block</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat</div><div class="line">  <span class="comment">// star-xx 不同尺寸的星星</span></div><div class="line">  &amp;<span class="selector-class">.star-48</span></div><div class="line">    <span class="selector-class">.star-item</span></div><div class="line">      <span class="attribute">width</span>: <span class="number">20px</span></div><div class="line">      <span class="attribute">height</span>: <span class="number">20px</span></div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">22px</span></div><div class="line">      <span class="attribute">background-size</span>: <span class="number">20px</span> <span class="number">20px</span></div><div class="line">      &amp;:last-child</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">0</span> // 最后 一个星星没有margin-right</div><div class="line">      &amp;<span class="selector-class">.on</span></div><div class="line">        <span class="comment">// mixin.styl 里定义的 bg-image() </span></div><div class="line">        bg-image(<span class="string">'star48_on'</span>) <span class="comment">// 全星</span></div><div class="line">      &amp;<span class="selector-class">.half</span></div><div class="line">        bg-image(<span class="string">'star48_half'</span>)  <span class="comment">// 半星</span></div><div class="line">      &amp;<span class="selector-class">.off</span></div><div class="line">        bg-image(<span class="string">'star48_off'</span>)  <span class="comment">// 无星</span></div><div class="line">  &amp;<span class="selector-class">.star-36</span></div><div class="line">    <span class="selector-class">.star-item</span></div><div class="line">      <span class="attribute">width</span>: <span class="number">15px</span></div><div class="line">      <span class="attribute">height</span>: <span class="number">15px</span></div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">6px</span></div><div class="line">      <span class="attribute">background-size</span>: <span class="number">15px</span> <span class="number">15px</span></div><div class="line">      &amp;:last-child</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">0</span></div><div class="line">      &amp;<span class="selector-class">.on</span></div><div class="line">        bg-image(<span class="string">'star36_on'</span>)</div><div class="line">      &amp;<span class="selector-class">.half</span></div><div class="line">        bg-image(<span class="string">'star36_half'</span>)</div><div class="line">      &amp;<span class="selector-class">.off</span></div><div class="line">        bg-image(<span class="string">'star36_off'</span>)</div><div class="line">  &amp;<span class="selector-class">.star-24</span></div><div class="line">    <span class="selector-class">.star-item</span></div><div class="line">      <span class="attribute">width</span>: <span class="number">10px</span></div><div class="line">      <span class="attribute">height</span>: <span class="number">10px</span></div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">3px</span></div><div class="line">      <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span></div><div class="line">      &amp;:last-child</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">0</span></div><div class="line">      &amp;<span class="selector-class">.on</span></div><div class="line">        bg-image(<span class="string">'star24_on'</span>)</div><div class="line">      &amp;<span class="selector-class">.half</span></div><div class="line">        bg-image(<span class="string">'star24_half'</span>)</div><div class="line">      &amp;<span class="selector-class">.off</span></div><div class="line">        bg-image(<span class="string">'star24_off'</span>)</div></pre></td></tr></table></figure>
<p><strong>star.vue</strong> HTML<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 循环填充星星状态的class --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"star"</span> <span class="attr">:class</span>=<span class="string">"starType"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- v-for：循环获取 itemClasses() 返回的数组 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- :class="itemClass" 把获取的class加给span --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(itemClass,index) in itemClasses"</span> <span class="attr">:class</span>=<span class="string">"itemClass"</span> <span class="attr">class</span>=<span class="string">"star-item"</span> <span class="attr">key</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>star.vue</strong> JavaScript<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// const 定义常量</span></div><div class="line"><span class="keyword">const</span> LENGTH = <span class="number">5</span>   <span class="comment">// 星星个数</span></div><div class="line"><span class="keyword">const</span> CLS_ON = <span class="string">'on'</span>   <span class="comment">// 星星的三种状态</span></div><div class="line"><span class="keyword">const</span> CLS_HALF = <span class="string">'half'</span></div><div class="line"><span class="keyword">const</span> CLS_OFF = <span class="string">'off'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// 使用组件时传入的参数</span></div><div class="line">  props: &#123;</div><div class="line">    size: &#123;</div><div class="line">      <span class="keyword">type</span>: <span class="built_in">Number</span></div><div class="line">    &#125;,</div><div class="line">    score: &#123;</div><div class="line">      <span class="keyword">type</span>: <span class="built_in">Number</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 计算</span></div><div class="line">  computed: &#123;</div><div class="line">    starType () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'star-'</span> + <span class="keyword">this</span>.size</div><div class="line">    &#125;,</div><div class="line">    itemClasses () &#123;</div><div class="line">      <span class="keyword">let</span> result = []  <span class="comment">// 存放最终结果的数组</span></div><div class="line">      <span class="keyword">let</span> score = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.score * <span class="number">2</span>) / <span class="number">2</span> <span class="comment">// 通过分数算星星个数</span></div><div class="line">      <span class="comment">// 向下取0.5的公式。floor() 执行向下取整</span></div><div class="line">      <span class="comment">// floor(3.3 * 2) / 2 = 3 即 3颗全星+2颗无星</span></div><div class="line">      <span class="comment">// floor(3.6 * 2) / 2 = 3.5 即 3颗全星+1颗半星+1颗无星</span></div><div class="line">      <span class="keyword">let</span> hasDecimal = score % <span class="number">1</span> !== <span class="number">0</span> <span class="comment">// 取余不为0则有半星</span></div><div class="line">      <span class="keyword">let</span> integer = <span class="built_in">Math</span>.floor(score) <span class="comment">// 整数部分</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; integer; i++) &#123; <span class="comment">// 设置全星</span></div><div class="line">        result.push(CLS_ON)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (hasDecimal) &#123;</div><div class="line">        result.push(CLS_HALF)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">while</span> (result.length &lt; LENGTH) &#123; <span class="comment">// 循环，补充无星</span></div><div class="line">        result.push(CLS_OFF)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>header.vue</strong> 引用并注册 star 组件<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Star <span class="keyword">from</span> <span class="string">'components/star/star'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> default &#123;</div><div class="line">  ...</div><div class="line">  components: &#123;</div><div class="line">    Star   <span class="comment">// 注册评分组件</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>header.vue</strong> 使用评分组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"star-wrapper"</span>&gt;</div><div class="line">  <span class="xml"><span class="comment">&lt;!-- 使用 star 组件时，需传入 size、score --&gt;</span></span></div><div class="line">  <span class="comment">&lt;!-- :size 星星大小，组件定义了48、36、24 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- :score 评分，从data.json里来 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">star</span> <span class="attr">:size</span>=<span class="string">"48"</span> <span class="attr">:score</span>=<span class="string">"seller.score"</span>&gt;</span><span class="tag">&lt;/<span class="name">star</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Vue.js 2 高仿饿了么开发及解注三&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 2 高仿饿了么开发及解注二：header 组件</title>
    <link href="http://laker.me/blog/2017/08/08/17_0808_vuejs_eleme_2/"/>
    <id>http://laker.me/blog/2017/08/08/17_0808_vuejs_eleme_2/</id>
    <published>2017-08-08T00:24:00.000Z</published>
    <updated>2017-09-08T03:31:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Vue.js 2 高仿饿了么开发及解注二"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">Laker’s Blog–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p>慕课网早期出了《Vue.js 1 高仿饿了么APP》的课程，本系列文章根据课程，使用 Vue.js 2 版本进行开发，并进行了一步步开发流程记录和详细的代码注解。</p>
<p><a href="https://github.com/ustbhuangyi/vue-sell" target="_blank" rel="external">原作者的代码</a></p>
<p><a href="https://github.com/younglaker/CometLab/tree/vue-eleme" target="_blank" rel="external">我做的含有详细代码注解的版本</a></p>
<h1 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h1><p>处理HTTP请求，<a href="https://github.com/pagekit/vue-resource" target="_blank" rel="external">https://github.com/pagekit/vue-resource</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>cnpm install vue-resource --save
</code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在 <strong>routers/index.js</strong> :</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注入</span></div><div class="line"><span class="keyword">import</span> Resource <span class="keyword">from</span> <span class="string">'vue-resource'</span></div><div class="line"></div><div class="line"><span class="comment">// 注册</span></div><div class="line">Vue.use(Resource)</div></pre></td></tr></table></figure>
<h1 id="编写header内容"><a href="#编写header内容" class="headerlink" title="编写header内容"></a>编写header内容</h1><h2 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h2><p>发起ajax请求<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义一个常量，表示请求返回正常</span></div><div class="line">const RESP_OK = <span class="number">1</span></div><div class="line"></div><div class="line">export <span class="keyword">default</span> &#123;</div><div class="line">  name: <span class="string">'app'</span>,</div><div class="line">  <span class="keyword">data</span>() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      seller: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  created () &#123;</div><div class="line">    <span class="keyword">this</span>.$http.<span class="keyword">get</span>(<span class="string">'/api/seller'</span>).then((response) =&gt; &#123;</div><div class="line">      <span class="comment">// .body 获取 json 数据</span></div><div class="line">      response = response.body</div><div class="line"></div><div class="line">      <span class="comment">// 判断请求是否正常</span></div><div class="line">      <span class="keyword">if</span> (response.status === RESP_OK) &#123;</div><div class="line">        <span class="keyword">this</span>.seller = response.<span class="keyword">data</span></div><div class="line"></div><div class="line">        <span class="comment">// 测试</span></div><div class="line">        console.log(<span class="keyword">this</span>.seller)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口 <code>/api/seller</code> 在之前写的 <code>build/dev-server.js</code> 里定义了状态码和返回的数据</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">apiRoutes</span><span class="selector-class">.get</span>(<span class="string">'/seller'</span>, function (req, res) &#123;</div><div class="line">  <span class="selector-tag">res</span><span class="selector-class">.json</span>(&#123;</div><div class="line">    <span class="attribute">status</span>: <span class="number">1</span>,</div><div class="line">    <span class="attribute">data</span>: seller</div><div class="line">  &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>App.vue :</strong><br>把 Ajax 请求获取的 seller 对象传给 v-header 标签。<br>:seller=”seller” 等同于 v-bind:seller=”seller”<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;v-header <span class="symbol">:seller=<span class="string">"seller"</span>&gt;&lt;/v-header&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="header-vue"><a href="#header-vue" class="headerlink" title="header.vue"></a>header.vue</h2><p>获取 seller 对象<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> &#123;</div><div class="line">  <span class="attribute">props</span>: &#123;</div><div class="line">    seller: &#123;</div><div class="line">      type: Object</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>写好一系列HTML、CSS。<br>注意几个地方：<br>1、在 <strong>common/mixin.styl</strong> 添加根据设备 dpi 使用不同像素的图片作为背景的代码。</p>
<blockquote>
<p>组件使用的图片都放在组件的文件夹里。</p>
</blockquote>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bg-<span class="keyword">image</span>($url)</div><div class="line">  background-<span class="keyword">image</span>: url($url + <span class="string">"@2x.png"</span>)</div><div class="line">  @media (-webkit-<span class="keyword">min</span>-device-pixel-ratio: <span class="number">3</span>),(<span class="keyword">min</span>-device-pixel-ratio: <span class="number">3</span>)</div><div class="line">    background-<span class="keyword">image</span>: url($url + <span class="string">"@3x.png"</span>)</div></pre></td></tr></table></figure>
<p>使用方法 <code>bg-image(&#39;图片名&#39;)</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">bg-image</span><span class="params">(<span class="string">'bulletin'</span>)</span></span></div></pre></td></tr></table></figure>
<p>2、<strong>header.vue</strong> 里引用 mixin.styl<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"../../common/stylus/mixin"</span></div></pre></td></tr></table></figure></p>
<p>3、异步插入的图片地址，要用 vue 的指令 <code>:src</code>。如果用 <code>src</code> 就会在编译的时候渲染，但异步获取图片地址会有延时，导致找不到图片。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">img</span> <span class="attribute">width</span>=<span class="string">"64"</span> height=<span class="string">"64"</span> :src=<span class="string">"seller.avatar"</span>&gt;</div></pre></td></tr></table></figure>
<p>4、多class的处理</p>
<p>在 data.json 里，定义有商家支持的活动</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="string">"supports"</span>: [</div><div class="line">  &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"在线支付满28减5"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"VC无限橙果汁全场8折"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"单人精彩套餐"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="number">3</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"该商家支持发票,请下单写好发票抬头"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="number">4</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"已加入“外卖保”计划,食品安全保障"</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>header.vue  CSS 添加每个活动 icon 的样式<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.icon</span></div><div class="line">  ...</div><div class="line">  &amp;<span class="selector-class">.decrease</span></div><div class="line">    bg-image(<span class="string">'decrease_2'</span>)</div><div class="line">  &amp;<span class="selector-class">.discount</span></div><div class="line">    bg-image(<span class="string">'discount_2'</span>)</div><div class="line">  &amp;<span class="selector-class">.invoice</span></div><div class="line">    bg-image(<span class="string">'invoice_2'</span>)</div><div class="line">  &amp;<span class="selector-class">.special</span></div><div class="line">    bg-image(<span class="string">'special_2'</span>)</div><div class="line">  &amp;<span class="selector-class">.guarantee</span></div><div class="line">    bg-image(<span class="string">'guarantee_2'</span>)</div></pre></td></tr></table></figure></p>
<p>header.vue 创建classMap数组，依次写下对应data.json的supports数字的class<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="built_in">default</span> &#123;</div><div class="line">  ...</div><div class="line">  created() &#123;</div><div class="line">    <span class="keyword">this</span>.classMap = [<span class="string">'decrease'</span>, <span class="string">'discount'</span>, <span class="string">'special'</span>, <span class="string">'invoice'</span>, <span class="string">'guarantee'</span>];</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>icon 标签通过 :class 动态绑定class<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span class=<span class="string">"icon"</span> <span class="symbol">:class=<span class="string">"classMap[seller.supports[0].type]"</span>&gt;&lt;/span&gt;</span></div></pre></td></tr></table></figure></p>
<p>5、用 v-if 判断异步请求完成后再渲染，不使用则会在请求完成前竞选人导致报错，如：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">if</span>=<span class="string">"seller.supports"</span> <span class="built_in">class</span>=<span class="string">"support"</span>&gt;</div></pre></td></tr></table></figure>
<p>6、详细活动弹出层</p>
<p>HTML：</p>
<p>整个详情弹出层，通过指令 v-show 来控制显示隐藏<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> v-show=<span class="string">"detailShow"</span> <span class="built_in">class</span>=<span class="string">"detail"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>显示按钮<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">"seller.supports"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"support-count"</span> <span class="meta">@click</span>=<span class="string">"showDetail"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>关闭按钮<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"detail-close"</span> @click=<span class="string">"hideDetail"</span>&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-close"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>JavaScript：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">export <span class="keyword">default</span> &#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">data</span> () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      detailShow: <span class="literal">false</span> <span class="comment">// 初始化 detailShow</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    <span class="comment">// 显示、隐藏的方法</span></div><div class="line">    showDetail () &#123;</div><div class="line">      <span class="keyword">this</span>.detailShow = <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    hideDetail () &#123;</div><div class="line">      <span class="keyword">this</span>.detailShow = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Vue.js 2 高仿饿了么开发及解注二&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>比特币BTC瑞波币XRP用户领取恒星币XLM Lumen</title>
    <link href="http://laker.me/blog/2017/06/28/17_0628_ripple_lumen/"/>
    <id>http://laker.me/blog/2017/06/28/17_0628_ripple_lumen/</id>
    <published>2017-06-28T00:24:00.000Z</published>
    <updated>2018-08-03T05:19:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170628.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="领取恒星币XLM Lumen"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">Laker’s Blog–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<h2 id="领取步骤"><a href="#领取步骤" class="headerlink" title="领取步骤"></a>领取步骤</h2><p>XLM是恒星币Lumen的简称。</p>
<p>比特币用户领取地址<br><a href="https://www.stellar.org/cn/lumens/bitcoin-lumen-program/" target="_blank" rel="external">https://www.stellar.org/cn/lumens/bitcoin-lumen-program/</a></p>
<p>瑞波币用户领取地址<br><a href="https://www.stellar.org/lumens/ripple-lumen-program/" target="_blank" rel="external">https://www.stellar.org/lumens/ripple-lumen-program/</a></p>
<p>我的比特币钱包地址找不到了，所以只有瑞波币可领，各位大佬自行摸索比特币用户的领取吧。。</p>
<p><strong>瑞波比领取资格：瑞波钱包在2014年5月22前存在，并有余额</strong></p>
<p>感觉这个是程序员的一大福利。几年前Github的用户可以免费领取好像2K个吧，现在Ripple市值2-3元之间，算是一笔横财。不过当时我年轻不懂事，以为是诈骗邮件，没有领，后来自己了解了Ripple，后悔莫及，自己花钱买了一点，幻想着能像BTC一样。虽然现在也涨不上去，不过比我之前买的价位也是翻了几番，也心满意足了。本次赠送活动2014年5月22前存在，也就是说在Github发放时领取的钱包是有效范围！！</p>
<p>本次赠送的数目是按照2017年6月26日的快照显示的数目按比例赠送，所以现在充值没有用了，具体比例见后文的新闻摘抄。</p>
<p>前段时间随着比特币勒索病毒，大多虚拟币大涨，乘机清空了Ripple。但是由于Gatehub要求账户最低保留25个币，当时还很痛恨这个规定，现在看来，反而符合了赠币的要求。想起一个故事，一切都是最好的安排。</p>
<p>废话有点多，开始正文：</p>
<p>点击链接后，用FB账号登录，验证你的地区，因为美国地区法律受限制 ，此次活动不送给美国部分地区的人（手动开心）</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170628155223.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="验证地区"></p>
<p>通过验证后，如果已经有恒星的钱包，就在下面表单输入自己的恒星和瑞波的钱包。<br>如果没有恒星的钱包，点击上面的<code>Create Sellar Account</code> 创建一个，下个页面里会帮你创建一个恒星钱包，你自己填写你的瑞波钱包。<br>进入下一步。</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170628155259.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="输入自己的 Ripple 钱包"></p>
<p>（我这里是新建钱包的页面，不知道已有钱包是不是也这样）<br>出现一个交易要求，意思是你要从你的Ripple钱包发送一些钱和编号给恒星币机构的钱包，他们再打恒星币给你的恒星钱包。</p>
<ul>
<li>Destination Address：恒星币机构的钱包，打ripple币给他们</li>
<li>Destination Tag：你的编号</li>
<li>Amount：要打给他们的Ripple个数</li>
</ul>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170628155359.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="交易要求"></p>
<p>到你的钱包里打钱。我用的Gatehub。</p>
<p><img src="http://77g54f.com1.z0.glb.clouddn.com/QQ20170628161859.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="打钱"></p>
<p><a href="https://www.stellar.org/cn/?noredirect=zh" target="_blank" rel="external">登录你的恒星钱包</a>，输入密钥登录，进入后会显示你的恒星币数目。<br>（现在活动刚开始一两天，兑换的人比较多，获取币会有延时，等十几分钟）</p>
<p>目前恒星币大约2毛一个，以后能不能财富自由就看它了，想想就开心（手动滑稽）</p>
<h2 id="区块链铅笔Blockchain相关新闻"><a href="#区块链铅笔Blockchain相关新闻" class="headerlink" title="区块链铅笔Blockchain相关新闻"></a><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTg1MjE0Ng==&amp;mid=2649776959&amp;idx=2&amp;sn=ed84f281d3540c2ed995349acbe1e069&amp;chksm=876ef322b0197a34667e328037b47d5251634c831653bde2c4c7a10f3b6b5871358a9cebf11b&amp;mpshare=1&amp;scene=23&amp;srcid=03291VbSU78Tbfnem3YSYXTP#rd" target="_blank" rel="external">区块链铅笔Blockchain相关新闻</a></h2><p>Brian, March 28, 2017</p>
<p>去年10月，我们完成了向比特币持有人分发lumen币计划的第一步，而这一步只是Stellar.org承诺的一部分。Stellar.org承诺为比特币持有人预留lumen币初始供应量的19%，共计190亿lumen币。</p>
<p>今日，我们宣布在下一步计划中，将为比特币持有人分发共计160亿lumen币，即占lumen初始供应总量的16%。2017年6月27日，只要比特币持有人想要领取lumen币，我们便会向其分发，包括在第一轮赠送过程中获得lumen币的持有人。</p>
<p>如果你刚刚才听说这个消息，你可能会问我们为什么要这样做？在我们最初设计Stellar时，就深受比特币的启发。比特币网络是第一个证实一组相互不信任的各方可以迅速达成通用数据库的案例，直到现在比特币社区仍然在影响着我们对比特币区块链技术的理解。</p>
<h3 id="如何运作？"><a href="#如何运作？" class="headerlink" title="如何运作？"></a>如何运作？</h3><p>2017年6月26日：我们将对6月26日（UTC / GMT）挖矿的第一个区块并带有时间戳的所在区块链生成快照。该快照将记录当时所有比特币帐户的货币余额。</p>
<p>2017年6月27日：我们将发布领取页面，请比特币持有人验证他们是否管理着给定的比特币地址。接着，我们将把该地址的lumen币份额发送到持有人提供的Stellar账户。</p>
<p>为了解赠送lumen币的计算方式，我们以Rachel为例：</p>
<p>截至快照生成时<br>共计仍存有16,215,950个比特币<br>Rachel拥有10个比特币<br>Rachel能够申请<br>16,000,000,000 * (10/16,215,950) = 9,866.83个lumen币</p>
<p>计算结果</p>
<p>快照生成时，Rachel拥有的比特币占现存比特币总量的0.00006167％。</p>
<p>因此，她的9,866.83 个lumen币等同于赠送lumen币总量的0.00006167％。</p>
<p>2017年8月27日：bitcoin-lumen计划即宣告结束。若仍有lumen币无人认领，这些lumen币将转入Stellar.org的运营基金以及Build Challenge中。</p>
<p>由于受到监管限制，该计划不向美国纽约州、佐治亚州、新罕布什尔州、康涅狄格州以及伊朗、古巴、朝鲜以及受美国制裁的其他国家居民开放。但这些限制会随监管状况的变化而变化。</p>
<p>Stellar.org的成员及董事会成员均不会参与bitcoin-lumen计划，亦不会从中领取任何lumen币。</p>
<h3 id="领取lumen币：个人"><a href="#领取lumen币：个人" class="headerlink" title="领取lumen币：个人"></a>领取lumen币：个人</h3><p>6月27日：我们将提供领取页面的链接，通过该链接引导您完成简单的领取流程。</p>
<p>参与交易平台（若有其他交易平台与我们取得联系，我们会更新此列表）：</p>
<ul>
<li>Kraken</li>
<li>BTC38</li>
<li>Poloniex</li>
</ul>
<p>接下来的内容可能会有些令人感到麻烦。</p>
<p>如果您并未使用任何交易平台，按照法律要求，我们需要确保您不列于美国制裁名单中，或者位于上述任何受限制的司法管辖区。目前，我们正使用Facebook帐户验证对此进行查验。</p>
<p>我们知道这种感觉很糟糕。但隐私一直以来都是比特币生态系统最受关注的问题。 Stellar.org不会将您的Facebook数据用于任何其他目的，亦绝不会发布您的帐户。如果您不想分享您的Facebook信息，您仍然可以通过参与交易平台参与此次活动。</p>
<h3 id="领取lumen币：交易平台及企业"><a href="#领取lumen币：交易平台及企业" class="headerlink" title="领取lumen币：交易平台及企业"></a>领取lumen币：交易平台及企业</h3><p>6月27日之前：如果您是交易平台或其他为客户提供比特币池的企业，请通过您的企业电子邮件向bitcoin@stellar.org发送邮件。邮件内容请包含您的热钱包比特币地址，我们会确保将赠送给该地址的lumen币仅发送给您。</p>
<p>收到lumen币后，我们鼓励您按比例向每位客户分发。如有任何疑问或欲商讨任何其他方式，请发送邮件至bitcoin@stellar.org。</p>
<h3 id="领取lumen币：瑞波币（XRP）持有人"><a href="#领取lumen币：瑞波币（XRP）持有人" class="headerlink" title="领取lumen币：瑞波币（XRP）持有人"></a>领取lumen币：瑞波币（XRP）持有人</h3><p>6月27日：我们将提供领取页面的链接，通过该链接引导您完成简单的领取流程。</p>
<p>除了向比特币持有人分发lumen币外，我们还为XRP持有人预留了初始lumen币供应量的1％（10亿）。对于XRP，我们简要记录了ripple分类帐本6,762,000（2014年5月22日发生的分类帐）。任何ripple账户持有人在其账户中拥有少于750万XRP（当时为$ 50,000美元）均有资格获得赠币。每个具备资格的XRP持有人可以通过如下方式参与活动：</p>
<p>按比例：与比特币持有人类似，具备资格的XRP持有人会按比例收到此次赠送的币额（1％），并被记入高达150万XRP。</p>
<p>捐赠：符合条件的XRP持有人也可以将高达150万XRP捐赠给一系列精选慈善机构，并获得等量lumen币作为回报。</p>
<h3 id="Stellar与比特币和其他网络相比如何？"><a href="#Stellar与比特币和其他网络相比如何？" class="headerlink" title="Stellar与比特币和其他网络相比如何？"></a>Stellar与比特币和其他网络相比如何？</h3><p>Stellar网络深受比特币启发——我们从中吸取教训，并增加了在计算能力较低的环境中容忍非理性行为者的能力。</p>
<p>Stellar与比特币之间的其他一些主要的区别在于：</p>
<p>在比特币中，用来确认交易的节点负责挖掘比特币，并且随着时间的推移向矿工分发货币。Stellar网络中不存在挖矿：在网络启动时会自动创建1000亿lumen币。其中95％的lumen币可向全世界提供。</p>
<p>Stellar采用全新的共识算法，即使用联合拜占庭协议的恒星共识协议（SCP）。Stellar网络中的交易在几秒钟内便可得到确认，而且确认节点使用的计算资源也相对较少。</p>
<p>比特币在最初几年暴涨，最终达到近乎固定的供应量，而lumen币的供应量每年以1％的固定比率增长。</p>
<h3 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h3><p>我们相信Stellar网络的以社区为基础的所有权，并希望早期的数字货币爱好者（例如比特币持有人）在Stellar社区感到轻松自在。关于bitcoin-lumen如有任何问题，请随时与我们取得联系：</p>
<p>在slack.stellar.org中加入对话</p>
<p>进入官方Bitcointalk线程</p>
<p>如果您是开发人员，并有兴趣在Stellar网络中搭建应用程序，请浏览我们的文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170628.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;领取恒星币XLM Lumen&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://laker.me/blog/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue.js 2 高仿饿了么开发及解注一：基础准备</title>
    <link href="http://laker.me/blog/2017/06/20/17_0620_vuejs_eleme_1/"/>
    <id>http://laker.me/blog/2017/06/20/17_0620_vuejs_eleme_1/</id>
    <published>2017-06-20T00:24:00.000Z</published>
    <updated>2017-08-08T08:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Vue.js 2 高仿饿了么开发及解注一"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">Laker’s Blog–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<p>慕课网早期出了《Vue.js 1 高仿饿了么APP》的课程，本系列文章根据课程，使用 Vue.js 2 版本进行开发，并进行了一步步开发流程记录和详细的代码注解。</p>
<p><a href="https://github.com/ustbhuangyi/vue-sell" target="_blank" rel="external">原作者的代码</a></p>
<p><a href="https://github.com/younglaker/CometLab/tree/vue-eleme" target="_blank" rel="external">我做的含有详细代码注解的版本</a></p>
<h2 id="安装-Vue-模板"><a href="#安装-Vue-模板" class="headerlink" title="安装 Vue 模板"></a>安装 Vue 模板</h2><p>安装vue-cli<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install --<span class="built_in">global</span> vue-cli</div></pre></td></tr></table></figure></p>
<p>安装好vue-cli后执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> vue init webpack AppName  <span class="comment">#建立一个webpack打包的应用，默认使用最新版vue</span></span></div></pre></td></tr></table></figure>
<p>然后按照提示填写信息：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="string">?</span> <span class="string">Project</span> <span class="string">name</span> <span class="string">sell</span></div><div class="line"><span class="string">?</span> <span class="string">Project</span> <span class="string">description</span> <span class="string">sell</span></div><div class="line"><span class="string">?</span> <span class="string">Author</span> <span class="string">younglaker</span> <span class="string">&lt;younglaker8@gmail.com&gt;</span></div><div class="line"><span class="string">?</span> <span class="string">Vue</span> <span class="string">build</span> <span class="string">standalone</span></div><div class="line"><span class="string">?</span> <span class="string">Install</span> <span class="string">vue-router?</span> <span class="literal">Yes</span></div><div class="line"><span class="string">?</span> <span class="string">Use</span> <span class="string">ESLint</span> <span class="string">to</span> <span class="string">lint</span> <span class="string">your</span> <span class="string">code?</span> <span class="literal">Yes</span></div><div class="line"><span class="string">?</span> <span class="string">Pick</span> <span class="string">an</span> <span class="string">ESLint</span> <span class="string">preset</span> <span class="string">Standard</span>  <span class="comment">#</span></div><div class="line"><span class="string">?</span> <span class="string">Setup</span> <span class="string">unit</span> <span class="string">tests</span> <span class="string">with</span> <span class="string">Karma</span> <span class="string">+</span> <span class="string">Mocha?</span> <span class="literal">No</span>  <span class="comment">#单元测试</span></div><div class="line"><span class="string">?</span> <span class="string">Setup</span> <span class="string">e2e</span> <span class="string">tests</span> <span class="string">with</span> <span class="string">Nightwatch?</span> <span class="literal">No</span></div><div class="line"></div><div class="line">   <span class="string">vue-cli</span> <span class="string">·</span> <span class="string">Generated</span> <span class="string">"sell"</span><span class="string">.</span></div><div class="line"></div><div class="line">   <span class="string">To</span> <span class="string">get</span> <span class="attr">started:</span></div><div class="line"></div><div class="line">     <span class="string">cd</span> <span class="string">sell</span></div><div class="line">     <span class="string">npm</span> <span class="string">install</span></div><div class="line">     <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></div></pre></td></tr></table></figure>
<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p>– build ： webpack配置相关<br>– config ： webpack配置相关<br>– node_modules ： 依赖<br>– src ： 开发目录<br>– static ： 第三方静态资源<br>| – .gitkeep ： 使得如果文件为空也提交到git仓库<br>– babelrc ： babel 配置<br>– .editorconfig ： 编辑器配置。sublime要安装插件EditorConfig<br>– .eslintignore ： 设置忽略语法检查的文件<br>– .eslintrc.js ： eslint 配置。<br>– index.html ： 项目入口<br>– pakage.json ： 配置。<code>script</code>设置执行的命令，<code>npm run dev/start/build</code>即执行相应的脚本。<code>dependencies</code>生产需要的依赖， <code>devDependencies</code>编译过程的依赖，版本号前面有个 <code>^</code> 表示最低版本</p>
<h2 id="EsLint-配置"><a href="#EsLint-配置" class="headerlink" title="EsLint 配置"></a>EsLint 配置</h2><p><code>extends: &#39;standard&#39;</code> 是初始化文件时候选的，可以在<code>&#39;rules&#39;</code>里添加自己的规则（条件名：0 即为不检测此条件）。</p>
<ul>
<li>默认js不能输入分号，想要分号则添加<code>&#39;semi&#39;: [&#39;error&#39;, &#39;always&#39;]</code></li>
<li>忽略缩进报错<code>&#39;indent&#39;： 0</code></li>
<li>不检测 new 实例，在 vue 代码前添加注释 <code>/* eslint-disable no-new */</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* eslint-disable no-new */</span></div><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">Vue</span>(&#123;</div><div class="line">  <span class="attribute">el</span>: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  render: h =&gt; <span class="built_in">h</span>(App)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>查看示例组件<code>App.vue</code>，每个组件包括：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">...</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">...</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="新增目录"><a href="#新增目录" class="headerlink" title="新增目录"></a>新增目录</h2><p><a href="https://github.com/ustbhuangyi/vue-sell/tree/1.0/src/common" target="_blank" rel="external">https://github.com/ustbhuangyi/vue-sell/tree/1.0/src/common</a></p>
<p>把图标SVG上传到 <a href="https://icomoon.io/app/#/select" target="_blank" rel="external">https://icomoon.io/app/#/select</a> 制作 ico fonts 并下载</p>
<ul>
<li>在 src 文件夹下新建文件夹 common， js</li>
<li>common 下新建 fonts, js, stylus</li>
<li>fonts 下把 ico fonts 字体文件放到这</li>
<li>stylus 下把  ico fonts 的 style.css 改成 ico.styl 放到这，把文字路径的 <code>fonts/</code> 改为 <code>../fonts/</code></li>
<li>在 static 文件加入 css/reset.css，并在 index.html 里引用<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/css/reset.css&quot; /&gt;</code></li>
</ul>
<p>安装 stylys：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm[<span class="built_in">or</span> cnpm] install stylus stylus-loader --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<h2 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h2><p>添加 <code>data.json</code> 到根目录：</p>
<p><a href="https://github.com/ustbhuangyi/vue-sell/blob/1.0/data.json" target="_blank" rel="external">https://github.com/ustbhuangyi/vue-sell/blob/1.0/data.json</a></p>
<p><code>dev-server.js</code>，在<code>var app = express()</code> 后面添加（因为用到 express，所以要在起定义后），然后重启服务：<br>（每次修改 data.json、build文件夹、config文件夹下内容时，都要重启服务）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import data.json</span></div><div class="line"><span class="keyword">var</span> appData = <span class="keyword">require</span>(<span class="string">'../data.json'</span>)</div><div class="line"><span class="keyword">var</span> seller = appData.seller</div><div class="line"><span class="keyword">var</span> goods = appData.goods</div><div class="line"><span class="keyword">var</span> ratings = appData.ratings</div><div class="line"></div><div class="line"><span class="keyword">var</span> apiRoutes = express.Router()</div><div class="line"></div><div class="line">apiRoutes.get(<span class="string">'/seller'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</div><div class="line">  res.json(&#123;</div><div class="line">    status: <span class="number">1</span>, <span class="comment">// 定义状态码</span></div><div class="line">    data: seller</div><div class="line">  &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">apiRoutes.get(<span class="string">'/goods'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</div><div class="line">  res.json(&#123;</div><div class="line">    status: <span class="number">1</span>,</div><div class="line">    data: goods</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">apiRoutes.get(<span class="string">'/ratings'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</div><div class="line">  res.json(&#123;</div><div class="line">    status: <span class="number">1</span>,</div><div class="line">    data: ratings</div><div class="line">  &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/api'</span>, apiRoutes)</div></pre></td></tr></table></figure>
<p>调用的方法见下一篇文章关于 App.vue 菜单导航的写法。</p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p><strong>index.html</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;meta <span class="built_in">name</span>=<span class="string">"viewport"</span></div><div class="line">    content=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no"</span>&gt;</div></pre></td></tr></table></figure>
<p><strong>router/index.js</strong></p>
<p>把 Hello 的引入删掉，删除 components: Hello。 header 已经在 App.vue 里引入，这里不用再引入。</p>
<p><strong>App.vue:</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;v-header&gt;&lt;/v-header&gt;</div><div class="line"></div><div class="line"><span class="keyword">import</span> header <span class="keyword">from</span> <span class="string">'./components/header/header.vue'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  name: <span class="string">'app'</span>,</div><div class="line">  components: &#123;</div><div class="line">    <span class="string">'v-header'</span>: header</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;style lang=<span class="string">"stylus"</span>&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p><strong>components/header/header.vue</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="tabs-路由"><a href="#tabs-路由" class="headerlink" title="tabs 路由"></a>tabs 路由</h2><p><strong>App.vue:</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">v-header</span>&gt;</span><span class="tag">&lt;/<span class="name">v-header</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab border-1px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/goods"</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/ratings"</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/seller"</span>&gt;</span>商家<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>build/webpack.base.conf.js</strong> 新增路径别称 （需要重启服务）</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">resolve</span>: &#123;</div><div class="line">  ......</div><div class="line">  alia<span class="variable">s:</span> &#123;</div><div class="line">    <span class="string">'@'</span>: <span class="built_in">resolve</span>(<span class="string">'src'</span>)</div><div class="line">    // 就能用 @/ 表示 src/</div><div class="line">    // 或改为 <span class="string">'src'</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'../src'</span>),</div><div class="line">    <span class="string">'common'</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'../src/common'</span>),</div><div class="line">    <span class="string">'components'</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'../src/components'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>router/index.js</strong> 修改路由配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果没有上一步配置路径别称，就要用 @/components</span></div><div class="line"><span class="keyword">import</span> goods <span class="keyword">from</span> <span class="string">'components/goods/goods'</span></div><div class="line"><span class="keyword">import</span> ratings <span class="keyword">from</span> <span class="string">'components/ratings/ratings'</span></div><div class="line"><span class="keyword">import</span> seller <span class="keyword">from</span> <span class="string">'components/seller/seller'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  <span class="attr">routes</span>: [&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">redirect</span>: <span class="string">'/goods'</span>  <span class="comment">// 重定向,进入就显示goods信息</span></div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/goods'</span>,</div><div class="line">    <span class="attr">component</span>: goods</div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/ratings'</span>,</div><div class="line">    <span class="attr">component</span>: ratings</div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/seller'</span>,</div><div class="line">    <span class="attr">component</span>: seller</div><div class="line">  &#125;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="tabs-选中后高亮"><a href="#tabs-选中后高亮" class="headerlink" title="tabs 选中后高亮"></a>tabs 选中后高亮</h2><p><strong>router/index.js</strong><br>全局配置 <router-link> 的默认『激活 class 类名』<br><a href="http://router.vuejs.org/zh-cn/api/options.html" target="_blank" rel="external">http://router.vuejs.org/zh-cn/api/options.html</a></router-link></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> <span class="selector-tag">new</span> <span class="selector-tag">Router</span>(&#123;</div><div class="line">  <span class="attribute">linkActiveClass</span>: <span class="string">'active'</span>,</div><div class="line"></div><div class="line">  <span class="attribute">routes</span>: [&#123;</div><div class="line">    <span class="attribute">path</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attribute">redirect</span>: <span class="string">'/goods'</span></div><div class="line">  &#125;, &#123;....</div></pre></td></tr></table></figure>
<p>新建 <strong>common/stylus/mixin.styl</strong><br>添加 1px border 的样式，通过传颜色使用。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">border-1px</span><span class="params">(<span class="variable">$color</span>)</span></span></div><div class="line">  <span class="attribute">position</span>: relative</div><div class="line">  &amp;:after</div><div class="line">    <span class="attribute">display</span>: block</div><div class="line">    <span class="attribute">position</span>: absolute</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span></div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span></div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span></div><div class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="variable">$color</span></div><div class="line">    <span class="attribute">content</span>: <span class="string">' '</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">border-none</span><span class="params">()</span></span></div><div class="line">  &amp;:after</div><div class="line">    <span class="attribute">display</span>: none</div></pre></td></tr></table></figure>
<p>新建 <strong>common/stylus/base.styl</strong><br>对 1px border 的样式在不同dpi相应缩放，避免 iphone6 下 1px BUG。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">1.5</span>),(<span class="attribute">min-device-pixel-ratio</span>: <span class="number">1.5</span>)</div><div class="line">  .border-<span class="number">1px</span></div><div class="line">    &amp;::after</div><div class="line">      <span class="attribute">-webkit-transform</span>: scaleY(<span class="number">0.7</span>)</div><div class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.7</span>)</div><div class="line"></div><div class="line"><span class="variable">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>),(<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>)</div><div class="line">  .border-<span class="number">1px</span></div><div class="line">    &amp;::after</div><div class="line">      <span class="attribute">-webkit-transform</span>: scaleY(<span class="number">0.5</span>)</div><div class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>)</div></pre></td></tr></table></figure>
<p>新建 <strong>common/stylus/index.styl</strong><br>引用所有样式</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@import</span> <span class="string">"./mixin"</span></div><div class="line"><span class="variable">@import</span> <span class="string">"./icon"</span></div><div class="line"><span class="variable">@import</span> <span class="string">"./base"</span></div></pre></td></tr></table></figure>
<p><strong>main.js</strong> 里引用</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'common/stylus/index.styl'</span></div></pre></td></tr></table></figure>
<p><strong>App.vue:</strong><br>tab基础样式</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">"./common/stylus/mixin.styl"</span></div><div class="line"></div><div class="line"><span class="selector-class">.tab</span></div><div class="line">  <span class="attribute">display</span>: flex</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">40px</span></div><div class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span></div><div class="line">  <span class="attribute">border</span>-<span class="number">1px</span>(rgba(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">0.1</span>))</div><div class="line">  <span class="selector-class">.tab-item</span></div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span></div><div class="line">    <span class="attribute">text-align</span>: center</div><div class="line">    &amp; &gt; <span class="selector-tag">a</span></div><div class="line">      <span class="attribute">display</span>: block</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span></div><div class="line">      <span class="attribute">color</span>: rgb(<span class="number">77</span>, <span class="number">85</span>, <span class="number">93</span>)</div><div class="line">      &amp;<span class="selector-class">.active</span></div><div class="line">        <span class="attribute">color</span>: rgb(<span class="number">240</span>, <span class="number">20</span>, <span class="number">20</span>)</div></pre></td></tr></table></figure>
<h2 id="在手机上预览"><a href="#在手机上预览" class="headerlink" title="在手机上预览"></a>在手机上预览</h2><p>获取本机ip，例如 192.168.1.2 ， 把 localhost:8080/ 改成 192.168.1.2:8080 ，PC上也可以用这个地址访问。</p>
<p>可以用工具生成二维码，微信扫描访问。确保PC与手机同一局域网下。</p>
<h2 id="一些常见报错"><a href="#一些常见报错" class="headerlink" title="一些常见报错"></a>一些常见报错</h2><table>
<thead>
<tr>
<th style="text-align:left">报错</th>
<th style="text-align:left">原因</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">spaced-commnet</td>
<td style="text-align:left">注释<code>//</code>、<code>/*</code>后面没有空格，<code>*/</code>前面没有空格</td>
</tr>
<tr>
<td style="text-align:left">unkown custom element</td>
<td style="text-align:left">自定义标签没有正确注册</td>
</tr>
<tr>
<td style="text-align:left">indent</td>
<td style="text-align:left">缩进问题</td>
</tr>
<tr>
<td style="text-align:left">space-before-function-paren</td>
<td style="text-align:left">函数名和括号之间没有加空格</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170620.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Vue.js 2 高仿饿了么开发及解注一&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>EasyCanvas：连续画图的一些总结</title>
    <link href="http://laker.me/blog/2017/06/15/17_0615_easy_canvas/"/>
    <id>http://laker.me/blog/2017/06/15/17_0615_easy_canvas/</id>
    <published>2017-06-15T00:24:00.000Z</published>
    <updated>2017-07-18T02:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170615.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Easy Canvas"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">Laker’s Blog–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<hr>
<p>自己造轮子，写一个 Canvas 绘图库 <a href="https://github.com/younglaker/EasyCanvas" target="_blank" rel="external">EasyCanvas</a> ，master 分支上已完成基本图形的绘制。我开始思考如何让这个框架更高效地绘制，接口的设计比实现头痛多了。</p>
<blockquote>
<p>欢迎有兴趣的朋友加入本框架的编写中，或者提供修改建议。V信：lakerHQ</p>
</blockquote>
<h2 id="最初的设计"><a href="#最初的设计" class="headerlink" title="最初的设计"></a>最初的设计</h2><p>目前 master 分支上的版本的配置里的 points 传入坐标，不同的画图功能，points 是不同含义。</p>
<p>例如画线，第一组数组是起始点，后面依次是下一个绘制点，就可以连续画线：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">b</span><span class="selector-class">.line</span>(&#123;</div><div class="line">    <span class="attribute">points</span>: [[<span class="number">10</span>, <span class="number">100</span>], [<span class="number">200</span>, <span class="number">100</span>], [<span class="number">10</span>, <span class="number">200</span>]]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>例如画二次贝塞尔曲线，三组坐标分别是开始点、控制点、结束点：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">b</span><span class="selector-class">.bezier</span>(&#123;</div><div class="line">    <span class="attribute">points</span>: [[<span class="number">20</span>, <span class="number">20</span>],  [<span class="number">200</span>, <span class="number">100</span>], [<span class="number">200</span>, <span class="number">20</span>]]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>例如画矩形，points是矩形左上角坐标，矩形长宽另写：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">b</span><span class="selector-class">.rect</span>(&#123;</div><div class="line">    <span class="attribute">points</span>: [<span class="number">10</span>, <span class="number">50</span>],</div><div class="line">    rectWidth: <span class="number">300</span>,</div><div class="line">    rectHeight: <span class="number">200</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>按目前的设计，除了画直线，连续画图要多次调用同一个方法，如：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">b</span><span class="selector-class">.bezier</span>(&#123;</div><div class="line">    <span class="attribute">points</span>: [[<span class="number">20</span>, <span class="number">20</span>],  [<span class="number">200</span>, <span class="number">100</span>], [<span class="number">200</span>, <span class="number">20</span>]]，</div><div class="line">    color: <span class="string">"#00f"</span>,</div><div class="line">    shadowColor: <span class="string">"#000"</span></div><div class="line">&#125;)<span class="selector-class">.bezier</span>(&#123;</div><div class="line">    <span class="attribute">points</span>: [[<span class="number">10</span>, <span class="number">10</span>],  [<span class="number">100</span>, <span class="number">100</span>], [<span class="number">100</span>, <span class="number">10</span>]]，</div><div class="line">    color: <span class="string">"#00f"</span>,</div><div class="line">    shadowColor: <span class="string">"#000"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上述代码想画两条同样样式的曲线，但是写法过于累赘，并且两条曲线是不相连接。</p>
<ul>
<li>必要的属性分开写，增加代码量。例如画矩形必须提供起始坐标和长宽，把基本值分开书写徒增代码量：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">b</span><span class="selector-class">.rect</span>(&#123;</div><div class="line">    <span class="attribute">points</span>: [<span class="number">10</span>, <span class="number">50</span>],</div><div class="line">    rectWidth: <span class="number">300</span>,</div><div class="line">    rectHeight: <span class="number">200</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="改进方案："><a href="#改进方案：" class="headerlink" title="改进方案："></a>改进方案：</h2><p>目标：</p>
<ul>
<li>只写一次方法就能连续画图</li>
<li>缩减不必要的代码</li>
</ul>
<p>所以把配置的 points 去掉，所有基本配置由 basic 传入。</p>
<p>例如画一条连续的二次贝塞尔曲线，坐标两两成一组，曲线第一笔画的最后一组坐标（200, 10）是二笔画的起始点，这样既节省代码，又避免修改的时候出错：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">b.bezier(&#123;</div><div class="line"><span class="symbol">    shadow:</span> [<span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="string">"#0f0"</span>],</div><div class="line"><span class="symbol">    color:</span> <span class="string">"#0000ff"</span>,</div><div class="line"><span class="symbol">    shadowColor:</span> <span class="string">"#000"</span>,</div><div class="line"><span class="symbol">    basic:</span> [</div><div class="line">            [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">10</span>], <span class="comment">//曲线第一笔画</span></div><div class="line">            [<span class="number">30</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">10</span>] <span class="comment">//曲线第二笔画</span></div><div class="line">           ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>例如画多条的二次贝塞尔曲线：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">b.bezier(&#123;</div><div class="line">    shadow: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="string">"#0f0"</span>],</div><div class="line">    color: <span class="string">"#0000ff"</span>,</div><div class="line">    shadowColor: <span class="string">"#000"</span>,</div><div class="line">    basic: [    //第一条曲线</div><div class="line">            [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">10</span>],</div><div class="line">            [<span class="number">30</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">10</span>]</div><div class="line">           ],</div><div class="line">    basic1: [    //第二条曲线</div><div class="line">            [<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">10</span>],</div><div class="line">            [<span class="number">40</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">10</span>],</div><div class="line">            [<span class="number">50</span>, <span class="number">120</span>, <span class="number">200</span>, <span class="number">60</span>]</div><div class="line">           ],</div><div class="line">    .....</div><div class="line">    basicN: []</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>例如画矩形， basic 的参数依此代码起始点横纵坐标、长宽：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">b</span><span class="selector-class">.rect</span>(&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="string">"#0000ff"</span>,</div><div class="line">    basic: [<span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>]</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="selector-tag">b</span><span class="selector-class">.rect</span>(&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="string">"#0000ff"</span>,</div><div class="line"></div><div class="line">    basic: [<span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>],</div><div class="line">    basic1: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">550</span>, <span class="number">120</span>]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最开始设计的时候，为了表意明确，把坐标、长宽都独立成一个设置值，但是这几个值都是画图最基本的参数，并且参考 CSS 样式、Canva s画图的参数设置方式，也就决定把基本值合并在一个 basic 设置里。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>画曲线部分下一笔画的开始时上一笔画的结束，代码实现方案有两种：</p>
<ul>
<li>把上一笔画的结束点 unshift 到下一笔画的数值最开始</li>
<li>绘制时判断是否第一笔画，进行相应操作</li>
</ul>
<p>我选择了第二种方案，代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *  Draw quadratic curve</div><div class="line"> */</div><div class="line">bezier: function(settings) &#123;</div><div class="line">	<span class="keyword">var</span> opt = _extendDefaults(<span class="keyword">this</span>.defaults, settings);</div><div class="line">	<span class="keyword">var</span> bs = &#123;&#125;;</div><div class="line"></div><div class="line">	_setOpt(<span class="keyword">this</span>.ctx, opt);</div><div class="line"></div><div class="line">	<span class="comment">// 遍历所有设置</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> opt) &#123;</div><div class="line">		<span class="comment">// 把 basic 设置放入 bs</span></div><div class="line">		<span class="keyword">if</span> (!!i.match(/basic/))</div><div class="line">			<span class="comment">// 给 “baisc” 填充成 “baisc0”，方便后续遍历</span></div><div class="line">			bs[!!i.match(/basic\d+/) ? i : i + <span class="string">"0"</span>] = opt[i];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Object.keys(bs).length; i++) &#123;</div><div class="line">		<span class="keyword">var</span> basic = bs[<span class="string">"basic"</span> + i];</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; basic.length; j++) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (j === <span class="number">0</span>) &#123;	<span class="comment">// basic0</span></div><div class="line">				<span class="keyword">this</span>.ctx.moveTo(basic[j][<span class="number">0</span>], basic[j][<span class="number">3</span>]);</div><div class="line">				<span class="keyword">this</span>.ctx.quadraticCurveTo(basic[j][<span class="number">2</span>], basic[j][<span class="number">3</span>], basic[j][<span class="number">4</span>], basic[j][<span class="number">5</span>]);</div><div class="line"></div><div class="line">			&#125; <span class="keyword">else</span> &#123;	<span class="comment">// 其他basic使用上一笔画的结束点作为此笔画的起始点</span></div><div class="line">				<span class="keyword">this</span>.ctx.moveTo(basic[j - <span class="number">1</span>][<span class="number">4</span>], basic[j - <span class="number">1</span>][<span class="number">5</span>]);</div><div class="line">				<span class="keyword">this</span>.ctx.quadraticCurveTo(basic[j][<span class="number">0</span>], basic[j][<span class="number">4</span>], basic[j][<span class="number">2</span>], basic[j][<span class="number">3</span>]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.ctx.fill();</div><div class="line">	<span class="keyword">this</span>.ctx.stroke();</div><div class="line">	<span class="keyword">this</span>.ctx.closePath();</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._renewDefaults();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170615.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Easy Canvas&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://laker.me/blog/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="Canvas" scheme="http://laker.me/blog/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>记一次数据库导入的过程</title>
    <link href="http://laker.me/blog/2017/06/06/17_0606_sql/"/>
    <id>http://laker.me/blog/2017/06/06/17_0606_sql/</id>
    <published>2017-06-06T00:24:00.000Z</published>
    <updated>2017-07-18T02:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170605.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="Title"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">Laker’s Blog–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>系统运行两年，员工信息变动大，但是系统未与HR系统对接，导致本系统人员信息滞后。现需要导入新的员工信息，并为其创建账号。</p>
<h2 id="创建临时表导入最新员工信息"><a href="#创建临时表导入最新员工信息" class="headerlink" title="创建临时表导入最新员工信息"></a>创建临时表导入最新员工信息</h2><p>从HR得到一个最新全司员工信息的 Excel 表格，包含工号、姓名、部门。</p>
<h3 id="导入临时表"><a href="#导入临时表" class="headerlink" title="导入临时表"></a>导入临时表</h3><p>新建临时表 tmp，新建字段（取 employee 表的必填字段即可），按正式的员工数据表的字段设置类型。导入 Excel，选择 Excel 列对应相应字段。</p>
<p>tmp 字段：</p>
<ul>
<li>serial_id：工号</li>
<li>user_name：姓名</li>
<li>dep_name：部门名</li>
<li>dep_id：部门id</li>
<li>employee_id：对应 employee 表的自增序列 sequence</li>
</ul>
<h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p>把 tmp 里已存在于 employee 表里的员工删除</p>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp</div><div class="line"><span class="keyword">where</span> serial_id <span class="keyword">in</span> (</div><div class="line">    <span class="keyword">select</span> serial_id <span class="keyword">from</span> employee</div><div class="line">)</div></pre></td></tr></table></figure>
<p>剩下的就是新增的员工</p>
<h3 id="更新部门id"><a href="#更新部门id" class="headerlink" title="更新部门id"></a>更新部门id</h3><p>Excel 表里只有部门名称，要把 tmp 表里的部门名找到对应的部门id</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">update tmp <span class="selector-tag">a</span></div><div class="line">set <span class="selector-tag">a</span><span class="selector-class">.dep_id</span> = (</div><div class="line">    select <span class="selector-tag">b</span><span class="selector-class">.section_id</span> from sectioninfo <span class="selector-tag">b</span></div><div class="line">    where <span class="selector-tag">a</span><span class="selector-class">.dep_name</span> = <span class="selector-tag">b</span><span class="selector-class">.section_name</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="处理部门数据"><a href="#处理部门数据" class="headerlink" title="处理部门数据"></a>处理部门数据</h3><p>会出现 HR 给的 Excel 表里部门名称与系统对应的名称不一致，导致无法匹配部门id，只能手动修改。</p>
<p>在 SQL developer 里操作不方便，可以把 tmp 数据导出 Excel 表进行操作，手动补充部门id。</p>
<p>清空 tmp 数据，导入新 Excel。</p>
<h3 id="把-tmp-插入-employee"><a href="#把-tmp-插入-employee" class="headerlink" title="把 tmp 插入 employee"></a>把 tmp 插入 employee</h3><p>把 tmp 插入 employee，对应好字段，注意必填字段必须导入或设置自非空定义值（可以参考 employee 里已有的数据格式）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(</div><div class="line">	employee_id,</div><div class="line">	serial_id,</div><div class="line">	user_name,</div><div class="line">	domain_name,</div><div class="line">	created_by</div><div class="line">)</div><div class="line"><span class="keyword">select</span> saaf_employee_s.nextval,</div><div class="line">    # employee 表的 <span class="keyword">sequence</span>，取系一个值。<span class="keyword">sequence</span> 在数据库 &gt; 序列 里查找</div><div class="line">	serial_id,</div><div class="line">	user_name,</div><div class="line">	user_name,</div><div class="line">	<span class="number">-1</span></div><div class="line"><span class="keyword">from</span> tmp</div><div class="line"><span class="keyword">where</span> serial_id <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line">	<span class="keyword">select</span> serial_id <span class="keyword">from</span> employee</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="建立部门和员工的关系"><a href="#建立部门和员工的关系" class="headerlink" title="建立部门和员工的关系"></a>建立部门和员工的关系</h3><p>本系统中，部门和员工关系在 sectioninfo_employee 表里。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sectioninfo_employee(</div><div class="line">		se_id,</div><div class="line">		employee_id,</div><div class="line">		isval,</div><div class="line">		section_id,</div><div class="line">		creation_date)</div><div class="line"><span class="keyword">select</span> sectioninfo_employee_s.nextval,</div><div class="line">	employee_id,</div><div class="line">	<span class="number">1</span>,</div><div class="line">	dep_id,</div><div class="line">	<span class="keyword">to_date</span>(<span class="string">'14-4月-17'</span>,<span class="string">'dd-mon-rr'</span>)</div><div class="line"><span class="keyword">from</span> tmp</div><div class="line"><span class="keyword">where</span> serial_id <span class="keyword">in</span> (</div><div class="line">	<span class="keyword">select</span> serial_id <span class="keyword">from</span> tmp</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="新建账号"><a href="#新建账号" class="headerlink" title="新建账号"></a>新建账号</h3><p>查找 epmloyee 表里工号不在账户表 users 的人员，新建账号</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> saaf_users(</div><div class="line">	user_id,</div><div class="line">	user_name,</div><div class="line">	user_full_name,</div><div class="line">	encrypted_password</div><div class="line">)</div><div class="line"><span class="keyword">select</span> users_s.nextval, # <span class="keyword">users</span> 表的 <span class="keyword">sequence</span></div><div class="line">	serial_id,</div><div class="line">	user_name,</div><div class="line">	<span class="string">'*********'</span>, # 加密密码。从已有的数据里选一个做默认密码</div><div class="line"><span class="keyword">from</span> saaf_employee</div><div class="line"><span class="keyword">where</span> serial_id <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line">	<span class="keyword">select</span> user_name <span class="keyword">from</span> saaf_users</div><div class="line">)</div></pre></td></tr></table></figure>
<p>按理说就能用新账号登录了，但是一直并无法登录。往回查错。</p>
<p>所有的必填字段都已经有相应的值，按道理说应该能运行了。</p>
<p>我就导出 users 表 ，用原有数据和新插入的数据进行对比，发现新插入的数据比旧数据唯一哦的差别在于一个值 <code>start_date_active</code>，生效时间的字段。此字段非必填，但是程序里做了控制，登录时系统要判断账号是否生效，没有生效日期就不能使用。在系统界面里新建是账号的时候默认是 新建当日，而刚刚SQL操作的时候被忽略了。</p>
<p>查找出今日操作的数据，更新生效日期：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> saaf_users</div><div class="line"><span class="keyword">set</span> start_date_active = <span class="keyword">to_date</span>(<span class="string">'14-6月-6'</span>,<span class="string">'dd-mon-rr'</span>)</div><div class="line"><span class="keyword">where</span> creation_date = <span class="keyword">to_date</span>(<span class="string">'14-6月-6'</span>,<span class="string">'dd-mon-rr'</span>)</div></pre></td></tr></table></figure>
<p>完成</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170605.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;Title&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://laker.me/blog/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://laker.me/blog/tags/SQL/"/>
    
      <category term="Oracle" scheme="http://laker.me/blog/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Ionic+Angular 开发移动应用七：打包APK文件</title>
    <link href="http://laker.me/blog/2017/06/04/17_0604_ionic_7/"/>
    <id>http://laker.me/blog/2017/06/04/17_0604_ionic_7/</id>
    <published>2017-06-04T00:24:00.000Z</published>
    <updated>2017-08-08T08:10:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://77g54f.com1.z0.glb.clouddn.com/bgt-20170604.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10" alt="打包APK文件"></p>
<a id="more"></a>
<blockquote>
<p>欢迎交换友链： <a href="http://laker.me/blog">Laker’s Blog–进击的程序媛</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a><br>V信: lakerHQ （请注明‘来自博客’）</p>
</blockquote>
<h2 id="打包正式apk："><a href="#打包正式apk：" class="headerlink" title="打包正式apk："></a>打包正式apk：</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ionic build android -—<span class="built_in">release</span></div><div class="line"><span class="comment">// 不带 —-release 就是测试包</span></div></pre></td></tr></table></figure>
<p>然后会根据<code>config.xml</code>配置生成apk，在<code>root/platforms/android/build/ouputs/apk</code> 里生成<code>android-release-unsigned.apk</code>，这个是未生成签名的apk</p>
<h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -<span class="built_in">alias</span> <span class="built_in">demo</span>.keystore -keyalg RSA -validity <span class="number">40000</span> -keystore <span class="built_in">demo</span>.keystore</div></pre></td></tr></table></figure>
<p>把demo换成你想要的名字</p>
<p>然后设置密码、回答一系列问题</p>
<blockquote>
<p>注意：此demo.keystore证书要保留好，是app打包的唯一凭证，再生成就相当于另一个app</p>
</blockquote>
<h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>官网上的命令我运行了报错，经过查找资料用了这个命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -keystore demo<span class="selector-class">.keystore</span> -signedjar demo_signed<span class="selector-class">.apk</span> android-release-unsigned<span class="selector-class">.apk</span> demo.keystore</div></pre></td></tr></table></figure></p>
<p>替换以下内容</p>
<ul>
<li>demo.keystore：之前生成的keystore</li>
<li>demo_signed.apk：自定义签名后的apk的名字</li>
<li>android-release-unsigned.apk：之前build生成的文件</li>
</ul>
<p>运行结果：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  ....</div><div class="line">  signing: res/xml/config.xml</div><div class="line">  signing: res/xml/provider_paths.xml</div><div class="line">  signing: resources.arsc</div><div class="line">jar <span class="built_in">signed</span>.</div><div class="line"></div><div class="line"><span class="literal">Warning</span>: </div><div class="line">No -tsa <span class="keyword">or</span> -tsacert <span class="keyword">is</span> provided <span class="keyword">and</span> this jar <span class="keyword">is</span> <span class="keyword">not</span> timestamped. Without a timestamp, users may <span class="keyword">not</span> be able <span class="keyword">to</span> validate this jar <span class="keyword">after</span> the signer certificate<span class="symbol">'s</span> expiration date (<span class="number">2126</span>-<span class="number">09</span>-<span class="number">10</span>) <span class="keyword">or</span> <span class="keyword">after</span> any future revocation date.</div></pre></td></tr></table></figure></p>
<p>最后的报错是说没有提供时间戳，不影响。此时已经生成一个签名的apk，可以在手机上安装运行。</p>
<h3 id="常见报错："><a href="#常见报错：" class="headerlink" title="常见报错："></a>常见报错：</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Jar signer, Unable <span class="keyword">to</span> <span class="keyword">open</span> xxx.apk</div></pre></td></tr></table></figure>
<p>keystore和未签名的apk不在一个路径，可以把他们剪切到一个目录下，或者在命令里指明路径，如:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -keystore path/demo<span class="selector-class">.keystore</span> -signedjar path/demo_signed<span class="selector-class">.apk</span> android-release-unsigned<span class="selector-class">.apk</span> demo.keystore</div></pre></td></tr></table></figure>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>安装zipalign<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">zipalign</span> <span class="selector-tag">-v</span> 4 <span class="selector-tag">demo_signed</span><span class="selector-class">.apk</span> <span class="selector-tag">final</span><span class="selector-class">.apk</span></div></pre></td></tr></table></figure></p>
<p>final.apk即最终编译出来的带签名的app，可用于正式发布<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">c     Check alignment only (does <span class="keyword">not</span> modify file)</span></div><div class="line">-<span class="ruby">f     Overwrite existing outfile.zip</span></div><div class="line">-<span class="ruby">p     Page align stored shared object files</span></div><div class="line">-<span class="ruby">v     Verbose output</span></div><div class="line">-<span class="ruby">z     Recompress using Zopfli</span></div></pre></td></tr></table></figure></p>
<p>卸载<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 普通卸载</span></div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">remove</span>  zipalign</div><div class="line"><span class="meta"># 把相关依赖也卸载</span></div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">remove</span> --auto-<span class="keyword">remove</span> zipalign</div><div class="line"><span class="meta"># 把配置和数据也删除</span></div><div class="line">sudo apt-<span class="keyword">get</span> purge zipalign</div><div class="line"><span class="meta"># 把相关依赖、配置、数据卸载</span></div><div class="line">sudo apt-<span class="keyword">get</span> purge --auto-<span class="keyword">remove</span> zipalign</div></pre></td></tr></table></figure></p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>直接将final.apk(可以修改文件名)发布于服务器或第三方平台即可</p>
<p><a href="http://ionicframework.com/docs/guide/publishing.html" target="_blank" rel="external">参考1</a>， <a href="http://rasyid.net/2015/10/02/step-by-step-guide-create-apk-for-your-ionic-framework-project/" target="_blank" rel="external">参考2</a>， <a href="https://gist.github.com/leommoore/b441473ce4fb1a8cee97" target="_blank" rel="external">参考3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://77g54f.com1.z0.glb.clouddn.com/bgt-20170604.png?imageView2/1/q/100|watermark/1/image/aHR0cDovLzc3ZzU0Zi5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS9sYWtlcjEucG5n/dissolve/100/gravity/South/dy/10&quot; alt=&quot;打包APK文件&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://laker.me/blog/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://laker.me/blog/tags/Angular/"/>
    
      <category term="Ionic" scheme="http://laker.me/blog/tags/Ionic/"/>
    
  </entry>
  
</feed>
