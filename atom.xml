<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>进击的程序媛，Laker&#39;s blog</title>
  <subtitle>进击的程序媛，江小湖Laker</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://laker.me/blog/"/>
  <updated>2020-03-11T03:11:03.000Z</updated>
  <id>http://laker.me/blog/</id>
  
  <author>
    <name>Laker Huang</name>
    <email>younglaker8#gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图解 Vuejs 父子组件通信</title>
    <link href="http://laker.me/blog/2020/02/22/20_0224_vue_component/"/>
    <id>http://laker.me/blog/2020/02/22/20_0224_vue_component/</id>
    <published>2020-02-22T00:24:00.000Z</published>
    <updated>2020-03-11T03:11:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过实例图解Vuejs父子组件通信过程</p>
<a id="more"></a>
<p>背景：父组件index.vue 调用 子组件 /components/popup-confirm.vue</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/20022401.jpg" alt=""></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过实例图解Vuejs父子组件通信过程&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>uniapp 构建小程序报错 initAutoImportComponents is not a function</title>
    <link href="http://laker.me/blog/2020/02/22/20_0222_uniapp_error/"/>
    <id>http://laker.me/blog/2020/02/22/20_0222_uniapp_error/</id>
    <published>2020-02-22T00:24:00.000Z</published>
    <updated>2020-03-10T04:38:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用uniapp开发小程序的时候，经常会遇到 initAutoImportComponents is not a function，这个问题很奇怪，团队里不是每个人都会遇到。看网上蛮多开发者遇到了，但是还没有很好的解决方案。</p>
<a id="more"></a>
<p>记录一下我尝试过的方案：</p>
<ul>
<li>删除node_module重新npm i，按照提示执行了 npm audit fix</li>
</ul>
<p>删了很多次，重装未果。害怕是墙的问题，还开了全局也不行。</p>
<ul>
<li>按照网友的建议在所有版本号2.0.0后面加了 -alpha</li>
</ul>
<p><a href="https://ask.dcloud.net.cn/question/87346" target="_blank" rel="external">网友讨论</a><br><a href="https://copyfuture.com/blogs-details/20200303164053977ra97r2nlsa52e4h" target="_blank" rel="external">另一个方案</a><br>都未成功</p>
<ul>
<li>换了个目录重新安装</li>
</ul>
<p>可以运行、编译，但是到了第二天又编译不成功。</p>
<ul>
<li>又换了个目录，重新安装</li>
</ul>
<p>安装的时候发现pakage.json在audit后的版本号里加了个alpha，考虑是不是audit出的问题。然后就不audit，虽然有很多warn，但是总算能执行了</p>
<p>initAutoImportComponents 这个关键词只在uniapp的论坛里出现，应该就是uniapp本身的问题，还不太稳定。而且有时候安装步骤是一样的，但是就不成功，得多删除几次node_module来npm重装。</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用uniapp开发小程序的时候，经常会遇到 initAutoImportComponents is not a function，这个问题很奇怪，团队里不是每个人都会遇到。看网上蛮多开发者遇到了，但是还没有很好的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="HTML5" scheme="http://laker.me/blog/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Flex layout</title>
    <link href="http://laker.me/blog/2020/02/18/20_0218_flex/"/>
    <id>http://laker.me/blog/2020/02/18/20_0218_flex/</id>
    <published>2020-02-18T00:24:00.000Z</published>
    <updated>2020-03-09T13:32:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://flexboxfroggy.com/" target="_blank" rel="external">一个练习flex的小游戏</a></p>
<h2 id="父级元素属性"><a href="#父级元素属性" class="headerlink" title="父级元素属性"></a>父级元素属性</h2><ul>
<li>flex-direction 属性决定主轴的方向（即项目的排列方向）</li>
<li>flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</li>
<li>flex-flow 属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li>
<li>justify-content属性定义了项目在主轴上的对齐方式。</li>
<li>align-items属性定义项目在交叉轴上如何对齐。</li>
<li>align-content定义了多根轴线的对齐方式</li>
</ul>
<a id="more"></a>
<h2 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h2><ul>
<li>order 定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li>
<li>flex-grow定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li>
<li>flex-shrink定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li>
<li>flex-basis定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</li>
<li>flex是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</li>
<li>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2020/20021801.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2020/20021802.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2020/20021803.jpg" alt=""></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://flexboxfroggy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个练习flex的小游戏&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;父级元素属性&quot;&gt;&lt;a href=&quot;#父级元素属性&quot; class=&quot;headerlink&quot; title=&quot;父级元素属性&quot;&gt;&lt;/a&gt;父级元素属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;flex-direction 属性决定主轴的方向（即项目的排列方向）&lt;/li&gt;
&lt;li&gt;flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。&lt;/li&gt;
&lt;li&gt;flex-flow 属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。&lt;/li&gt;
&lt;li&gt;justify-content属性定义了项目在主轴上的对齐方式。&lt;/li&gt;
&lt;li&gt;align-items属性定义项目在交叉轴上如何对齐。&lt;/li&gt;
&lt;li&gt;align-content定义了多根轴线的对齐方式&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS3" scheme="http://laker.me/blog/categories/CSS3/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="CSS3" scheme="http://laker.me/blog/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 349 Intersection of Two Arrays</title>
    <link href="http://laker.me/blog/2020/02/15/20_0215_leetcode349/"/>
    <id>http://laker.me/blog/2020/02/15/20_0215_leetcode349/</id>
    <published>2020-02-15T00:24:00.000Z</published>
    <updated>2020-03-09T12:28:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://leetcode.com/problems/intersection-of-two-arrays/" target="_blank" rel="external">https://leetcode.com/problems/intersection-of-two-arrays/</a></p>
<p>Given two arrays, write a function to compute their intersection.</p>
<a id="more"></a>
<p>Example 1:</p>
<pre><code>Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
</code></pre><p>Example 2:</p>
<pre><code>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
</code></pre><p>Note:</p>
<ul>
<li>Each element in the result must be unique.</li>
<li>The result can be in any order.</li>
</ul>
<h2 id="Solution-1-Hash-Dictionary"><a href="#Solution-1-Hash-Dictionary" class="headerlink" title="Solution 1: Hash(Dictionary)"></a>Solution 1: Hash(Dictionary)</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">self</span>, nums1, nums2)</span></span>:</div><div class="line">        dict1 = &#123;&#125;</div><div class="line">        dict2 = &#123;&#125;</div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="symbol">nums1:</span></div><div class="line">            dict1[i] = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="symbol">nums2:</span></div><div class="line">            dict2[i] = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</div><div class="line"></div><div class="line">            <span class="comment"># has_key has been deprecated in Python 3.0</span></div><div class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> <span class="symbol">dict2:</span></div><div class="line">                result.append(key)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Time: O(n)</li>
<li>Space: O(n+m)</li>
</ul>
<h2 id="Solution-2-Set"><a href="#Solution-2-Set" class="headerlink" title="Solution 2: Set"></a>Solution 2: Set</h2><p>A little tricky in python, we can use <code>set</code>, but the idea is the same as hash table.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Solution:</div><div class="line">    def singleNumber2(self, nums1, nums2):</div><div class="line">        <span class="built_in">set</span>1 = <span class="built_in">set</span>(nums1)</div><div class="line">        <span class="built_in">set</span>2 = <span class="built_in">set</span>(nums2)</div><div class="line">        <span class="built_in">return</span> list(<span class="built_in">set</span>2 &amp; <span class="built_in">set</span>1)</div></pre></td></tr></table></figure>
<ul>
<li>Time complexity : O(n+m) in the average case and O(n×m) in the worst case when load factor is high enough.</li>
<li>Space complexity : O(n+m) in the worst case when all elements in the arrays are different.</li>
</ul>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/intersection-of-two-arrays/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/intersection-of-two-arrays/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="Python" scheme="http://laker.me/blog/tags/Python/"/>
    
      <category term="LeetCode" scheme="http://laker.me/blog/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs style 计算属性 样式绑定 动态属性</title>
    <link href="http://laker.me/blog/2020/02/12/20_0212_vuejs_style/"/>
    <id>http://laker.me/blog/2020/02/12/20_0212_vuejs_style/</id>
    <published>2020-02-12T00:24:00.000Z</published>
    <updated>2020-03-08T09:08:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>动态设置进度条宽度</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/20021201.png" alt="进度条"></p>
<p>文档<br> <a href="https://cn.vuejs.org/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F" target="_blank" rel="external"><a href="https://cn.vuejs.org/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/class-and-style.html#绑定内联样式</a>
</a><br><a href="https://cn.vuejs.org/v2/guide/computed.html" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/computed.html</a></p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>绑定样式<code>:style</code></p>
<p>read_page、total_page是两个参数<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;view class=<span class="string">"filled"</span> <span class="symbol">:style=<span class="string">"&#123; width: read_page / total_page * 100 + '%'&#125;"</span>&gt;&lt;/view&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>注意</p>
<ul>
<li>:style= 的方法countWidth后不能加()</li>
<li>使用 computed ，不是methods</li>
<li>return ‘width: 20%; height: 30px’，不是return {width: 20%; height: 30px  }</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"filled"</span> :style=<span class="string">"countWidth"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div><div class="line"></div><div class="line">  computed: &#123;</div><div class="line">    <span class="attr">countWidth</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'width: 20%; height: 30px'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>参考<br><a href="https://juejin.im/post/5d5b87bc6fb9a06b1417e651" target="_blank" rel="external">https://juejin.im/post/5d5b87bc6fb9a06b1417e651</a><br><a href="https://blog.csdn.net/freedomVenly/article/details/80752215" target="_blank" rel="external">https://blog.csdn.net/freedomVenly/article/details/80752215</a><br><a href="https://segmentfault.com/q/1010000008835283" target="_blank" rel="external">https://segmentfault.com/q/1010000008835283</a></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;动态设置进度条宽度&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://laker.me/blog/categories/Vue-js/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="Vue.js" scheme="http://laker.me/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>简单理解 Restful API</title>
    <link href="http://laker.me/blog/2020/02/02/20_0202_restful/"/>
    <id>http://laker.me/blog/2020/02/02/20_0202_restful/</id>
    <published>2020-02-02T00:24:00.000Z</published>
    <updated>2020-03-08T08:29:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要包含内容"><a href="#主要包含内容" class="headerlink" title="主要包含内容"></a>主要包含内容</h2><a id="more"></a>
<ul>
<li>协议，一般使用HTTPS</li>
<li>域名，<code>https://api.example.com</code></li>
<li>版本（Versioning），<code>https://api.example.com/v1/</code></li>
<li>终点（Endpoint），表示API的具体网址。<code>https://api.example.com/v1/zoos</code></li>
<li>HTTP动词</li>
<li>过滤信息（Filtering）</li>
<li>状态码（Status Codes）</li>
<li>错误处理（Error handling）</li>
<li>返回结果，应该尽量使用JSON</li>
<li>Hypermedia API</li>
</ul>
<h2 id="1-基本要求：面向资源，使用HTTP动词"><a href="#1-基本要求：面向资源，使用HTTP动词" class="headerlink" title="1. 基本要求：面向资源，使用HTTP动词"></a>1. 基本要求：面向资源，使用HTTP动词</h2><p>HTTP动词有下面五个（括号里是对应的SQL命令）</p>
<ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
</ul>
<p>还有两个不常用的HTTP动词。</p>
<ul>
<li>HEAD：获取资源的元数据。</li>
<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET <span class="string">/zoos</span>：列出所有动物园</div><div class="line">POST <span class="string">/zoos</span>：新建一个动物园</div><div class="line">GET <span class="string">/zoos/ID</span>：获取某个指定动物园的信息</div><div class="line">PUT <span class="string">/zoos/ID</span>：更新某个指定动物园的信息（提供该动物园的全部信息）</div><div class="line">PATCH <span class="string">/zoos/ID</span>：更新某个指定动物园的信息（提供该动物园的部分信息）</div><div class="line">DELETE <span class="string">/zoos/ID</span>：删除某个动物园</div><div class="line">GET <span class="string">/zoos/ID/animals</span>：列出某个指定动物园的所有动物</div><div class="line">DELETE <span class="string">/zoos/ID/animals/ID</span>：删除某个指定动物园的指定动物</div></pre></td></tr></table></figure>
<h3 id="过滤信息"><a href="#过滤信息" class="headerlink" title="过滤信息"></a>过滤信息</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">?limit=<span class="number">10</span>：指定返回记录的数量</div><div class="line">?offset=<span class="number">10</span>：指定返回记录的开始位置。</div><div class="line">?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数。</div><div class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</div><div class="line">?animal_type_id=<span class="number">1</span>：指定筛选条件</div></pre></td></tr></table></figure>
<h2 id="2-进阶：Hypermedia-API"><a href="#2-进阶：Hypermedia-API" class="headerlink" title="2.进阶：Hypermedia API"></a>2.进阶：Hypermedia API</h2><p>即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>
<p>例子<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PUST <span class="string">/zoos</span></div></pre></td></tr></table></figure></p>
<p>普通返回<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"zoos"</span>: <span class="string">"abc"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Hypermedia API 返回查找信息的接口：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"zoos"</span>: <span class="string">"abc"</span>,</div><div class="line">  <span class="string">"link"</span>: &#123;</div><div class="line">    <span class="string">"rel"</span>: <span class="string">"infomation"</span>, //rel是relationship的意思</div><div class="line">    <span class="string">"url"</span>: <span class="string">"/zoos/info"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即返回结果中提供链接，连向其他API方法</p>
<p>参考<br><a href="https://zhuanlan.zhihu.com/p/30396391" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/30396391</a><br><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主要包含内容&quot;&gt;&lt;a href=&quot;#主要包含内容&quot; class=&quot;headerlink&quot; title=&quot;主要包含内容&quot;&gt;&lt;/a&gt;主要包含内容&lt;/h2&gt;
    
    </summary>
    
      <category term="Server" scheme="http://laker.me/blog/categories/Server/"/>
    
    
      <category term="Web" scheme="http://laker.me/blog/tags/Web/"/>
    
      <category term="Server" scheme="http://laker.me/blog/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式总结</title>
    <link href="http://laker.me/blog/2020/01/24/20_0124_reg/"/>
    <id>http://laker.me/blog/2020/01/24/20_0124_reg/</id>
    <published>2020-01-24T00:24:00.000Z</published>
    <updated>2020-03-04T03:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p>
<a id="more"></a>
<h2 id="字符含义"><a href="#字符含义" class="headerlink" title="字符含义"></a>字符含义</h2><h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
</tbody>
</table>
<p>#字符类</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>[…]</td>
<td>在括号内的任意字符。要匹配 [，使用 <code>\[</code></td>
</tr>
<tr>
<td>[^…]</td>
<td>不在括号内的任意字符</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，使用 <code>\.</code></td>
</tr>
<tr>
<td>\d</td>
<td>任意一个数字，0~9 中的任意一个，[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字，[^0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>任意一个字母、数字、下划线 ，[a-zA-Z0-9_]</td>
</tr>
<tr>
<td>\W</td>
<td>非字母、数字、下划线 ，[^a-zA-Z0-9_]</td>
</tr>
</tbody>
</table>
<h3 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a>重复字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do”   。等价于 {0,1}</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。等价于 {1,}</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。等价于{0,}</td>
</tr>
</tbody>
</table>
<h3 id="选择、分组、引用"><a href="#选择、分组、引用" class="headerlink" title="选择、分组、引用"></a>选择、分组、引用</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>竖线（因转义问题无法显示）</td>
<td>指明两项之间的一个选择。</td>
</tr>
<tr>
<td>(…)</td>
<td>组合。将几个项目组合为一个单元，并记忆这个组合匹配的字符以供引用</td>
</tr>
<tr>
<td>(?…)</td>
<td>只组合。将几个项目组合为一个单元，但不记忆这个组合匹配的字符</td>
</tr>
<tr>
<td>\数字</td>
<td>和第几个分组第一次匹配的字符相匹配</td>
</tr>
</tbody>
</table>
<h3 id="锚点字符"><a href="#锚点字符" class="headerlink" title="锚点字符"></a>锚点字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>在方括号外匹配输入字符串的开始位置 ^[…]，在方括号内表示不接受该方括号表达式中的字符集合[^…]。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结尾位置。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界，即位于\w和\W之间，或\w与字符串开头或结尾处。<code>注意[\b]是匹配退格符backspace</code></td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界，即左右两边都是 “\w” 范围或者左右两边都不是 “\w” 范围时的字符缝隙</td>
</tr>
<tr>
<td>(?=p)</td>
<td>正前向声明，要求接下来的字符都与模式p匹配，但是不包括匹配的那些字符</td>
</tr>
<tr>
<td>(?!p)</td>
<td>反前向声明，要求接下来的字符不与模式p匹配</td>
</tr>
</tbody>
</table>
<h3 id="锚点字符-1"><a href="#锚点字符-1" class="headerlink" title="锚点字符"></a>锚点字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>不区分大小写</td>
</tr>
<tr>
<td>g</td>
<td>全局匹配，找到所有匹配结果，而不是找到第一个就停止</td>
</tr>
<tr>
<td>m</td>
<td>多行匹配</td>
</tr>
</tbody>
</table>
<h2 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h2><p>在修饰匹配次数的特殊符号后再加上一个 “?” 号，则可以使匹配次数不定的表达式尽可能少的匹配，使可匹配可不匹配的表达式，尽可能的 “不匹配”。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul>
<li>/[0-9]{1,2}/  0~99 的两位数</li>
<li>表达式 “bcd”，在匹配字符串 “abcde” 时，匹配结果是：成功；匹配到的内容是：”bcd”；匹配到的位置是：开始于1，结束于4</li>
<li>表达式 “go{2,8}gle” 在匹配 “Ads by goooooogle” 时，匹配的结果是：成功；匹配到的内容是：”goooooogle”；匹配到的位置是：开始于7，结束于17。</li>
<li>表达式 “(go\s*)+” 在匹配 “Let’s go go go!” 时，匹配结果是：成功；匹配到内容是：”go go go”；匹配到的位置是：开始于6，结束于14。</li>
<li>表达式 “^aaa” 在匹配 “xxx aaa xxx” 时，匹配结果是：失败。因为 “^” 要求与字符串开始的地方匹配，因此，只有当 “aaa” 位于字符串的开头的时候，”^aaa” 才能匹配，点击测试 比如：”aaa xxx xxx”。</li>
<li>表达式 “.\b.” 在匹配 “@@@abc” 时，匹配结果是：成功；匹配到的内容是：”@a”；匹配到的位置是：开始于2，结束于4。</li>
</ul>
<h2 id="JavaScript-方法"><a href="#JavaScript-方法" class="headerlink" title="JavaScript 方法"></a>JavaScript 方法</h2><h3 id="str-search-reg"><a href="#str-search-reg" class="headerlink" title="str.search (reg)"></a>str.search (reg)</h3><p>返回第一个匹配的子串的开始字符的位置，没匹配的就返回-1</p>
<h3 id="str-replace-reg-str2"><a href="#str-replace-reg-str2" class="headerlink" title="str.replace (reg, str2)"></a>str.replace (reg, str2)</h3><p>把匹配reg的子串替换成str2</p>
<h3 id="str-match-reg"><a href="#str-match-reg" class="headerlink" title="str.match (reg)"></a>str.match (reg)</h3><p>返回匹配的结果的数组</p>
<h3 id="str-split-reg"><a href="#str-split-reg" class="headerlink" title="str.split(reg)"></a>str.split(reg)</h3><p>返回按正则要求切分字符串的数组</p>
<h3 id="reg-exec-str"><a href="#reg-exec-str" class="headerlink" title="reg.exec(str)"></a>reg.exec(str)</h3><p>与 str.match (reg) 相似，只不过调用的对象和参数相反</p>
<h2 id="reg-test-str"><a href="#reg-test-str" class="headerlink" title="reg.test (str)"></a>reg.test (str)</h2><p>字符串包含正则匹配则返回true</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://laker.me/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://laker.me/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Find the divisors</title>
    <link href="http://laker.me/blog/2020/01/20/20_0120_codewars_find_the_divisors/"/>
    <id>http://laker.me/blog/2020/01/20/20_0120_codewars_find_the_divisors/</id>
    <published>2020-01-20T00:24:00.000Z</published>
    <updated>2020-03-09T12:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/544aed4c4a30184e960010f4/train/javascript" target="_blank" rel="external">https://www.codewars.com/kata/544aed4c4a30184e960010f4/train/javascript</a></p>
<p>Create a function named divisors/Divisors that takes an integer n &gt; 1 and returns an array with all of the integer’s divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string ‘(integer) is prime’</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">divisors<span class="comment">(12)</span>; <span class="comment">// should return [2,3,4,6]</span></div><div class="line">divisors<span class="comment">(25)</span>; <span class="comment">// should return [5]</span></div><div class="line">divisors<span class="comment">(13)</span>; <span class="comment">// should return "13 is prime"</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><h3 id="i-lt-integer-2"><a href="#i-lt-integer-2" class="headerlink" title="i &lt;= integer / 2"></a>i &lt;= integer / 2</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">divisors</span>(<span class="built_in">integer</span>) &#123;</div><div class="line">  <span class="built_in">let</span> arr = []</div><div class="line">  <span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">integer</span> / <span class="number">2</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">integer</span> / i <span class="symbol">%</span> <span class="number">1</span> === <span class="number">0</span>)</div><div class="line">      arr.<span class="built_in">push</span>(i)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">return</span> arr.<span class="built_in">length</span> ? arr : <span class="built_in">integer</span> +<span class="string">" is prime"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="i-lt-Math-sqrt-integer"><a href="#i-lt-Math-sqrt-integer" class="headerlink" title="i &lt; Math.sqrt(integer)"></a>i &lt; Math.sqrt(integer)</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">divisors</span>(<span class="built_in">integer</span>) &#123;</div><div class="line">  <span class="built_in">let</span> arr = []</div><div class="line">  <span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">2</span>; i &lt; Math.<span class="built_in">sqrt</span>(<span class="built_in">integer</span>); i++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">integer</span> / i <span class="symbol">%</span> <span class="number">1</span> === <span class="number">0</span>)</div><div class="line">      arr.<span class="built_in">push</span>(i, <span class="built_in">integer</span> / i)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">return</span> arr.<span class="built_in">length</span> ? arr.<span class="built_in">sort</span>(sortNumber) : <span class="built_in">integer</span> +<span class="string">" is prime"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">function sortNumber(a, b)&#123; // Ascending order</div><div class="line">    <span class="built_in">return</span> a - b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>sort() will change the number into string to sort</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">12</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>,<span class="number">1</span>,<span class="number">110</span>].sort()</div></pre></td></tr></table></figure>
<p>get:</p>
<figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[1, 110, 12, 2, 3, 4, 6, 8]</div><div class="line"></div><div class="line"><span class="attribute">0</span>: 1</div><div class="line"><span class="attribute">1</span>: 110</div><div class="line"><span class="attribute">2</span>: 12</div><div class="line"><span class="attribute">3</span>: 2</div><div class="line"><span class="attribute">4</span>: 3</div><div class="line"><span class="attribute">5</span>: 4</div><div class="line"><span class="attribute">6</span>: 6</div><div class="line"><span class="attribute">7</span>: 8</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/544aed4c4a30184e960010f4/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/544aed4c4a30184e960010f4/train/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a function named divisors/Divisors that takes an integer n &amp;gt; 1 and returns an array with all of the integer’s divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string ‘(integer) is prime’&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Build a pile of Cubes</title>
    <link href="http://laker.me/blog/2020/01/18/20_0118_codewars_build_a_pile_of_cubes/"/>
    <id>http://laker.me/blog/2020/01/18/20_0118_codewars_build_a_pile_of_cubes/</id>
    <published>2020-01-18T00:24:00.000Z</published>
    <updated>2020-03-02T15:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/javascript" target="_blank" rel="external">https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/javascript</a></p>
<p>The parameter of the function findNb (find_nb, find-nb, findNb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">findNb<span class="function"><span class="params">(<span class="number">1071225</span>)</span> --&gt;</span> <span class="number">45</span></div><div class="line">findNb<span class="function"><span class="params">(<span class="number">91716553919377</span>)</span> --&gt;</span> -<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><h3 id="Approach-one"><a href="#Approach-one" class="headerlink" title="Approach one"></a>Approach one</h3><p>To find whether there is a sum equals to m.</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNb</span><span class="params">(m)</span> &#123;</span></div><div class="line">    let <span class="built_in">sum</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> (var i = <span class="number">1</span>; <span class="built_in">sum</span> &lt; m; i++) &#123;</div><div class="line">    	<span class="built_in">sum</span> += i ** <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sum</span> === m ? i - <span class="number">1</span> : <span class="number">-1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Shorten the code, count the sum in for():</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNb</span><span class="params">(m)</span> &#123;</span></div><div class="line">    <span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">1</span>, sum = <span class="number">0</span>; sum &lt; m; sum +=<span class="built_in">i</span> ** <span class="number">3</span>, <span class="built_in">i</span>++);</div><div class="line">    <span class="keyword">return</span> sum == m ? (<span class="built_in">i</span><span class="number">-1</span>) : <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Approach-two"><a href="#Approach-two" class="headerlink" title="Approach two"></a>Approach two</h3><p><code>return m ? -1 : n</code>:</p>
<ul>
<li>m &lt; 0 =&gt; true =&gt; -1</li>
<li>m &gt; 0  =&gt; false =&gt; n</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNb</span><span class="params">(m)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> n = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> (m &gt; <span class="number">0</span>) m -= ++n ** <span class="number">3</span></div><div class="line">  <span class="keyword">return</span> m ? <span class="number">-1</span> : n</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The parameter of the function findNb (find_nb, find-nb, findNb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Find the next perfect square</title>
    <link href="http://laker.me/blog/2020/01/15/20_0115_codewars_Find_the_next_perfect_square/"/>
    <id>http://laker.me/blog/2020/01/15/20_0115_codewars_Find_the_next_perfect_square/</id>
    <published>2020-01-15T00:24:00.000Z</published>
    <updated>2020-03-02T15:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/56269eb78ad2e4ced1000013/javascript" target="_blank" rel="external">https://www.codewars.com/kata/56269eb78ad2e4ced1000013/javascript</a></p>
<p>Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.</p>
<p>If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">indNextSquare(<span class="number">121</span>) --&gt; sqrt(<span class="number">121</span>)=<span class="number">11</span> is <span class="type">integer</span>, (<span class="number">11</span>+<span class="number">1</span>)*(<span class="number">11</span>+<span class="number">1</span>)=<span class="number">144</span> returns <span class="number">144</span></div><div class="line">findNextSquare(<span class="number">625</span>) --&gt; returns <span class="number">676</span></div><div class="line">findNextSquare(<span class="number">114</span>) --&gt; returns <span class="number">-1</span> since <span class="number">114</span> is not a perfect</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h3 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h3><p>The main part is to check whether the Math.sqrt(sq) is integer.</p>
<h3 id="Using-regular-expression"><a href="#Using-regular-expression" class="headerlink" title="Using regular expression:"></a>Using regular expression:</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNextSquare</span>(<span class="params">sq</span>) </span>&#123;</div><div class="line">  <span class="comment">// Return the next square if sq if a perfect square, -1 otherwise</span></div><div class="line">  <span class="keyword">let</span> <span class="built_in">number</span> = <span class="built_in">Math</span>.sqrt(sq)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="regexp">/^[\d]+$/</span>.test(<span class="built_in">number</span>.toString()) ? (<span class="built_in">number</span> + <span class="number">1</span>) ** <span class="number">2</span> : <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="remainder"><a href="#remainder" class="headerlink" title="remainder"></a>remainder</h3><p>Math.sqrt(121)%1 = 0 = false<br>Math.sqrt(122)%1 = 0.045361017187261155 = true</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNextSquare</span>(<span class="params">sq</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(sq)%<span class="number">1</span>? <span class="number">-1</span> : <span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sqrt(sq)+<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Math-round-Math-ceil-Math-floor"><a href="#Math-round-Math-ceil-Math-floor" class="headerlink" title="Math.round, Math.ceil, Math.floor"></a>Math.round, Math.ceil, Math.floor</h3><p>Math.round(1) === 1<br>Math.round(1.1) = 1 != 1.1</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Math.<span class="built_in">round</span>(<span class="built_in">number</span>) === <span class="built_in">number</span>)</div></pre></td></tr></table></figure>
<h3 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger"></a>Number.isInteger</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.isInteger(<span class="built_in">sqrt</span>)</div></pre></td></tr></table></figure>
<h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(<span class="name">parseInt</span>(<span class="name">number</span>) === number)</div></pre></td></tr></table></figure>
<h3 id="Bit-operation"><a href="#Bit-operation" class="headerlink" title="Bit operation"></a>Bit operation</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(<span class="name">parseInt</span>(<span class="name">number</span> | <span class="number">0</span>) === number)</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/56269eb78ad2e4ced1000013/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/56269eb78ad2e4ced1000013/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.&lt;/p&gt;
&lt;p&gt;If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - The Office VI Sabbatical</title>
    <link href="http://laker.me/blog/2020/01/10/20_0110_codewars_The_Office_VI_Sabbatical/"/>
    <id>http://laker.me/blog/2020/01/10/20_0110_codewars_The_Office_VI_Sabbatical/</id>
    <published>2020-01-10T00:24:00.000Z</published>
    <updated>2020-03-02T15:25:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/57fe50d000d05166720000b1/train/javascript" target="_blank" rel="external">https://www.codewars.com/kata/57fe50d000d05166720000b1/train/javascript</a></p>
<p>val=your value to the organisation<br>happ=her happiness level at the time of asking and finally<br>The numbers of letters from ‘sabbatical’ that are present in string ‘x’.</p>
<p>If the sum of the three parameters (as described above) is &gt; 22, return ‘Sabbatical! Boom!’, else return ‘Back to your desk, boy.’. memory?</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Test.assertEquals<span class="comment">(sabb('Can I have a sabbatical?', 5, 5)</span>, <span class="string">'Sabbatical! Boom!'</span>);</div><div class="line">Test.assertEquals<span class="comment">(sabb('Why are you shouting?', 7, 2)</span>, <span class="string">'Back to your desk, boy.'</span>);</div><div class="line">Test.assertEquals<span class="comment">(sabb('What do you mean I cant learn to code??', 8, 9)</span>, <span class="string">'Sabbatical! Boom!'</span>);</div><div class="line">Test.assertEquals<span class="comment">(sabb('Please calm down', 9, 1)</span>, <span class="string">'Back to your desk, boy.'</span>);</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sabb</span><span class="params">(x, val, happ)</span>&#123;</span></div><div class="line">  let <span class="built_in">sum</span> = (x.match(/[sabticl]/ig )|| []).<span class="built_in">length</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(<span class="built_in">sum</span> + val + happ &gt; <span class="number">22</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Sabbatical! Boom!'</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Back to your desk, boy.'</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>x.match(/[sabticl]/ig</code> to select all matched letters into a array. <code>|| []</code> is order to avoid error when there is no matched letter for <code>.length</code>.</p>
<p>Shorten the code to below:</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">sabb</span>(x, val, happ)&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="type">(x.match(/[sabticl]/ig</span> )|| []).length + val + happ &gt; <span class="number">22</span> ? <span class="symbol">'Sabbatical</span>! Boom!' : '<span class="type">Back</span> to your desk, boy.'</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/57fe50d000d05166720000b1/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/57fe50d000d05166720000b1/train/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;val=your value to the organisation&lt;br&gt;happ=her happiness level at the time of asking and finally&lt;br&gt;The numbers of letters from ‘sabbatical’ that are present in string ‘x’.&lt;/p&gt;
&lt;p&gt;If the sum of the three parameters (as described above) is &amp;gt; 22, return ‘Sabbatical! Boom!’, else return ‘Back to your desk, boy.’. memory?&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Vowel Count</title>
    <link href="http://laker.me/blog/2020/01/08/20_0108_codewars_Vowel_Count/"/>
    <id>http://laker.me/blog/2020/01/08/20_0108_codewars_Vowel_Count/</id>
    <published>2020-01-08T00:24:00.000Z</published>
    <updated>2020-03-02T15:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.codewars.com/kata/54ff3102c1bad923760001f3/javascript" target="_blank" rel="external">https://www.codewars.com/kata/54ff3102c1bad923760001f3/javascript</a></p>
<p>Return the number (count) of vowels in the given string.</p>
<p>We will consider a, e, i, o, and u as vowels for this Kata.</p>
<p>The input string will only consist of lower case letters and/or spaces.</p>
<a id="more"></a>
<p>Example :</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Test</span>.assertEquals(getCount(<span class="string">"abracadabra"</span>), <span class="number">5</span>)</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/codewars" target="_blank" rel="external">https://github.com/younglaker/codewars</a></p>
<h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach 1"></a>Approach 1</h3><p>Split the sting into a array, the check each letter:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> vowelsCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> arr = str.split(<span class="string">''</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="keyword">if</span> (arr[i] === <span class="string">'a'</span> || arr[i] === <span class="string">'e'</span> || arr[i] === <span class="string">'i'</span> || arr[i] === <span class="string">'o'</span> || arr[i] === <span class="string">'u'</span>) &#123;</div><div class="line">      vowelsCount+=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> vowelsCount;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach 2"></a>Approach 2</h3><p><code>x.match(/[sabticl]/ig</code> to select all matched letters into a array. <code>|| []</code> is order to avoid error when there is no matched letter for <code>.length</code>.</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">getCount</span>(str) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">(str.match(/[aeiou]/ig)</span> || []).length</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Approach-3"><a href="#Approach-3" class="headerlink" title="Approach 3"></a>Approach 3</h3><p>Delete the letter dosen’t match, then count the length:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[^aeiou]/gi</span>, <span class="string">''</span>).length;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>.</p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/54ff3102c1bad923760001f3/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com/kata/54ff3102c1bad923760001f3/javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Return the number (count) of vowels in the given string.&lt;/p&gt;
&lt;p&gt;We will consider a, e, i, o, and u as vowels for this Kata.&lt;/p&gt;
&lt;p&gt;The input string will only consist of lower case letters and/or spaces.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="CodeWars" scheme="http://laker.me/blog/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>React Learning Record</title>
    <link href="http://laker.me/blog/2019/09/08/19_0908_react_learning/"/>
    <id>http://laker.me/blog/2019/09/08/19_0908_react_learning/</id>
    <published>2019-09-08T00:24:00.000Z</published>
    <updated>2020-02-29T09:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">npm </span>i -g <span class="built_in">create-react-app@1.5.2</span></div><div class="line"><span class="built_in">create-react-app</span> <span class="string">react-app</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Inside that directory, you can run several commands:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">yarn <span class="built_in">start</span></div><div class="line">  Starts <span class="keyword">the</span> development server.</div><div class="line"></div><div class="line">yarn build</div><div class="line">  Bundles <span class="keyword">the</span> app <span class="keyword">into</span> static <span class="built_in">files</span> <span class="keyword">for</span> production.</div><div class="line"></div><div class="line">yarn test</div><div class="line">  Starts <span class="keyword">the</span> test runner.</div><div class="line"></div><div class="line">yarn eject</div><div class="line">  Removes this tool <span class="keyword">and</span> copies build dependencies, configuration <span class="built_in">files</span></div><div class="line">  <span class="keyword">and</span> scripts <span class="keyword">into</span> <span class="keyword">the</span> app <span class="built_in">directory</span>. If you <span class="built_in">do</span> this, you can’t go back!</div></pre></td></tr></table></figure>
<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">npm</span> <span class="selector-tag">i</span> <span class="selector-tag">-s</span> <span class="selector-tag">bootstrap</span>@<span class="keyword">4</span>.<span class="keyword">1</span>.<span class="keyword">1</span></div></pre></td></tr></table></figure>
<p><code>index.js</code></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> 'bootstrap/dist/css/bootstrap.css';</span></div></pre></td></tr></table></figure>
<h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>Add <code>Component/counter.jsx</code> to <code>src</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  render() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>equals:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  render() &#123; &#125;</div><div class="line">&#125;</div><div class="line">export <span class="keyword">default</span> <span class="type">Counter</span>;</div></pre></td></tr></table></figure>
<h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render"></a>ReactDOM.render</h2><p>In <code>index.js</code>, it render th <code>App.js</code></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;App /&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</div></pre></td></tr></table></figure>
<p>can be repalced by this to render Counter.js :</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./components/counter'</span>;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;Counter /&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</div></pre></td></tr></table></figure>
<h2 id="Use-component"><a href="#Use-component" class="headerlink" title="Use component"></a>Use component</h2><p>In <code>App.js</code>,add:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"App"</span>&gt;</span></span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="React-Fragment"><a href="#React-Fragment" class="headerlink" title="React.Fragment"></a>React.Fragment</h2><p>If use <div>, there is a useless element</div></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090801.png" alt=""></p>
<p>If delete <div><br><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090802.png" alt=""></div></p>
<p>Use <code>&lt;React.Fragment&gt;</code> instead:</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090803.png" alt=""></p>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  state = &#123;</div><div class="line">    count: <span class="number">0</span></div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">React</span>.<span class="type">Fragment</span>&gt;</div><div class="line">        &lt;span&gt;&#123;<span class="keyword">this</span>.state.count&#125;&lt;/span&gt;</div><div class="line">      &lt;/<span class="type">React</span>.<span class="type">Fragment</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Function-return-and-expression"><a href="#Function-return-and-expression" class="headerlink" title="Function return and expression"></a>Function return and expression</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">state</span> = &#123;</div><div class="line">  count: <span class="number">0</span></div><div class="line">&#125;;</div><div class="line">render() &#123;</div><div class="line">  return (</div><div class="line">    <span class="variable">&lt;React.Fragment&gt;</span></div><div class="line">      <span class="variable">&lt;div&gt;</span>&#123;this.formatCount()&#125;&lt;/div&gt;</div><div class="line">    &lt;/React.Fragment&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">formatCount() &#123;</div><div class="line">  return this.<span class="keyword">state</span>.count === <span class="number">0</span> ? 'Zero' : this.<span class="keyword">state</span>.count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Eauqls to :</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">formatCount() &#123;</div><div class="line">  const &#123; <span class="keyword">count</span> &#125; = <span class="keyword">this</span>.state;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">count</span> === <span class="number">0</span> ? <span class="string">'Zero'</span> : <span class="keyword">count</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090804.png" alt=""></p>
<p>We can also insert elements and variable:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">formatCount() &#123;</div><div class="line">  <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</div><div class="line">   <span class="keyword">const</span> x = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Zero<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">  <span class="keyword">return</span> count === <span class="number">0</span> ? x : count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Image-src"><a href="#Image-src" class="headerlink" title="Image src"></a>Image src</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">state</span> = &#123;</div><div class="line">  imageUrl: 'https://picsum.photos/<span class="number">200</span>'</div><div class="line">&#125;;</div><div class="line">render() &#123;</div><div class="line">  return (</div><div class="line">    <span class="variable">&lt;React.Fragment&gt;</span></div><div class="line">      <span class="variable">&lt;img src=&#123;this.state.imageUrl&#125; alt="" /&gt;</span></div><div class="line">    &lt;/React.Fragment&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090805.png" alt=""></p>
<h2 id="Use-Bootstrap-CSS"><a href="#Use-Bootstrap-CSS" class="headerlink" title="Use Bootstrap CSS"></a>Use Bootstrap CSS</h2><p>Be sure to use <code>className</code>, not <code>class</code></p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"badge badge-primary m-2"</span>&gt;</span></span><span class="template-variable">&#123;this.formatCount()&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"btn btn-secondary btn-sm"</span>&gt;</span>Increcement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090806.png" alt=""></p>
<h2 id="Inline-CSS"><a href="#Inline-CSS" class="headerlink" title="Inline CSS"></a>Inline CSS</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> <span class="attr">30</span> &#125;&#125; <span class="attr">className</span>=<span class="string">"badge badge-primary m-2"</span>&gt;</span>Zero<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Or:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">aaa = &#123; <span class="attr">fontSize</span>: <span class="number">30</span> &#125;;</div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">this.aaa</span> &#125; <span class="attr">className</span>=<span class="string">"badge badge-primary m-2"</span>&gt;</span>Zero<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090807.png" alt=""></p>
<h2 id="Dynamic-class-name"><a href="#Dynamic-class-name" class="headerlink" title="Dynamic class name"></a>Dynamic class name</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;React.Fragment&gt;</div><div class="line">      &lt;div className=&#123;<span class="keyword">this</span>.getBadgeClasses()&#125;&gt;</div><div class="line">        Zero</div><div class="line">      &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line">getBadgeClasses() &#123;</div><div class="line">  let classes = <span class="string">'badge m-2 badge-'</span>;</div><div class="line">  classes += <span class="keyword">this</span>.state.count === <span class="number">0</span> ? <span class="string">'warning'</span> : <span class="string">'primary'</span>;</div><div class="line">  <span class="keyword">return</span> classes;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090808.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090809.png" alt=""></p>
<h2 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">state</span> = &#123;</div><div class="line">  tags: [<span class="string">'tag1'</span>, <span class="string">'tag2'</span>, <span class="string">'tag3'</span>]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">&lt;ul&gt;</span></div><div class="line">      &#123;this.<span class="keyword">state</span>.tags.map(<span class="keyword">tag</span> =&gt; (</div><div class="line">        <span class="variable">&lt;li&gt;</span>&#123;<span class="keyword">tag</span>&#125;&lt;/li&gt;</div><div class="line">      ))&#125;</div><div class="line"> &lt;/ul&gt;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090810.png" alt=""></p>
<p>Add key:</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">&lt;ul&gt;</span></div><div class="line">    &#123;this.<span class="keyword">state</span>.tags.map(<span class="keyword">tag</span> =&gt; (</div><div class="line">    <span class="variable">&lt;li key=&#123;tag&#125;&gt;</span>&#123;<span class="keyword">tag</span>&#125;&lt;/li&gt;</div><div class="line">    ))&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>or</p>
<blockquote>
<p>It there is more than one parameter, add <code>( )</code></p>
</blockquote>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">&lt;ul&gt;</span></div><div class="line">    &#123;this.<span class="keyword">state</span>.tags.map((<span class="keyword">tag</span>, index) =&gt; (</div><div class="line">    <span class="variable">&lt;li key=&#123;index&#125;&gt;</span>&#123;<span class="keyword">tag</span>&#125;&lt;/li&gt;</div><div class="line">    ))&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090811.png" alt=""></p>
<h2 id="Render-after-if"><a href="#Render-after-if" class="headerlink" title="Render after if"></a>Render after if</h2><blockquote>
<p>If return more one line, add <code>( )</code></p>
</blockquote>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  return (</div><div class="line">    <span class="variable">&lt;React.Fragment&gt;</span></div><div class="line">      &#123;this.renderTags()&#125;</div><div class="line">    &lt;/React.Fragment&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">renderTags() &#123;</div><div class="line">  if (this.<span class="keyword">state</span>.tags.length === <span class="number">0</span>)</div><div class="line">    return <span class="variable">&lt;p&gt;</span>No tasgs&lt;/p&gt;;</div><div class="line"></div><div class="line">  return (</div><div class="line">    <span class="variable">&lt;ul&gt;</span></div><div class="line">      &#123;this.<span class="keyword">state</span>.tags.map((<span class="keyword">tag</span>, index) =&gt; (</div><div class="line">        <span class="variable">&lt;li key=&#123;index&#125;&gt;</span>&#123;<span class="keyword">tag</span>&#125;&lt;/li&gt;</div><div class="line">      ))&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Expression-amp-amp"><a href="#Expression-amp-amp" class="headerlink" title="Expression &amp;&amp;"></a>Expression <code>&amp;&amp;</code></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;React.Fragment&gt;</div><div class="line">      &#123;<span class="keyword">this</span>.renderTags()&#125;</div><div class="line">      &#123;<span class="keyword">this</span>.state.tags.length !== <span class="number">0</span> &amp;&amp; <span class="string">'There are tags'</span>&#125;</div><div class="line">    &lt;/React.Fragment&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090812.png" alt=""></p>
<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p><code>onClick</code>, not <code>onclick</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleIncrement&#125;</span>&gt;</span>Increcement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">handleIncrement(e) &#123;</div><div class="line">  console.log(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Event need to be sent function without parameter</p>
</blockquote>
<p><strong>Right:</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleIncrement&#125;</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Wrong:</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this.handleIncrement ( 1 ) is not a functon</span></div><div class="line">&lt;<span class="selector-tag">button</span> onClick=&#123;this<span class="selector-class">.handleIncrement</span> ( <span class="number">1</span> ) &#125;&gt;</div></pre></td></tr></table></figure>
<p><strong>Right:</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.doHandleIncrecement &#125;&gt;</div><div class="line"><span class="function"></span></div><div class="line">  <span class="title">doHandleIncrecement</span>=<span class="params">()</span>=&gt;&#123;</div><div class="line">    <span class="keyword">this</span>.handleIncrement(&#123;id: <span class="number">1</span>&#125;)</div><div class="line"></div><div class="line">  &#125;</div><div class="line"><span class="function">  <span class="title">handleIncrement</span> = <span class="params">(item)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(item.id);</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p><strong>Right ( recommend ) :</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;button onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.handleIncrement(&#123; id: <span class="number">1</span> &#125;)&#125;&gt;</div><div class="line"></div><div class="line">handleIncrement = <span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(item.id);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="this-constructor"><a href="#this-constructor" class="headerlink" title="this, constructor()"></a>this, constructor()</h2><p>We can’t call <code>this</code> in function:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">handleIncrement() &#123;</div><div class="line">  console.<span class="built_in">log</span>(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090813.png" alt=""></p>
<p>Use <code>constructor()</code> to bind this,</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">constructor</span><span class="params">()</span> <span class="comment">&#123;</span></span></div><div class="line">  super();</div><div class="line">  console.log(this);</div><div class="line">  this.handleIncrement = this.handleIncrement.bind(this);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="title">handleIncrement</span><span class="params">(e)</span> <span class="comment">&#123;</span></div><div class="line">  console.log(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Or use <code>Arrow Function</code></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">handleIncrement</span> = <span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090814.png" alt=""></p>
<h2 id="Updating-state"><a href="#Updating-state" class="headerlink" title="Updating state"></a>Updating state</h2><p><strong>State</strong>: starts with a default value when a Component mounts and then suffers from mutations in time. It is not advisable to store anything in a state that can be derived from props at any point in time</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">handleIncrement = () =&gt; &#123;</div><div class="line">  this.<span class="built_in">set</span>State(&#123; count: this.<span class="keyword">state</span>.count + <span class="number">1</span> &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>this.state.count++</code> dosen’t work</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090815.png" alt=""></p>
<h2 id="Passing-data-to-components"><a href="#Passing-data-to-components" class="headerlink" title="Passing data to components"></a>Passing data to components</h2><p><strong>Props</strong>: (short for properties) are a Component’s configuration. They are received from above and immutable.</p>
<p><code>src/components/counters.jsx</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">Counter</span> from './counter';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counters</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  state = &#123;</div><div class="line">    counInfo: [&#123; id: <span class="number">1</span>, <span class="keyword">val</span>: <span class="number">0</span> &#125;, &#123; id: <span class="number">2</span>, <span class="keyword">val</span>: <span class="number">5</span> &#125;, &#123; id: <span class="number">3</span>, <span class="keyword">val</span>: <span class="number">2</span> &#125;]</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;<span class="keyword">this</span>.state.counInfo.map((item, index) =&gt; (</div><div class="line">          &lt;<span class="type">Counter</span> key=&#123;index&#125; id=&#123;item.id&#125; value=&#123;item.<span class="keyword">val</span>&#125; /&gt;</div><div class="line">        ))&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export <span class="keyword">default</span> <span class="type">Counters</span>;</div></pre></td></tr></table></figure>
<p><code>src/components/counter.jsx</code></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  console.log(<span class="string">'props'</span>, <span class="keyword">this</span>.props);</div><div class="line">  <span class="keyword">return</span> ();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090817.png" alt=""></p>
<p>Use props data in <code>src/components/counter.jsx</code>:<br>Put <code>state</code> in <code>constructor()</code>:</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// passing in props</span></div><div class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(props)</span> <span class="comment">&#123;</span></span></div><div class="line">  super();</div><div class="line"></div><div class="line">  // in constructor(), state need this，props dosen't need this</div><div class="line">  this.state = &#123;</div><div class="line">    count: props.value,</div><div class="line">    tags: ['tag1', 'tag2', 'tag3']</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090817.png" alt=""></p>
<h2 id="Passing-children"><a href="#Passing-children" class="headerlink" title="Passing children"></a>Passing children</h2><p><code>src/components/counters.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="keyword">this</span>.state.counInfo.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">id</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">value</span>=<span class="string">&#123;item.val&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Counter</span>&gt;</span></div><div class="line">))&#125;</div></pre></td></tr></table></figure>
<p><code>src/components/counter.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'props'</span>, <span class="keyword">this</span>.props);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      ...</div><div class="line">      &#123;this.props.children&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090818.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090819.png" alt=""></p>
<h2 id="React-Developer-Tools"><a href="#React-Developer-Tools" class="headerlink" title="React Developer Tools"></a>React Developer Tools</h2><p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090820.png" alt=""></p>
<p>Refresh after installation, you can change the order:</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090829.png" alt=""></p>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090821.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090822.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090823.png" alt=""></p>
<h2 id="Props-VS-State"><a href="#Props-VS-State" class="headerlink" title="Props VS  State"></a>Props VS  State</h2><ul>
<li>props: passing data, can’t be modified</li>
</ul>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090824.png" alt=""></p>
<ul>
<li>state: local, can’t be visited by other components</li>
</ul>
<h2 id="Passing-function"><a href="#Passing-function" class="headerlink" title="Passing function"></a>Passing function</h2><p><code>src/components/counters.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      ..</div><div class="line">        <span class="tag">&lt;<span class="name">Counter</span></span></div><div class="line">          <span class="attr">...</span></div><div class="line">          <span class="attr">onDelete</span>=<span class="string">&#123;this.handleDelete&#125;</span></div><div class="line">        &gt;<span class="tag">&lt;/<span class="name">Counter</span>&gt;</span></div><div class="line">      ..</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">handleDelete = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Handle delete '</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>src/components/counter.jsx</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">button</span> onClick=&#123;this<span class="selector-class">.props</span><span class="selector-class">.onDelete</span>&#125;&gt;Delete&lt;/button&gt;</div></pre></td></tr></table></figure>
<h2 id="filter-（Delete-function）"><a href="#filter-（Delete-function）" class="headerlink" title="filter （Delete function）"></a>filter （Delete function）</h2><p><code>src/components/counter.jsx</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="comment">/*  delete btn */</span>&#125;</div><div class="line">&lt;<span class="selector-tag">button</span></div><div class="line">  onClick=&#123;() =&gt; this<span class="selector-class">.props</span><span class="selector-class">.onDelete</span>(this<span class="selector-class">.props</span><span class="selector-class">.id</span>)&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p><code>src/components/counters.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;Counter</div><div class="line">  ...</div><div class="line">  onDelete=&#123;<span class="keyword">this</span>.handleDelete&#125;</div><div class="line">  id=&#123;item.id&#125;</div><div class="line">&gt;</div><div class="line"></div><div class="line">handleDelete = <span class="function"><span class="params">countId</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> counInfo = <span class="keyword">this</span>.state.counInfo.filter(<span class="function"><span class="params">c</span> =&gt;</span> c.id !== countId);</div><div class="line"></div><div class="line">  <span class="comment">// this.setState(&#123; counInfo: countInfo &#125;);</span></div><div class="line">  <span class="comment">// we can omit the variable when the state parameter name is the same as the variable name</span></div><div class="line">  <span class="keyword">this</span>.setState(&#123; counInfo &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Removing-local-state"><a href="#Removing-local-state" class="headerlink" title="Removing local state"></a>Removing local state</h2><p>The state init only once when the component created, so it can’t update when the props changes</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this.<span class="keyword">state</span> = &#123;</div><div class="line">  count: props.value</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>So, if want use the updating props data, deal the props in original component:</p>
<p><code>src/components/counter.jsx</code>, use props instead of state :</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="comment">/* 增加按钮 */</span>&#125;</div><div class="line">&lt;button</div><div class="line">  onClick=&#123;() =&gt; <span class="keyword">this</span>.props.onIncrece(<span class="keyword">this</span>.props.item)&#125;</div><div class="line">&gt;</div><div class="line">getBadgeClasses() &#123;</div><div class="line">  let classes = <span class="string">'badge m-2 badge-'</span>;</div><div class="line">  classes += <span class="keyword">this</span>.props.item.<span class="keyword">val</span> === <span class="number">0</span> ? <span class="string">'warning'</span> : <span class="string">'primary'</span>;</div><div class="line">  <span class="keyword">return</span> classes;</div><div class="line">&#125;</div><div class="line"></div><div class="line">formatCount() &#123;</div><div class="line">  const count = <span class="keyword">this</span>.props.item.<span class="keyword">val</span>;</div><div class="line">  <span class="keyword">return</span> count == <span class="number">0</span> ? <span class="string">'Zero'</span> : count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>src/components/counters.jsx</code>, do increment in counters.jsx</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">&lt;Counter</span></div><div class="line">  ...</div><div class="line">  onIncrece=&#123;this.handleIncrement&#125;</div><div class="line">&gt;</div><div class="line"></div><div class="line">handleIncrement = item =&gt; &#123;</div><div class="line">  // 拷贝<span class="keyword">state</span>的<span class="keyword">counters</span></div><div class="line">  const countInfo = [...this.<span class="keyword">state</span>.countInfo];</div><div class="line">  const index = countInfo.indexOf(item);</div><div class="line">  countInfo[index] = &#123; ...item &#125;;</div><div class="line">  countInfo[index].val++;</div><div class="line"></div><div class="line">  this.<span class="built_in">set</span>State(&#123; countInfo &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>展开语法(Spread syntax),扩展运算符是三个点（…）。用于取出参数对象的所有可遍历属性，然后拷贝到当前对象之中<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a> &gt; <a href="https://www.cnblogs.com/it-Ren/p/10637904.html" target="_blank" rel="external">https://www.cnblogs.com/it-Ren/p/10637904.html</a> &gt; <img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090825.png" alt=""></p>
</blockquote>
<h2 id="Life-cycle"><a href="#Life-cycle" class="headerlink" title="Life cycle"></a>Life cycle</h2><p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090826.png" alt=""></p>
<p>order: constructor &gt; render &gt; componentDidMount</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090827.png" alt=""></p>
<ul>
<li>componentDidMount: After render, often initial ajax</li>
<li>componentDidUpdate: after component updated, such as state, new props,often write ajax to get new data</li>
<li>componentWillMount: before component removed, such as delete a component</li>
</ul>
<p>Can check <code>prevProps</code> , <code>prevState</code> in <code>componentDidUpdate</code>:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-tag">componentDidUpdate</span>(prevProps, prevState) &#123;</div><div class="line">  <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">'prevProps'</span>, prevProps);</div><div class="line">  <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">'prevState'</span>, prevState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090829.png" alt=""></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;headerlink&quot; title=&quot;Start&quot;&gt;&lt;/a&gt;Start&lt;/h2&gt;&lt;figure class=&quot;highlight dsconfig&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;npm &lt;/span&gt;i -g &lt;span class=&quot;built_in&quot;&gt;create-react-app@1.5.2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;create-react-app&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;react-app&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="React" scheme="http://laker.me/blog/categories/React/"/>
    
    
      <category term="React" scheme="http://laker.me/blog/tags/React/"/>
    
      <category term="React Native" scheme="http://laker.me/blog/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React native 加 android安卓模拟器</title>
    <link href="http://laker.me/blog/2019/09/03/19_0903_react_android/"/>
    <id>http://laker.me/blog/2019/09/03/19_0903_react_android/</id>
    <published>2019-09-03T00:24:00.000Z</published>
    <updated>2020-02-29T09:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://expo.io/learn" target="_blank" rel="external">https://expo.io/learn</a></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g expo-cli</div><div class="line">expo init my-<span class="keyword">new</span>-<span class="keyword">project</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>下载网易 mumu 安卓模拟器<br><a href="https://mumu.163.com/" target="_blank" rel="external">https://mumu.163.com/</a></p>
<p><a href="http://mumu.163.com/2017/12/19/25241_730476.html?type=notice" target="_blank" rel="external">http://mumu.163.com/2017/12/19/25241_730476.html?type=notice</a><br>添加 adb，执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> adb <span class="built_in">kill</span>-server &amp;&amp; adb server &amp;&amp; adb shell</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090301.png" alt=""></p>
<p>查看</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> adb devices</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090302.png" alt=""></p>
<p>开启模拟器 USB 调试模式</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090303.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090304.png" alt=""></p>
<p>开启项目</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> my-new-project</div><div class="line">expo <span class="built_in">start</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090305.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090306.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19090307.png" alt=""></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://expo.io/learn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://expo.io/learn&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -g expo-cli&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;expo init my-&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="React" scheme="http://laker.me/blog/categories/React/"/>
    
    
      <category term="React" scheme="http://laker.me/blog/tags/React/"/>
    
      <category term="React Native" scheme="http://laker.me/blog/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React native web browser</title>
    <link href="http://laker.me/blog/2019/08/30/19_0830_react_native_web_browser/"/>
    <id>http://laker.me/blog/2019/08/30/19_0830_react_native_web_browser/</id>
    <published>2019-08-30T00:24:00.000Z</published>
    <updated>2020-02-29T09:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Method-1-react-native-web"><a href="#Method-1-react-native-web" class="headerlink" title="Method 1: react-native-web"></a>Method 1: react-native-web</h2><p><a href="https://github.com/necolas/react-native-web" target="_blank" rel="external">https://github.com/necolas/react-native-web</a></p>
<p>Android emulator lists:</p>
<a id="more"></a>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emulator -<span class="built_in">list</span>-avds</div></pre></td></tr></table></figure>
<p>Run emulator</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emulator -avd <span class="string">[name]</span></div></pre></td></tr></table></figure>
<p>Installation:</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-web-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure>
<hr>
<h2 id="Method-2-expo-recommanded"><a href="#Method-2-expo-recommanded" class="headerlink" title="Method 2: expo (recommanded)"></a>Method 2: expo (recommanded)</h2><p><a href="https://docs.expo.io/versions/latest/introduction/running-in-the-browser/" target="_blank" rel="external">https://docs.expo.io/versions/latest/introduction/running-in-the-browser/</a></p>
<p>Ensure your project has at least expo@^33.0.0 installed.</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm i -g expo-cli</div><div class="line"></div><div class="line">//<span class="keyword">Add</span><span class="bash"> web dependencies:</span></div><div class="line">$ yarn <span class="keyword">add</span><span class="bash"> react-native-web react-dom</span></div><div class="line"></div><div class="line">$ expo start --web</div></pre></td></tr></table></figure>
<p>Running the expo and copy the homepage url:</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19093001.png" alt="expo"></p>
<p>Or find the url in terminal:</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19093003.png" alt="terminal"></p>
<p>Visit the url :</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/2019/19093002.png" alt="Visit"></p>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Method-1-react-native-web&quot;&gt;&lt;a href=&quot;#Method-1-react-native-web&quot; class=&quot;headerlink&quot; title=&quot;Method 1: react-native-web&quot;&gt;&lt;/a&gt;Method 1: react-native-web&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/necolas/react-native-web&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/necolas/react-native-web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android emulator lists:&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://laker.me/blog/categories/React/"/>
    
    
      <category term="React" scheme="http://laker.me/blog/tags/React/"/>
    
      <category term="React Native" scheme="http://laker.me/blog/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Angular Ionic News App Tutorial for Beginner</title>
    <link href="http://laker.me/blog/2019/08/22/19_0822_ionic_news/"/>
    <id>http://laker.me/blog/2019/08/22/19_0822_ionic_news/</id>
    <published>2019-08-22T00:24:00.000Z</published>
    <updated>2020-02-29T09:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Github repo: <a href="https://github.com/younglaker/CometLab/tree/ionic-news" target="_blank" rel="external">https://github.com/younglaker/CometLab/tree/ionic-news</a></p>
<h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>Start serve</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="tabs"><a href="#tabs" class="headerlink" title="tabs"></a>tabs</h2><p>generate command：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ionic g [<span class="string">type:</span> page<span class="regexp">/component/</span>tabs<span class="regexp">/provider/</span>service/provider]  [names]</div></pre></td></tr></table></figure>
<p>generate page：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ionic g page  <span class="string">[names]</span></div></pre></td></tr></table></figure>
<p>For example, after generating a <code>news</code> page, in <code>src/app/tabs/tabs.module.ts</code>, add:</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NewsPageModule &#125; <span class="keyword">from</span> <span class="string">'../news/news.module'</span>;</div><div class="line"><span class="comment">// [page name] +PageModule</span></div><div class="line"></div><div class="line">@NgModule(&#123;</div><div class="line">  imports: [</div><div class="line">    ...</div><div class="line">    NewsPageModule</div><div class="line">  ],</div></pre></td></tr></table></figure>
<p>In <code>src/app/tabs/tabs.page.html</code>, add:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ion-<span class="keyword">tab</span>-button <span class="keyword">tab</span>=<span class="string">"news"</span>&gt;</div><div class="line">  &lt;ion-icon name=<span class="string">"flash"</span>&gt;&lt;/ion-icon&gt;</div><div class="line">  &lt;ion-<span class="keyword">label</span>&gt;<span class="keyword">Tab</span> <span class="keyword">One</span>&lt;/ion-<span class="keyword">label</span>&gt;</div><div class="line">&lt;/ion-<span class="keyword">tab</span>-button&gt;</div></pre></td></tr></table></figure>
<p>In <code>src/app/tabs/tabs.router.module.ts</code>, add:</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const routes: Routes = [</div><div class="line">  &#123;</div><div class="line">    ...</div><div class="line"><span class="symbol">    children:</span> [</div><div class="line">      &#123;</div><div class="line"><span class="symbol">        path:</span> <span class="string">"news"</span>,</div><div class="line"><span class="symbol">        children:</span> [</div><div class="line">          &#123;</div><div class="line"><span class="symbol">            path:</span> <span class="string">""</span>,</div><div class="line"><span class="symbol">            loadChildren:</span> <span class="string">"../news/news.module#NewsPageModule"</span></div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h2 id="Get-news-list"><a href="#Get-news-list" class="headerlink" title="Get news list"></a>Get news list</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p><a href="https://newsapi.org/" target="_blank" rel="external">https://newsapi.org/</a></p>
<p><code>https://newsapi.org/v2/top-headlines?country=us&amp;category=business&amp;apiKey=</code></p>
<p>Set environment arguments. In <code>src/environments/environment.ts</code>:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;</div><div class="line">  ...</div><div class="line">  apiUrl: <span class="string">"https://newsapi.org/v2/"</span>,</div><div class="line">  apiKey: <span class="string">"c***********"</span></div></pre></td></tr></table></figure>
<p>Create service:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ionic g service news</span></div></pre></td></tr></table></figure>
<p>In <code>/src/app/app.module.ts</code></p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; HttpClientModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</div><div class="line"></div><div class="line">@NgModule(&#123;</div><div class="line">  ...</div><div class="line">  imports: [</div><div class="line">    ...</div><div class="line">    HttpClientModule</div></pre></td></tr></table></figure>
<p>In <code>src/app/news.service.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> API_URL = environment.apiUrl;</div><div class="line"><span class="keyword">const</span> API_KET = environment.apiKey;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> NewsService &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</div><div class="line"></div><div class="line">  getData(url) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">`<span class="subst">$&#123;API_URL&#125;</span>/<span class="subst">$&#123;url&#125;</span>?apiKey=?&#123; API_KEY &#125;`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In <code>src/app/news/news.page.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NewsService &#125; <span class="keyword">from</span> <span class="string">'../news.service'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> NewsPage <span class="keyword">implements</span> OnInit &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> newsService: NewsService</span>) &#123;&#125;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">     <span class="comment">// NewsService from news.service.ts</span></div><div class="line">    <span class="keyword">this</span>.newsService</div><div class="line">      .getData(<span class="string">'top-headlines?country=us&amp;category=business'</span>)</div><div class="line">      .subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/aomine-sama/px/blob/master/2019/19082201.png?raw=true" alt="data"></p>
<h3 id="Display-news"><a href="#Display-news" class="headerlink" title="Display news"></a>Display news</h3><p>In <code>src/app/news/news.page.ts</code> add</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; NewsService &#125; <span class="keyword">from</span> <span class="string">'../news.service'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> NewsPage <span class="keyword">implements</span> OnInit &#123;</div><div class="line">  <span class="comment">// res: store the data from API, type is any</span></div><div class="line">  res: <span class="built_in">any</span>;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">    <span class="keyword">this</span>.newsService</div><div class="line">      .getData(<span class="string">'top-headlines?country=us&amp;category=business'</span>)</div><div class="line">      .subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// console.log(data);</span></div><div class="line">        <span class="keyword">this</span>.res = data;</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In <code>src/app/news/news.page.html</code></p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- Here is a '?',  rendering after getting data--&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">ion-card</span> *<span class="attr">ngFor</span>=<span class="string">"let article of res?.articles"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-card-header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ion-card-subtitle</span>&gt;</span>Card Subtitle<span class="tag">&lt;/<span class="name">ion-card-subtitle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ion-card-title</span>&gt;</span> <span class="template-variable">&#123;&#123; article.title &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">ion-card-title</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">ion-card-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-img</span> [<span class="attr">src</span>]=<span class="string">"article.urlToImage"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-img</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-card-content</span>&gt;</span><span class="template-variable">&#123;&#123; article.description &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">ion-card-content</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">ion-card</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://github.com/aomine-sama/px/blob/master/2019/19082202.png?raw=true" alt="news lists"></p>
<h2 id="Link-to-details"><a href="#Link-to-details" class="headerlink" title="Link to details"></a>Link to details</h2><p><code>src/app/news/news.page.html</code>, bind click event</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ion-card</div><div class="line">    *ngFor=<span class="string">"let article of res?.articles"</span></div><div class="line">    (<span class="name">click</span>)=<span class="string">"goToNewsSingle(article)"</span></div><div class="line">  &gt;</div></pre></td></tr></table></figure>
<p><code>src/app/app-routing.module.ts</code>, it generate routes path when generate the news-single page, we can use it directly:</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const routes: <span class="type">Routes </span>= [</div><div class="line">  ...</div><div class="line">  &#123; path: <span class="type"></span>'<span class="keyword">new</span><span class="type">s</span>-single<span class="string">', loadChildren: '</span>./<span class="keyword">new</span><span class="type">s</span>-single/<span class="keyword">new</span><span class="type">s</span>-single.module<span class="meta">#NewsSinglePageModule' &#125;</span></div><div class="line">];</div></pre></td></tr></table></figure>
<p><code>src/app/news/news.page.ts</code>, define goToNewsSingle() event</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">NewsPage</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">OnInit</span></span> </span>&#123;</div><div class="line">  ...</div><div class="line">  constructor(..., <span class="keyword">private</span> router: <span class="type">Router</span>) &#123;&#125;</div><div class="line"></div><div class="line">  goToNewsSingle(article) &#123;</div><div class="line">    <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sService</span>.currentArticle = article;</div><div class="line">    <span class="built_in">this</span>.router.navigate([<span class="string">'/news-single'</span>]);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>src/app/news-single/news-single.page.ts</code></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">..</div><div class="line"><span class="keyword">import</span> &#123; NewsService &#125; from <span class="string">'../news.service'</span>;</div><div class="line"></div><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">NewsSinglePage</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">OnInit</span></span> </span>&#123;</div><div class="line">  article; <span class="comment">//store the content of current article</span></div><div class="line"></div><div class="line">  constructor(<span class="keyword">private</span> <span class="keyword">new</span><span class="type">sService</span>: NewsService) &#123;&#125;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">    <span class="built_in">this</span>.article = <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sService</span>.currentArticle;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>src/app/news-single/news-single.page.html</code> display the content of current article:</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ion-card</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-card-header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ion-card-subtitle</span>&gt;</span>Card Subtitle<span class="tag">&lt;/<span class="name">ion-card-subtitle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ion-card-title</span>&gt;</span> <span class="template-variable">&#123;&#123; article.title &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">ion-card-title</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">ion-card-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-img</span> [<span class="attr">src</span>]=<span class="string">"article.urlToImage"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-img</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-card-content</span>&gt;</span><span class="template-variable">&#123;&#123; article.description &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">ion-card-content</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">ion-card</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://github.com/aomine-sama/px/blob/master/2019/19082203.png?raw=true" alt="news detail"></p>
<h2 id="Back-button"><a href="#Back-button" class="headerlink" title="Back button"></a>Back button</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">slot</span>=<span class="string">"start"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ion-back-button</span> <span class="attr">text</span>=<span class="string">"...."</span> <span class="attr">icon</span>=<span class="string">"...."</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Github repo: &lt;a href=&quot;https://github.com/younglaker/CometLab/tree/ionic-news&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/younglaker/CometLab/tree/ionic-news&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Command&quot;&gt;&lt;a href=&quot;#Command&quot; class=&quot;headerlink&quot; title=&quot;Command&quot;&gt;&lt;/a&gt;Command&lt;/h2&gt;&lt;p&gt;Start serve&lt;/p&gt;
&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;ionic serve&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://laker.me/blog/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://laker.me/blog/tags/Angular/"/>
    
      <category term="Ionic" scheme="http://laker.me/blog/tags/Ionic/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 66 Plus One (Python)</title>
    <link href="http://laker.me/blog/2019/06/20/19_0620_leetcode66/"/>
    <id>http://laker.me/blog/2019/06/20/19_0620_leetcode66/</id>
    <published>2019-06-20T00:24:00.000Z</published>
    <updated>2020-03-08T08:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="external">https://leetcode.com/problems/count-and-say/</a></p>
<p>Given a non-empty array of digits representing a non-negative integer, plus one to the integer.</p>
<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p>
<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>
<a id="more"></a>
<p>Example 1:</p>
<pre><code>Input: [1,2,3]
Output: [1,2,4]
</code></pre><p>Explanation: The array represents the integer 123.</p>
<p>Example 2:</p>
<pre><code>Input: [4,3,2,1]
Output: [4,3,2,2]
</code></pre><p>Explanation: The array represents the integer 4321.</p>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1:"></a>Solution 1:</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">def plusOne(<span class="built_in">digits</span>):</div><div class="line">    carry = <span class="number">1</span></div><div class="line">    # <span class="built_in">range</span>(start, <span class="keyword">stop</span>, step)</div><div class="line">    for i <span class="keyword">in</span> <span class="built_in">range</span>(len(<span class="built_in">digits</span>) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</div><div class="line"></div><div class="line">        carry = <span class="built_in">int</span>( <span class="built_in">digits</span>[i] + carry / <span class="number">10</span> )</div><div class="line">        <span class="built_in">digits</span>[i] = <span class="built_in">int</span>( <span class="built_in">digits</span>[i] + carry % <span class="number">10</span> )</div><div class="line">        <span class="keyword">if</span> carry == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">digits</span></div><div class="line"></div><div class="line">    result = []</div><div class="line">    result.append(<span class="number">1</span>)</div><div class="line">    for i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, len(<span class="built_in">digits</span>)+<span class="number">1</span> ):</div><div class="line">        result.append(<span class="built_in">digits</span>[i-<span class="number">1</span>])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>In python, there are some functions to shorten the code.</p>
<ul>
<li>divmod()</li>
</ul>
<p>Change:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">carry = <span class="built_in">int</span>( <span class="built_in">digits</span>[i] + carry / <span class="number">10</span> )</div><div class="line"><span class="built_in">digits</span>[i] = <span class="built_in">int</span>( <span class="built_in">digits</span>[i] + carry % <span class="number">10</span> )</div></pre></td></tr></table></figure></p>
<p>to:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">carry, digits<span class="string">[i]</span> = divmod(digits<span class="string">[i]</span> + carry, <span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<p>divmod(): takes two numbers and returns a pair of numbers consisting of their quotient and remainder, (x / y , x % y)</p>
<ul>
<li>join list</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">result</span> = []</div><div class="line"><span class="built_in">result</span>.append(<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="built_in">len</span>(digits)+<span class="number">1</span> ):</div><div class="line">    <span class="built_in">result</span>.append(digits[i<span class="number">-1</span>])</div><div class="line"></div><div class="line"><span class="literal">return</span> <span class="built_in">result</span></div></pre></td></tr></table></figure>
<p>to：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">or</span>: <span class="keyword">digits</span>.insert(<span class="number">0</span>,<span class="number">1</span>)</div><div class="line"><span class="keyword">return</span> [<span class="number">1</span>] + <span class="keyword">digits</span></div></pre></td></tr></table></figure>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2:"></a>Solution 2:</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def plusOne2(<span class="keyword">digits</span>):</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(len(<span class="keyword">digits</span>)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</div><div class="line">        # <span class="keyword">if</span> the sum <span class="keyword">is</span> less than <span class="number">10</span>,than there <span class="keyword">is</span> <span class="keyword">not</span> carry</div><div class="line">        <span class="keyword">if</span> <span class="keyword">digits</span>[i] &lt; <span class="number">9</span>:</div><div class="line">            <span class="keyword">digits</span>[i] += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">digits</span></div><div class="line">        # max: <span class="number">1</span>+<span class="number">9</span>=<span class="number">10</span>, only <span class="number">0</span></div><div class="line">        <span class="keyword">digits</span>[i] = <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>] + <span class="keyword">digits</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/count-and-say/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/count-and-say/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a non-empty array of digits representing a non-negative integer, plus one to the integer.&lt;/p&gt;
&lt;p&gt;The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.&lt;/p&gt;
&lt;p&gt;You may assume the integer does not contain any leading zero, except the number 0 itself.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="Python" scheme="http://laker.me/blog/tags/Python/"/>
    
      <category term="LeetCode" scheme="http://laker.me/blog/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew updating problem</title>
    <link href="http://laker.me/blog/2019/05/03/19_0503_homebrew_problem/"/>
    <id>http://laker.me/blog/2019/05/03/19_0503_homebrew_problem/</id>
    <published>2019-05-03T00:24:00.000Z</published>
    <updated>2019-05-29T07:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>There are two common problem when updating brew.</p>
<a id="more"></a>
<h2 id="Permission-denied"><a href="#Permission-denied" class="headerlink" title="Permission denied"></a>Permission denied</h2><blockquote>
<p>brew update Homebrew/.git/FETCH_HEAD: Permission denied</p>
</blockquote>
<p>When you run <code>brew doctor</code>, you can find there some permission problem with the <code>/usr/local/</code> files.</p>
<p><img src="https://raw.githubusercontent.com/aomine-sama/px/master/common/19050301.jpg" alt="image"></p>
<p>You should change the permission, run this:</p>
<pre><code>sudo chown -R YOURNAME:admin /usr/local
</code></pre><h2 id="Could-not-read-Username"><a href="#Could-not-read-Username" class="headerlink" title="Could not read Username"></a>Could not read Username</h2><blockquote>
<p>brew update fatal: could not read Username for ‘<a href="https://github.com" target="_blank" rel="external">https://github.com</a>‘: terminal prompts disabled</p>
</blockquote>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># laker @ Laker <span class="keyword">in</span> ~ [<span class="number">11</span>:<span class="number">03</span>:<span class="number">59</span>] C:<span class="number">1</span></div><div class="line">$ brew update</div><div class="line">git: <span class="string">'credential-osxkeychain'</span> <span class="keyword">is</span> <span class="keyword">not</span> a git command. See <span class="string">'git --help'</span>.git: <span class="string">'credential-osxkeychain'</span> <span class="keyword">is</span> <span class="keyword">not</span> a git command. See <span class="string">'git --help'</span>.</div><div class="line"></div><div class="line">fatal: could <span class="keyword">not</span> <span class="keyword">read</span> Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: terminal prompts disabled</div><div class="line">fatal: could <span class="keyword">not</span> <span class="keyword">read</span> Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: terminal prompts disabled</div><div class="line">Error: homebrew/homebrew-x11 does <span class="keyword">not</span> exist! Run <span class="string">'brew untap homebrew/homebrew-x11'</span></div><div class="line">homebrew/homebrew-dupes does <span class="keyword">not</span> exist! Run <span class="string">'brew untap homebrew/homebrew-dupes'</span></div></pre></td></tr></table></figure>
<p>Run the command it recommend:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> laker @ Laker <span class="keyword">in</span> ~ [11:05:57] C:1</span></div><div class="line"><span class="meta">$</span><span class="bash"> brew untap homebrew/homebrew-x11</span></div><div class="line">Untapping homebrew/x11...</div><div class="line">Untapped (242 files, 224.9KB).</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> laker @ Laker <span class="keyword">in</span> ~ [11:06:39]</span></div><div class="line"><span class="meta">$</span><span class="bash"> brew untap homebrew/homebrew-dupes</span></div><div class="line">Untapping homebrew/dupes...</div><div class="line">Untapped 36 formulae (277 files, 263.5KB).</div></pre></td></tr></table></figure>
<p>Then we can update sucessfully:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> laker @ Laker <span class="keyword">in</span> ~ [11:06:44]</span></div><div class="line"><span class="meta">$</span><span class="bash"> brew update</span></div><div class="line">Already up-to-date.</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are two common problem when updating brew.&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://laker.me/blog/categories/Mac/"/>
    
    
      <category term="Java" scheme="http://laker.me/blog/tags/Java/"/>
    
      <category term="MacOS" scheme="http://laker.me/blog/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Java On MacOS</title>
    <link href="http://laker.me/blog/2019/04/11/19_0411_java%20_on_mac/"/>
    <id>http://laker.me/blog/2019/04/11/19_0411_java _on_mac/</id>
    <published>2019-04-11T00:24:00.000Z</published>
    <updated>2019-04-11T04:13:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><ul>
<li>JDK: Java development toolkit, the library of Java, using to complie and run Java programs</li>
<li>J2EE: Java 2 enterprise edition, for enterprise</li>
<li>J2SE: Java 2 standard edition, standar version</li>
<li>J2ME: Java 2 Micro Edition, usually for mobile developement</li>
</ul>
<a id="more"></a>
<h2 id="Install-JDK"><a href="#Install-JDK" class="headerlink" title="Install JDK"></a>Install JDK</h2><p>If you use Eclipse, you don’t have to install Java development, it has one.</p>
<h3 id="Download-JDK"><a href="#Download-JDK" class="headerlink" title="Download JDK"></a>Download JDK</h3><p>Download JDK from <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html" target="_blank" rel="external">https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html</a></p>
<p>I use <code>jdk-11.0.2_osx-x64_bin.dmg</code></p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>After install the dmg file, enter <code>java -version</code> in terminal to test whether it is successful:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line">java version <span class="string">"11.0.2"</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-15</span> LTS</div><div class="line">Java(TM) SE Runtime Environment <span class="number">18.9</span> (build <span class="number">11.0</span><span class="number">.2</span>+<span class="number">9</span>-LTS)</div><div class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM <span class="number">18.9</span> (build <span class="number">11.0</span><span class="number">.2</span>+<span class="number">9</span>-LTS, mixed mode)</div></pre></td></tr></table></figure>
<h2 id="Enviroment"><a href="#Enviroment" class="headerlink" title="Enviroment"></a>Enviroment</h2><h3 id="Add-PATH-and-CALSSPATH"><a href="#Add-PATH-and-CALSSPATH" class="headerlink" title="Add PATH and CALSSPATH"></a>Add PATH and CALSSPATH</h3><p>Check the version:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span></div><div class="line">jdk-<span class="number">11.0</span>.<span class="number">2</span>.jdk</div></pre></td></tr></table></figure>
<p>Or open Finder, press “Command + Shift + G”, and enter <code>/Library/Java/JavaVirtualMachines/</code> to see it.</p>
<p>Edit profile:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/profile</span></div></pre></td></tr></table></figure>
<p>Add this at the last:</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=<span class="string">"/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/"</span></div><div class="line"></div><div class="line">CLASS_PATH=<span class="string">"$JAVA_HOME/lib"</span></div><div class="line"></div><div class="line">PATH=<span class="string">".:$PATH:$JAVA_HOME/bin</span></div></pre></td></tr></table></figure>
<p>The whole file should be like this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># System-wide .profile for sh(1)</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -x /usr/libexec/path_helper ]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">eval</span> `/usr/libexec/path_helper <span class="_">-s</span>`</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;BASH-no&#125;</span>"</span> != <span class="string">"no"</span> ]; <span class="keyword">then</span></div><div class="line">        [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">JAVA_HOME=<span class="string">"/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/"</span></div><div class="line"></div><div class="line">CLASS_PATH=<span class="string">"<span class="variable">$JAVA_HOME</span>/lib"</span></div><div class="line"></div><div class="line">PATH=<span class="string">".:<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin"</span></div></pre></td></tr></table></figure>
<p>Press <code>esc</code> and enter <code>:wq!</code> to sava and exit.</p>
<p>Enter this to make it effective:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></div></pre></td></tr></table></figure>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Write a <code>Hello.jav</code> file.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Hello</span> &#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">         System.<span class="keyword">out</span>.println(<span class="string">"Hello Laker"</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Compile it :</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> laker @ Laker <span class="keyword">in</span> ~/Downloads [21:23:40] C:1</span></div><div class="line"><span class="meta">$</span><span class="bash"> javac Hello.java</span></div></pre></td></tr></table></figure>
<p>Run it</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> laker @ Laker <span class="keyword">in</span> ~/Downloads [21:24:12]</span></div><div class="line"><span class="meta">$</span><span class="bash"> java Hello</span></div><div class="line">Hello Laker</div></pre></td></tr></table></figure>
<h2 id="Uninstallation"><a href="#Uninstallation" class="headerlink" title="Uninstallation"></a>Uninstallation</h2><p>Futhermore, the uninstallation is following command:<br><a href="https://blog.csdn.net/qq_30889373/article/details/78863313" target="_blank" rel="external">https://blog.csdn.net/qq_30889373/article/details/78863313</a></p>
<ul>
<li>Fisrt</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefpane</span></div></pre></td></tr></table></figure>
<ul>
<li>Second</li>
</ul>
<p>Check the version:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span></div><div class="line">jdk-<span class="number">11.0</span>.<span class="number">2</span>.jdk</div></pre></td></tr></table></figure>
<p>Remove</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo rm -rf <span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk-<span class="number">9.0</span>.<span class="number">1</span>.jdk</div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;About&quot;&gt;&lt;a href=&quot;#About&quot; class=&quot;headerlink&quot; title=&quot;About&quot;&gt;&lt;/a&gt;About&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JDK: Java development toolkit, the library of Java, using to complie and run Java programs&lt;/li&gt;
&lt;li&gt;J2EE: Java 2 enterprise edition, for enterprise&lt;/li&gt;
&lt;li&gt;J2SE: Java 2 standard edition, standar version&lt;/li&gt;
&lt;li&gt;J2ME: Java 2 Micro Edition, usually for mobile developement&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://laker.me/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="http://laker.me/blog/tags/Java/"/>
    
      <category term="MacOS" scheme="http://laker.me/blog/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 136 Single Number (Python)</title>
    <link href="http://laker.me/blog/2019/04/10/19_0410_leetcode136/"/>
    <id>http://laker.me/blog/2019/04/10/19_0410_leetcode136/</id>
    <published>2019-04-10T00:24:00.000Z</published>
    <updated>2019-05-16T00:53:31.000Z</updated>
    
    <content type="html"><![CDATA[<!-- ![LeetCode 189 Rotate Array](https://wx4.sinaimg.cn/large/6d184cefgy1g008qty954j20p0046aaf.jpg) -->
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of integers, every element appears twice except for one. Find that single one.</p>
<a id="more"></a>
<p>Note:</p>
<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p>Example 1:</p>
<pre><code>Input: [2,2,1]
Output: 1
</code></pre><p>Example 2:</p>
<pre><code>Input: [4,1,2,1,2]
Output: 4
</code></pre><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p><a href="https://github.com/younglaker/leetcode/blob/master/38_Count_and_Say.py" target="_blank" rel="external">https://github.com/younglaker/leetcode/blob/master/38_Count_and_Say.py</a></p>
<h3 id="Approach-1-Array"><a href="#Approach-1-Array" class="headerlink" title="Approach 1 - Array"></a>Approach 1 - Array</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def singleNumber1(nums):</div><div class="line">    <span class="keyword">list</span> = []</div><div class="line">    <span class="keyword">for</span> i in num<span class="variable">s:</span></div><div class="line">        <span class="keyword">if</span> i in lis<span class="variable">t:</span></div><div class="line">            <span class="keyword">list</span>.<span class="built_in">remove</span>(i)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">list</span>.<span class="keyword">append</span>(i)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">list</span>.<span class="keyword">pop</span>()</div></pre></td></tr></table></figure>
<p>Use array(in Python called list) to store numbers in nums. If some number in <code>nums</code> is new to array, append it.If some number is already in the array, remove it</p>
<ul>
<li>Time complexity : O(n^2). <code>for i in nums</code> takes O(n) time, and <code>if i in list</code> is also a for-loop taking O(n) time.</li>
<li>Space complexity : O(n). We need a list of size n to contain elements in nums.</li>
</ul>
<h3 id="Approach-2-Hash"><a href="#Approach-2-Hash" class="headerlink" title="Approach 2 - Hash"></a>Approach 2 - Hash</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def singleNumber2(nums):</div><div class="line">    dict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">        <span class="keyword">if</span> dict.has_key(i):</div><div class="line">            dict.<span class="built_in">pop</span>(i)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            dict.update(&#123;i: <span class="number">0</span>&#125;)</div><div class="line">    <span class="built_in">print</span> dict</div><div class="line">    <span class="keyword">for</span> <span class="built_in">key</span>, val <span class="keyword">in</span> dict.items():</div><div class="line">        <span class="keyword">if</span> val == <span class="number">0</span>:</div><div class="line">            <span class="built_in">return</span> <span class="built_in">key</span></div></pre></td></tr></table></figure>
<p>or:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber5</span><span class="params">(nums)</span>:</span></div><div class="line">    hash_table = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            hash_table.pop(i)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            hash_table[i] = <span class="number">1</span></div><div class="line">    <span class="comment"># popitem(): Remove the last item from the dictionary:</span></div><div class="line">    <span class="keyword">return</span> hash_table.popitem()[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>Use array(in Python called list) to store numbers in nums. If some number in <code>nums</code> is new to array, append it.If some number is already in the array, remove it</p>
<ul>
<li>Time complexity : O(n). <code>for i in nums</code> takes O(n) time, and <code>if dict.has_key(i)</code> takes O(1) time.</li>
<li>Space complexity : O(n). We need a hash table of size n to contain elements in nums.</li>
</ul>
<h3 id="Approach-3-Math"><a href="#Approach-3-Math" class="headerlink" title="Approach 3: Math"></a>Approach 3: Math</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber3</span><span class="params">(nums)</span></span>:</div><div class="line">    <span class="comment"># sum(a)</span></div><div class="line">    <span class="comment"># a is the list , it adds up all the numbers in the</span></div><div class="line">    <span class="comment"># list a and takes start to be 0, so returning</span></div><div class="line">    <span class="comment"># only the sum of the numbers in the list.</span></div><div class="line">    <span class="comment"># sum(a, start)</span></div><div class="line">    <span class="comment"># this returns the sum of the list + start</span></div><div class="line">    <span class="comment"># set(list): remove the duplicate</span></div><div class="line">    <span class="keyword">return</span> <span class="number">2</span> * sum(set(nums)) - sum(nums)</div></pre></td></tr></table></figure>
<p>2∗(a+b+c)−(2a+2b+c)=c</p>
<ul>
<li>Time complexity : O(n + n) = O(2n)=O(n). <code>sum()</code> is a for-loop.</li>
<li>Space complexity : O(n + n) = O(2n)=O(n). A set needs space for the elements in nums</li>
</ul>
<h3 id="Approach-4-XOR"><a href="#Approach-4-XOR" class="headerlink" title="Approach 4: XOR"></a>Approach 4: XOR</h3><p>Because <code>a⊕0=a</code> and <code>a⊕a=0</code><br>Then: <code>a⊕b⊕a=(a⊕a)⊕b=0⊕b=b</code><br>So we can XOR all bits together to find the unique number.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber4</span><span class="params">(nums)</span></span>:</div><div class="line">    a = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="symbol">nums:</span></div><div class="line">        a ^= i</div><div class="line">    <span class="keyword">return</span> a</div></pre></td></tr></table></figure>
<blockquote>
<p>Exchange blogroll： <a href="http://laker.me/blog">http://laker.me/blog</a><br>Github：<a href="https://github.com/younglaker" target="_blank" rel="external">https://github.com/younglaker</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- ![LeetCode 189 Rotate Array](https://wx4.sinaimg.cn/large/6d184cefgy1g008qty954j20p0046aaf.jpg) --&gt;
&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Given a non-empty array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://laker.me/blog/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://laker.me/blog/tags/Algorithm/"/>
    
      <category term="Python" scheme="http://laker.me/blog/tags/Python/"/>
    
      <category term="LeetCode" scheme="http://laker.me/blog/tags/LeetCode/"/>
    
  </entry>
  
</feed>
